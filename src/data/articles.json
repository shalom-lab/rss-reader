{
  "categories": [
    {
      "id": "技术博客",
      "name": "技术博客"
    },
    {
      "id": "R语言",
      "name": "R语言"
    },
    {
      "id": "Python",
      "name": "Python"
    }
  ],
  "articles": [
    {
      "id": "https://realpython.com/podcasts/rpp/242/",
      "title": "The Real Python Podcast – Episode #242: Eric Matthes: Maybe Don't Start With Unit Tests",
      "description": "Should you always start testing your code with unit tests? When does it make sense to look at integration or end-to-end testing as a first step instead? This week on the show, we speak with previous guest Eric Matthes about where to begin testing your code.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/242/",
      "pubDate": "2025-03-07T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "http://www.ruanyifeng.com/blog/2025/03/weekly-issue-340.html",
      "title": "科技爱好者周刊（第 340 期）：技术炒作三十年",
      "description": "这里记录每周值得分享的科技内容，周五发布。\n本杂志开源，欢迎投稿。另有《谁在招人》服务，发布程序员招聘信息。合作请邮件联系（yifeng.ruan@gmail.com）。\n封面图\n\n成都建筑师刘家琨，本周获得号称\"建筑界诺贝尔奖\"的普利兹克奖，上图是他的作品苏州御窑金砖博物馆。（via）\n技术炒作三十年\n大家有没有发现，每隔一段时间，媒体就会大肆炒作一种新技术，宣扬它将对人类产生巨大影响，全社会都在关注，人人都在谈论。\n\n这种炒作就是大家常说的\"风口\"吧。突然之间，风就起来了，如果正好站在风口，猪也能飞起来。\n你能举出多少个这种炒作的例子？\n一个国外程序员根据回忆，列出了过去三十年主要的几次技术炒作。\n1998-2001 年：互联网 WWW\n1999-2006 年：Java\n2004-2007 年：Web 2.0\n2007-2010：云计算\n2010-2015：社交媒体\n2012-2015：物联网\n2013-2015：大数据\n2017-2021：区块链\n2021 年至今：人工智能\n大家觉得，这个时间列表是否准确？\n\n我的亲身感受是差不多。这是主要的几次技术炒作，而且这些技术都成功了，所以炒作的时间才会持续这么久，两年到五年，然后被下一个热点取代。\n当中，还有许多次小的技术炒作，但都没有那么成功，持续时间就没有这么久，很快退潮了，比如元宇宙、Web 3、AR/VR 眼镜、3D 打印、自动驾驶等等。\n一种新技术能够带来大规模、长时间的炒作，有一个前提条件，那就是它有真东西，确实能对社会经济带来非常有感的变化。\n上面列表的每一种新技术，确实都是大的突破，改变了技术方向，没有一个是虚的。如果再加上智能手机、短视频、加密货币，可能就把最近三十年大的技术\"风口\"都包括了。\n我以前有一个误区，看不起技术炒作，认为那只是一窝蜂的音浪，跟娱乐版的明星炒作没什么不同。\n人到中年，我才意识到，这种观念大错特错，技术从业者千万不能有这种想法。每一次技术炒作，不仅是音浪，更是机会，会带来空前的关注、疯狂涌入的资金、以及切切实实的需求。炒作规模越大、程度越厉害，带来的机会和资金也就越大。\n每一次大规模的技术炒作，都会诞生一些快速增长的指标公司，创造巨大的财富效应。如果你正好身在其中，事业和财富都会随之起飞。\n让我们现实一点，一个工程师最有技术生产力、创造力、事业起飞的时间窗口，就只有那么几年。如果个人事业要快速起来、为未来铺好道路，光有技术还不够，还必须赶上至少一个大的技术风口，用外部的资金和需求放大个人努力。\n否则，单靠自己的成果积累，就太慢了，很难快速到达更高的层次，很可能辛辛苦苦干了二十年，还是在做一些基础的事情。如果出现技术升级，使得你的技能过时了，后面的路就难了。技术风口其实是实现个人阶层飞跃、人生翻转的最可行的路径。\n所以，每一轮大的技术风口并不完全是一哄而上的炒作，里面包含了一些真正的机会，值得关注和跟上。这也是为什么周刊每一次都对新技术倍加关注、积极评价的原因。\n当然，赶上技术风口的前提，还是要有真才实学，能做出实打实的产品。否则，真遇到风口，你也无法脱颖而出，拿到技术炒作的红利。\n[活动] AI FOR CODE 创意挑战赛\n上周提到的全国 AI 编程大赛，大家还有印象吗。\n这次大赛为了让更多人参与，除了常规的\"应用赛道\"，还特别设置了\"创意赛道\"。\n只要有创意，就能参加，不需要具体的实现，实现交给 AI。\n\n创意赛道从今天（3月7日）开始，就可以提交作品了，到3月27日截止。\n如果你有想让 AI 实现的创意（点子），不妨发布到作品提交专区。发布时，需要按照模版要求提交。\n注意，发布的创意需要公开可见，这样才能让大家投票。得票高的创意，将有丰富的奖品。\n每个人最多提交5个创意。如有团队使用你的创意完成项目开发，你将获得神秘大礼！\n不要错过本次大赛，只要你有想法，就有机会得奖。提交创意和投票的详细介绍，可以点击这里，或者扫描上面海报的二维码。\n修复壁画的新方法\n意大利帕多瓦教堂，曾经有一幅巨大的中世纪壁画，非常精美。\n\n但是，这幅壁画在1944年的第二次世界大战被炸毁。\n下面是壁画的虚拟重建图（局部）。\n\n壁画被炸毁时，人们把墙壁的碎片收集起来，一共有88000多块，存放在博物馆。\n下面是碎片的照片，这些碎片大概只占原始壁画的10%。\n\n碎片的数量太大，缺失又太多，从来没人敢于尝试将它们还原。\n但是，1992年的时候，博物馆曾经将所有碎片拍成了数码照片。\n慕尼黑工业大学的数学教授马西莫·福纳西耶（Massimo Fornasier）得知了这件事，决定基于这些数码照片，使用计算机进行壁画还原。\n这幅壁画在战前，曾经有过一张黑白照片（下图），可以作为修复的依据。\n\n马西莫教授的第一步，是将这张照片上色，还原成彩色照片。\n\n然后，将碎片进行图像吻合，一块块找到它们的位置（下图）。\n\n下面是碎片上墙的样子。\n\n缺失的部分，团队用灰白颜色补全。\n\n全彩的虚拟效果图如下。\n\n科技动态\n1、美国萤火虫航天公司的\"蓝色幽灵\"登陆器，成功登陆月球，成为第一家登陆月球的民营企业。\n\n2、一家美国生物技术公司，改造了老鼠的毛发基因，成功培养出了长毛鼠。\n\n\n他们下一步的目标，是培育长毛象。\n3、本田公司推出一款口袋妖怪摩托车，外形非常惊艳（下图）。\n\n4、联想推出一款太阳能笔记本，上盖覆盖了太阳能电池。\n\n据说阳光下放20分钟，可以播放视频1小时。但是怎么看，都不如外接一个太阳能发电板实用。\n5、微软将在今年5月关闭通信服务 Skype，由 Teams 替代。智能手机出现之前，Skype 是最流行的国际电话软件。\n\n文章\n1、流式 HTML（英文）\n\nAI 的聊天对话都是流式加载的，本文介绍一个技巧，不使用 JS 也能加载流式内容。\n2、不要用 TypeScript 枚举（英文）\n\nTypeScript 官方已经不建议使用 enum（枚举）语法，作者建议改用字符串的联合类型代替。\n3、我如何使用 roboscribe 音频转文本（英文）\n\n一篇教程，作者使用软件 roboscribe 将播客转成可用的文本，这事要比听上去麻烦。\n4、如何测试电梯（中文）\n\n本文将电梯抽象成一个\"有限状态机\"，设计测试用例。（@lezhi12 投稿）\n5、我为什么选择 Firefox（英文）\n\n作者介绍 Firefox 浏览器胜过 Chrome 的几个地方，有些功能大家可能未必知道。\n6、脚本代替别名（英文）\n\n常用的终端命令，往往可以设置别名（alias）作为快捷方式，作者提出一种新的方式，用脚本代替别名，更容易维护。\n7、Tailscale 对我很有用（英文）\n\n作者介绍自己的 Tailscale 用法，将不同的设备组成一个虚拟局域网。\n工具\n1、Yaak\n\n一个测试 API 的开源桌面软件，功能比较全。\n2、cleanmac\n清理 macOS 系统的一个命令行脚本。\n3、Lynx\n\n字节开源的一款跨平台原生应用开发工具，使用 Web 语法，生成各个平台的原生应用，类似于 React Native。\n4、appstat\n\n监控 Windows 应用的资源占用（内存、CPU、网络）的一款工具。\n5、Maestro\n\n一个 Web 和 手机的 UI 测试工具，只要写好配置文件，就能自动运行测试。\n6、Git Worktree Manager\n\nVS Code 插件，方便在不同的 Git 仓库、不同的分支之间切换。（@jackiotyu 投稿）\n7、Hugo Translator\n一个 Python 脚本，将 markdown 格式的中文 Hugo 博客帖子，翻译成英文。（@Rico00121 投稿）\n8、O-Spy\n\n一个 Web 应用的记录并回放用户操作的工具，用来远程调试。（@wqcstrong 投稿）\n9、MTranServer\n\n开源的离线翻译服务器，号称资源消耗低，CPU + 1G 内存即可运行，支持调用沉浸式翻译。（@xxnuo 投稿）\n10、Screen Sharing Application\n\n一个开源的 Next.js 应用，通过点对点通信，实时分享你的屏幕。它会生成一个房间码，其他人访问这个房间，就能看到你的屏幕。\nAI 相关\n1、olmOCR\n\n一个使用 AI 模型进行文字识别（OCR）的 Python 工具。\n2、Probly\n\n一个基于 AI 的电子表格软件，可以在浏览器中对表格运行 Python 代码。\n3、Hacker News 每日播报\n\n每天自动抓取 Hacker News 热门文章，通过 AI 生成中文播客。（@Y024 投稿）\n4、语析\n\n基于大模型，进行知识库管理与生成知识图谱的工具。（@xerrors 投稿）\n5、DiffRhythm\n\n西北工业大学 ASLP 实验室开发的一个 AI 音乐生成模型。（@JoeDeanx 投稿）\n资源\n1、Meta 的 AI Demo\n\nMeta 公司的 AI 实验室，展示最新的成果。\n2、ProWords\n\n一个基于 AI 的单词记忆平台，根据职业身份生成例句，代码开源。（@winterfx 投稿）\n3、圣彼得大教堂 3D 导览\n\n梵蒂冈的圣彼特大教堂（St. Peter's Basilica）是世界最大教堂，这个网站提供它的 3D 模型还原。\n4、Shapecatcher\n\n这个网站根据你画出的形状，返回匹配的 Unicode 字符，包括 Emoji 字符和东亚文字。\n图片\n1、奥乐齐的条形码\n奥乐齐（Aldi）是一家德国连锁超市，为了方便用户扫描条形码，把条形码印刷得特别长。\n\n小包装商品无法放置那么长的条形码，奥乐齐就会设法放置多个条形码。\n\n上图的奶酪通心粉，在侧面和底部都有条形码。\n2、乐高日心仪\n国外网友使用乐高积木，搭建了一个可以转动的日心仪。\n\n上图中，中间黄色的是太阳，地球围绕太阳公转，并且有22.5°的倾斜角。\n\n地球的旁边还有月亮。月亮其实有5.15°倾角，但是肉眼不容易察觉。\n\n它是可以实际运转的，内部结构很复杂，有大量齿轮。\n\n\n文摘\n1、高管与普通员工的脱节\n作者：伊森·埃文斯（Ethan Evans）\n我是已经退休的亚马逊副总裁，在亚马逊待了超过15年，领导过800多人的国际团队。\n我任职期间，亚马逊股票涨幅高达9082%，因此我对普通人的许多生活困境并不了解。比我更高级的副总裁和首席执行官，就更是如此了。谈论自己的财富是大多数高管都避而不谈的禁忌话题。\n今天我想谈谈一个小问题，先介绍一下我自己的情况，就举四点：1) 我没有任何抵押贷款，2) 每两周有一个女佣为我打扫一次住宅，3) 我付钱请别人帮我的花园割草， 4) 我50岁就退休了。\n普通家庭，即使是工程师和知识分子，也没有这些福利。\n在我上面的高管，享有的福利就更多了，我看到的就有：1) 有专门的度假屋，雇了多个工作人员长期看守；2) 私人飞机；3) 私人助理，不用自己付账单、买杂货或接孩子，助理处理一切；4）私人司机；5）孩子上贵得惊人的私立学校；6）他们想住哪儿就住哪儿。\n经济成本从来不是这一类人的障碍。\n现在让我们看一个例子，说明高管与员工是如何脱节的：结束远程工作，重返办公室。\n高管的财富使他们有不同的选择。大多数高管把工作和职业成功放在生活的首位。如果他们不这样做，他们很少能成为高管。他们中的大多数人（包括我自己），利用财富为自己购买时间。他们大部分时间都花在工作上，小部分时间花在家人身上。如果工作是你生活的重心，那么重返办公室就自然是一个优先事项。\n你想象一下高管的工作场景：无需通勤，司机会送你到家，你一心工作，无需赶回家接孩子，助理会帮你做这些，你也无需购物、打扫或做饭，佣人会做这些，无需辅导作业，好学校会提供辅导。在这种情况下，回到办公室感觉非常\"值得\"。\n这不是一篇反对高管个人财富的长篇大论。毕竟，我付出了25年的生命，得到了一些财富。相反，这是一种解释，以便你了解高管与普通员工的脱节。\n如果你需要影响高管，而他们的经历可能与你的现实生活脱节，请通过故事、视频和数据帮助他们看到现实。请记住，他们确实生活在另一个世界。这并不一定会使他们变得邪恶，只是脱节了。我不想发生\"脱节\"，但必须承认这种情况确实会随着时间的推移而发生。\n言论\n1、\n兼职创业不是可以长期坚持的事情。如果你上班时整天面对电脑，回家后又坐在另一台电脑前开发自己的软件，那将让你筋疲力尽。\n你可以这样做几个月，但问题是，企业通常需要更长的时间才能起步，很多人就会放弃。\n-- 《关于独立开发》\n2、\n在开始一个项目时，一定程度的天真是必不可少的。如果我知道这条路有多难，我可能永远不会开始。但由于我完全不了解未来的挑战，所以我只是一头扎进去，一路摸索。 \n-- 金茨·齐巴洛迪斯（Gints Zilbalodis），拉脱维亚导演，他的作品《猫猫的奇幻漂流》（Flow）获得今年的奥斯卡最佳动画片奖\n3、\n你编写的每一行代码都可能是一个潜在的 bug。除非你绝对需要这行代码，缺了它程序就会受影响，否则就不要写。不要编写你用不到的抽象层。如果优化会增加任何复杂性，就坚决不要优化。\n-- 《每一代码都可能是 bug》\n4、\n我对 AI 的看法是，AI 本身不会创造，需要人类与它共同创造，创造的结果好坏与使用它的人的质量高度相关。\n与 AI 交谈不像在与一个人交谈，而像在与人类的集体思维交谈。AI 不应该让你减少思考，而应该帮助你增加思考，AI 是你的杠杆，可以让你拓展自己。\n-- Alex Komoroske，美国程序员\n5、\n10个人开会，可以没有主持人。100个人开会，必须有主持人。1000个人开会，需要一个组委会。\n扩大10倍，需要将知识/资源推向极限，但是扩大100倍，需要跳出现有的维度，重新安排一切。\n-- 《你的下两个零》\n往年回顾\n一周是一年的2%（#293）\n与孔子 AI 聊天（#243）\n前端与后端，谁更难？（#193）\n世界尽头与冷酷仙境（#143）\n（完）\n文档信息\n版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\n发表日期： 2025年3月 7日",
      "link": "http://www.ruanyifeng.com/blog/2025/03/weekly-issue-340.html",
      "pubDate": "2025-03-07T00:11:36.000Z",
      "source": "阮一峰的网络日志",
      "sourceUrl": "http://www.ruanyifeng.com/blog",
      "category": "技术博客"
    },
    {
      "id": "https://realpython.com/python-bytes/",
      "title": "Bytes Objects: Handling Binary Data in Python",
      "description": "The bytes data type is an immutable sequence of unsigned bytes used for handling binary data in Python. You can create a bytes object using the literal syntax, the bytes() function, or the bytes.fromhex() method. Since bytes are closely related to strings, you often convert between the two data types, applying the correct character encoding.\nBy the end of this tutorial, you’ll understand that:\nPython bytes objects are immutable sequences of unsigned bytes used for handling binary data.\nThe difference between bytes and bytearray is that bytes objects are read-only, while bytearray objects are mutable.\nYou convert a Python string to bytes using the str.encode() method, the bytes() function, or the codecs module.\nEndianness refers to the byte order used to represent binary data in memory, which can be either little-endian or big-endian.\nThis tutorial starts with a brief overview of binary data fundamentals, setting the scene for the remaining part, which delves into creating and manipulating bytes objects in Python. Along the way, it touches on related topics, such as bytearray, bytes-like objects, and the buffer protocol. To top it off, you’ll find several real-life examples and exercises at the end, which demonstrate the concepts discussed.\nTo get the most out of this tutorial, you should be familiar with Python basics, particularly built-in data types.\nGet Your Code: Click here to download the free sample code that you’ll use to learn about bytes objects and handling binary data in Python.\n Take the Quiz: Test your knowledge with our interactive “Python Bytes” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nPython Bytes \n      \nIn this quiz, you'll test your understanding of Python bytes objects. By working through this quiz, you'll revisit the key concepts related to this low-level data type.\nBrushing Up on Binary Fundamentals\nIf you’re new to binary data or need a quick refresher, then consider sticking around. This section will provide a brief overview of binary representations, emphasizing a Python programmer’s perspective. On the other hand, if you’re already comfortable with the basics, then feel free to dive right into creating bytes objects in Python.\nBits, Bytes, and Binary Data\nVirtually every piece of information, from books and music to movies, can be stored as binary data in a computer’s memory. The word binary implies that the information is stored as a sequence of binary digits, or bits for short. Each bit can hold a value of either one or zero, which is particularly well-suited for storage in electronic devices since they often use distinct voltage levels to represent these binary states.\nFor example, the binary sequence below may represent the color of a pixel in an image:\n \n\n\n\n\n1 1 0 0 0 0 1 0 0 0 1 1 0 0 1 1 0 0 1 0 0 1\n\n\n\n\nTo make the interpretation of such binary sequences more systematic, you often arrange the individual bits into uniform groups. The standard unit of information in modern computing consists of exactly eight bits, which is why it’s sometimes known as an octet, although most people call it a byte. A single 8-bit byte allows for 256 possible bit combinations (28).\nWith this in mind, you can break up the bit sequence above into these three bytes:\n \n \n \n\n\n\n\n0 0 1 1 0 0 0 0\n1 0 0 0 1 1 0 0\n1 1 0 0 1 0 0 1\n\n\n\n\nNotice that the leftmost byte has been padded with two leading zeros to ensure a consistent number of bits across all bytes. Together, they form a 24-bit color depth, letting you choose from more than 16 million (224) unique colors per pixel.\nIn this case, each byte corresponds to one of three primary colors (red, green, and blue) within the RGB color model, effectively serving as coordinates in the RGB color space. Changing their proportions can be loosely compared to mixing paints to achieve a desired hue.\nNote: Strictly speaking, the RGB color model is an additive one, meaning it combines specific wavelengths of light to synthesize complex colors. In contrast, paint mixing follows a subtractive model, where pigments absorb certain wavelengths of light from the visible spectrum.\nTo reveal the pixel’s primary colors as decimal numbers, you can open the Python REPL and define binary literals by prefixing the corresponding bit sequences with 0b:\nPython\n    \n    \n\n      \n    \n>>> 0b00110000, 0b10001100, 0b11001001\n(48, 140, 201)\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nBinary literals are an alternative way of defining integers in Python. Other types of numeric literals include hexadecimal and octal. For example, you can represent the integer 48 as 0x30 in hexadecimal or 0o60 in octal, allowing you to write the same number differently.\nHaving such flexibility comes in handy since it’s customary to express byte values using the hexadecimal numeral system. By rewriting each byte as a two-digit hex number, you can represent your pixel color much more compactly compared to the equivalent binary sequence:\nPython\n    \n    \n\n      \n    \n>>> hex(48), hex(140), hex(201)\n('0x30', '0x8c', '0xc9')\n\n>>> int(\"308cc9\", base=16)\n3181769\n\n>>> int(\"001100001000110011001001\", base=2)\n3181769\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nCalling the built-in hex() function on an integer returns the corresponding hexadecimal literal as a string. When you combine the resulting hex numbers, you’re able to describe a 24-bit color with just six digits (308cc9). Go ahead and open an online color picker to see what that encoded value looks like:\nRead the full article at https://realpython.com/python-bytes/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-bytes/",
      "pubDate": "2025-03-05T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/working-with-python-polars/",
      "title": "Working With Python Polars",
      "description": "In the world of data analysis and manipulation, Python has long been the go-to language. With extensive and user-friendly libraries like NumPy, pandas, and PySpark, there’s a solution available for almost any data-driven task. Among these libraries, one name that’s been generating a significant amount of buzz lately is Polars.\nPolars is a high-performance DataFrame library, designed to provide fast and efficient data processing capabilities. Inspired by the reigning pandas library, Polars takes things to another level, offering a seamless experience for working with large datasets that might not fit into memory.\nIn this video course, you’ll learn:\nWhy Polars is so performant and attention-grabbing\nHow to work with DataFrames, expressions, and contexts\nHow to read data into DataFrames\nHow to group and aggregate data \nWhat the lazy API is and how to build lazy queries\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/working-with-python-polars/",
      "pubDate": "2025-03-04T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-while-loop/",
      "title": "Python while Loops: Repeating Tasks Conditionally",
      "description": "Python’s while loop enables you to execute a block of code repeatedly as long as a given condition remains true. Unlike for loops, which iterate a known number of times, while loops are ideal for situations where the number of iterations isn’t known upfront.\nLoops are a pretty useful construct in Python, so learning how to write and use them is a great skill for you as a Python developer.\nBy the end of this tutorial, you’ll understand that:\nwhile is a Python keyword used to initiate a loop that repeats a block of code as long as a condition is true.\nA while loop works by evaluating a condition at the start of each iteration. If the condition is true, then the loop executes. Otherwise, it terminates.\nwhile loops are useful when the number of iterations is unknown, such as waiting for a condition to change or continuously processing user input.\nwhile True in Python creates an infinite loop that continues until a break statement or external interruption occurs.\nPython lacks a built-in do-while loop, but you can emulate it using a while True loop with a break statement for conditional termination.\nWith this knowledge, you’re prepared to write effective while loops in your Python programs, handling a wide range of iteration needs.\nGet Your Code: Click here to download the free sample code that shows you how to work with while loops in Python.\n Take the Quiz: Test your knowledge with our interactive “Python while Loops: Repeating Tasks Conditionally” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nPython while Loops: Repeating Tasks Conditionally \n      \nIn this quiz, you'll test your understanding of Python's while loop. This loop allows you to execute a block of code repeatedly as long as a given condition remains true. Understanding how to use while loops effectively is a crucial skill for any Python developer.\nGetting Started With Python while Loops\nIn programming, loops are control flow statements that allow you to repeat a given set of operations a number of times. In practice, you’ll find two main types of loops:\nfor loops are mostly used to iterate a known number of times, which is common when you’re processing data collections with a specific number of data items.\nwhile loops are commonly used to iterate an unknown number of times, which is useful when the number of iterations depends on a given condition.\nPython has both of these loops and in this tutorial, you’ll learn about while loops. In Python, you’ll generally use while loops when you need to repeat a series of tasks an unknown number of times.\nPython while loops are compound statements with a header and a code block that runs until a given condition becomes false. The basic syntax of a while loop is shown below:\nPython Syntax\n    \n    \nwhile condition:\n    <body>\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this syntax, condition is an expression that the loop evaluates for its truth value. If the condition is true, then the loop body runs. Otherwise, the loop terminates. Note that the loop body can consist of one or more statements that must be indented properly.\nHere’s a more detailed breakdown of this syntax:\nwhile is the keyword that initiates the loop header.\ncondition is an expression evaluated for truthiness that defines the exit condition.\n<body> consists of one or more statements to execute in each iteration.\nHere’s a quick example of how you can use a while loop to iterate over a decreasing sequence of numbers:\nPython\n    \n    \n\n      \n    \n>>> number = 5\n\n>>> while number > 0:\n...     print(number)\n...     number -= 1\n...\n5\n4\n3\n2\n1\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, number > 0 is the loop condition. If this condition returns a false value, the loop terminates. The body consists of a call to print() that displays the value on the screen. Next, you decrease the value of number. This change will produce a different result when the loop evaluates the condition in the next iteration.\nThe loop runs while the condition remains true. When the condition turns false, the loop terminates, and the program execution proceeds to the first statement after the loop body. In this example, the loop terminates when number reaches a value less than or equal to 0.\nIf the loop condition doesn’t become false, then you have a potentially infinite loop. Consider the following loop, and keep your fingers near the Ctrl+C key combination to terminate its execution:\nPython\n    \n    \n\n      \n    \n>>> number = 5\n>>> while number != 0:\n...     print(number)\n...     number -= 1\n...\n5\n4\n3\n2\n1\n\n>>> number = 5\n>>> while number != 0:\n...     print(number)\n...     number -= 2\n...\n5\n3\n1\n-1\n-3\n-5\n-7\n-9\n-11\nTraceback (most recent call last):\n    ...\nKeyboardInterrupt\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, the loop condition is number != 0. This condition works when you decrease number by 1. However, if you decrease it by 2, the condition may never become false, resulting in a potentially infinite loop. In such cases, you can usually terminate the loop by pressing Ctrl+C, which raises a KeyboardInterrupt exception on most operating systems.\nNote that the while loop checks its condition first before anything else happens. If it’s false to start with, then the loop body will never run:\nPython\n    \n    \n\n      \n    \n>>> number = 0\n>>> while number > 0:\n...     print(number)\n...     number -= 1\n...\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nRead the full article at https://realpython.com/python-while-loop/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-while-loop/",
      "pubDate": "2025-03-03T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-gil/",
      "title": "Quiz: What Is the Python Global Interpreter Lock (GIL)?",
      "description": "In this quiz, you’ll test your understanding of the\nPython Global Interpreter Lock (GIL).\nThe GIL allows only one thread to hold the control of the Python interpreter. This has advantages, but can also be a performance bottleneck in CPU-bound and multi-threaded code.\nBy working through this quiz, you’ll revisit the impact of the GIL on the performance of your Python programs and how to mitigate it.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-gil/",
      "pubDate": "2025-03-03T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "http://www.ruanyifeng.com/blog/2025/03/trae.html",
      "title": "Trae 国内版出来了，真的好用吗？",
      "description": "年初一月份，我就看到新闻，字节面向海外发布了一款 AI IDE，叫做 Trae。\n\n我心想，现在的 IDE 都有 AI 插件，功能完备，字节自己也有 MarsCode 插件，有必要再做一款单独的 IDE 吗？\n我就没有特别关注这个工具。\n上周，我遇到字节的同学，得知 Trae 国内版就在本周发布，我还提前拿到了内测版，这可是国内市场的首个 AI 原生 IDE。\n今天，就来说说我的使用心得，顺便也探讨一个更大的问题：AI 工具已经这么多了，该不该造新的轮子？\n先透露一下结论：Trae 国内版值得用。它作为一个 AI IDE，整体比插件好用，而且内置的大模型----豆包 1.5 pro、DeepSeek 满血版----无限量免费使用。\n一、国外版与国内版\n介绍使用体会之前，我先解释一下，两个版本的区别，主要是模型的差异。\nTrae 国外版使用国外的模型，对于国内用户来说，存在连接不上、等待时间长、网速较慢等问题。\nTrae 国内版使用国内的模型，连接可以保证稳定快速，界面也根据国内用户的习惯进行了定制。\n我也问了字节的同学，Trae 国内版和 MarsCode 是什么关系。回答是，它们是同一个团队的作品，适用于不同场景。\n如果你想保留原来使用的 IDE，只增加 AI 编程相关功能，那就用 MarsCode 插件。如果想体验一个全新的围绕 AI 设计的原生 IDE，那就试试 Trae。\n这两个产品后续都会长期开发，可以根据自己的需要选择。\n二、安装\nTrae 国内版需要去官网 trae.com.cn下载。\n目前，有三个版本：Windows 版、macOS Intel 芯片版、macOS M 系列芯片版。\n安装启动后，会出现下面的画面。\n\n接着，让你选择亮色/暗色主题，以及语言（简体中文）。\n\n它还会问你，要不要导入原来 IDE（VS Code/Cursor）的配置，算是很贴心的设计了。\n\n最后，问你要不要登录。不登录也可以用，只是某些功能会受到限制。登录的话，就跳转到 Trae 官网，用你的手机号登录。\n\n一切完毕，就会进入使用界面。\n\n三、使用界面\nTrae 的使用界面，相当简洁。左侧就是 VS Code 的界面，熟悉的话，上手没有任何难度。\n\n界面的右侧是 AI 区域。可以看到，它分成两个模式：Chat 和 Builder。\n\nChat 模式是默认模式，也就是问答模式。AI 回答问题，也可以生成代码，但不会生成项目，需要自己手动把代码复制过去。\nBuilder 模式是项目模式，你给出文字描述，让 AI 一键生成项目。\n下面，就来试试这两个模式。\n四、Chat 模式\nChat 模式的主体就是一个对话框，右下角按钮可以选择底层模型。\n\n国内版目前有三个模型可供选择。\n豆包 1.5 pro\nDeepSeek R1\nDeepSeek V3\n这三个模型都是免费无限量使用，DeepSeek 系列模型都是满血版。我实测，速度令人满意，能够较快地给出回答，没有遇到\"服务器繁忙\"的提示，包括最耗时的 DeepSeek R1 模型都是如此。\n至于，回答问题的质量，老实说，现阶段领先的大模型，这方面已经没有太多可挑剔的了。\n\n任何问题都可以问，包括非技术类的问题。\n\n我直接让它生成代码，回答的格式非常友好。\n\n大家注意，上图中，第一个代码块是终端代码，右上角有三个按钮（下图）。\n\n上图右上角的三个按钮，分别是\"复制\"、\"添加到终端\"和\"运行\"。如果点击后两个按钮，会直接把代码传入 Trae 内置的终端，就像下面这样。\n\n这部分，我感觉用起来比插件版流畅，整体感更强，这大概就是把 AI 做成 IDE 的好处了。\n五、Builder 模式\n再看 Builder 模式，它可以一键生成项目。\n点击上方的标签页，切换到该模式。可以看到，第一次进入，会有一个\"启动 Builder\"按钮（下图）。\n\n系统会提示你（下图），这里可以从零到一完成项目构建，并且所有修改会自动保存，并显示两个示例项目：贪吃蛇和 Todo List。\n\n为了测试正常的流程，我就直接在下方的对话框输入：\"请用 React 生成一个 Todo List 应用。\"\n\n系统会提示你指定一个目录，作为项目目录。然后，它不断给出操作步骤（下图）。\n\n上图中，需要执行具体的命令时，它会附有\"运行\"按钮，要你点击确认。\n点击后，Trae 会自动打开内置的终端，执行该命令（下图）。\n\n然后，它会一个个生成所需的文件，要求你审查。\n\n所有文件生成完毕，就出现了启动本地预览服务器的命令。\n\n运行后，Trae 会启动一个内置的 webview 页面，展示渲染效果，实时更新。\n\n这个很赞，任何修改都可以马上看到结果。\n但是我必须说，不知道是不是内测版的缘故，Builder 模式目前还不完善，只适合为项目生成架构，做不到一步到位，离理想状态有些差距。我试了多次，如果需求复杂一点，生成的代码很难一次就跑起来，需要多次修改。大家对它要抱有合理期待，这个模式后续还需要不断完善。\n六、其他功能\n除了两大模式，Trae 的其他功能也可圈可点。\n（1）代码智能补全。\n这是 AI 编程助手的基本功能，就不多说了。只要按回车键换行，Trae 会阅读并理解当前代码，然后自动补全后续代码。\n如果有注释，它会根据注释，生成缺少的代码。\n（2）指定上下文。\nTrae 允许指定对话的范围（上下文）。具体方法是在对话框输入#号。\n\n上图中，在对话框输入#后，系统就会自动弹出一个菜单，让你选择上下文（context），一共有四种。\nCode（代码）\nFile（文件）\nFolder（文件夹）\nWorkspace（工作区）\n默认的上下文是当前工作区（Workspace，即目前打开的项目），也可以指定为某个函数或类（Code）、某个文件（File）、某个文件夹（Folder）。\n一旦指定了上下文，AI 的回答会更有针对性。比如生成代码时，就会结合上下文的场景。\n（3）一键转对话。\n为了方便地将代码编辑框的内容，传送给 AI，Trae 提供\"一键转对话\"按钮，省去了复制粘贴的麻烦。\n\n上图中，选中某段代码，系统就会弹出\"添加到对话\"的浮动菜单，一键复制到 AI 对话框，便于提问。\n终端窗口的报错信息，也有这个功能（下图），这就很方便让 AI 来 debug。\n\n（4）模型自定义功能。\n我听字节的同学说，Trae 后面会支持模型自定义功能，用户可根据自己的喜好，接入对应的模型API。\n七、总结\n我试用 Trae 国内版后，感到它有几个显著优点。\n（1）产品设计周全，最常用的场景都考虑到了，用户体验比较流畅。\n（2）界面友好，交互设计良好，开发者容易上手。\n（3）AI 模型（包括满血版 DeepSeek）无限量免费使用，响应始终稳定快速。\n不足之处是 Builder 模式还不够强，生成的程序有 bug，第一次生成往往跑不起来，需要不断调整，耗时较多。\n总结就是，一个完整的 AI IDE 还是比 AI 插件，用起来更容易，有\"一体感\"，达到了更大的定制程度。\n随着 AI 的能力进一步发展，AI IDE 的想象空间会更大，也许会成为未来 IDE 发展的主要方向。\nTrae 国内版刚刚上线，开发团队希望大家下载试用，多提宝贵意见。\n（完）\n文档信息\n版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\n发表日期： 2025年3月 3日",
      "link": "http://www.ruanyifeng.com/blog/2025/03/trae.html",
      "pubDate": "2025-03-03T08:00:56.000Z",
      "source": "阮一峰的网络日志",
      "sourceUrl": "http://www.ruanyifeng.com/blog",
      "category": "技术博客"
    },
    {
      "id": "https://rweekly.org//2025-W10.html",
      "title": "R Weekly 2025-W10 ellmer, Closeread Prize winnners, Rapid RAG Prototyping",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Sam Parmar, with help from the R Weekly team members and contributors.\nHighlight\nAnnouncing ellmer: A package for interacting with Large Language Models in R\nWinners of the Closeread Prize – Data-Driven Scrollytelling with Quarto\nRapid RAG Prototyping: Building a Retrieval Augmented Generation Prototype with ellmer and DuckDB\nInsights\nAnnouncing ellmer: A package for interacting with Large Language Models in R\n\nLLM + Quarto: Turn One-Off Reports Into Automated Solutions\nShare your data apps and docs more seamlessly on Connect Cloud\nJanuary 2025 Top 40 New CRAN Packages\nQ1 2025 tidymodels digest\n\nUnderstand geom_bar and its statistical transformations\nAnalyzing targeted locus amplification (TLA) data\nWinners of the Closeread Prize – Data-Driven Scrollytelling with Quarto\n\nR in the Browser: Announcing Our WebAssembly Distribution\nR in the Real World\nPharmaverse Council Member updates\nR Submissions Working Group: Pilot 5 Launch and more!\nR in Organizations\nWorking with Clinical Trial Data? There’s a Pharmaverse Package for That\nResources\nCRANhaven - A repository for recently archived CRAN packages\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{httpgd} 2.0.3: A ‘HTTP’ Server Graphics Device\n{awdb} 0.1.1: Query the USDA NWCC Air and Water Database REST API\n{cnd} 0.1.0: Create and Register Conditions\n{EpiSimR} 1.1: A ‘Shiny’ App to Simulate the Dynamics of Epidemic and Endemic Diseases Spread\n{xdvir} 0.1-2: Render ‘LaTeX’ in Plots\n‘shiny’\n{crane} 0.1.0: Supplements the ‘gtsummary’ Package for Pharmaceutical Reporting\nUpdated Packages\n🔍 Search on R-universe 🔍\n{cards} 0.5.1: Analysis Results Data - diffify\n{pander} 0.6.6: An R ‘Pandoc’ Writer - diffify\n{jobqueue} 1.5.1: Run Interruptible Code Asynchronously - diffify\n{xml2} 1.3.7: Parse XML - diffify\n{teal.modules.general} 0.4.0: General Modules for ‘teal’ Applications - diffify\n{teal.modules.clinical} 0.10.0: ‘teal’ Modules for Standard Clinical Outputs - diffify\n{rayrender} 0.38.10: Build and Raytrace 3D Scenes - diffify\n{r2rtf} 1.1.3: Easily Create Production-Ready Rich Text Format (RTF) Tables and\nFigures - diffify\n{odbc} 1.6.0: Connect to ODBC Compatible Databases (using the DBI Interface) - diffify\n{diseasystore} 0.3.1: Feature Stores for the ‘diseasy’ Framework - diffify\n{CNID} 2.0.2: Get Basic Information from Chinese ID Number - diffify\n{eq5d} 0.15.7: Methods for Analysing ‘EQ-5D’ Data and Calculating ‘EQ-5D’ Index\nScores - diffify\n{splines2} 0.5.4: Regression Spline Functions and Classes - diffify\n{pmlbr} 0.3.0: Interface to the Penn Machine Learning Benchmarks Data\nRepository - diffify\n{healthdb} 0.4.0: Working with Healthcare Databases - diffify\n{censobr} 0.4.1: Download Data from Brazil’s Population Census - diffify\n{xslt} 1.5.1: Extensible Style-Sheet Language Transformations - diffify\n{readxl} 1.4.4: Read Excel Files - diffify\n{duckplyr} 1.0.1: A ‘DuckDB’-Backed Version of ‘dplyr’ - diffify\n{Rfast} 2.1.5: A Collection of Efficient and Extremely Fast R Functions - diffify\n{litedown} 0.6: A Lightweight Version of R Markdown - diffify\n{gtreg} 0.4.1: Regulatory Tables for Clinical Research - diffify\n{aplot} 0.2.5: Decorate a ‘ggplot’ with Associated Information - diffify\n{sasr} 0.1.4: ‘SAS’ Interface - diffify\n{tinytex} 0.56: Helper Functions to Install and Maintain TeX Live, and Compile LaTeX Documents - diffify\n{QuickJSR} 1.6.0: Interface for the ‘QuickJS’ Lightweight ‘JavaScript’ Engine - diffify\n{PatientProfiles} 1.3.0: Identify Characteristics of Patients in the OMOP Common Data Model - diffify\n{reproducibleRchunks} 1.0.3: Automated Reproducibility Checks for R Markdown Documents - diffify\n{simer} 1.0.0: Data Simulation for Life Science and Breeding - diffify\n{summarytools} 1.1.1: Tools to Quickly and Neatly Summarize Data - diffify\n{flexlsx} 0.3.4: Exporting ‘flextable’ to ‘xlsx’ Files - diffify\n{zippeR} 0.1.1: Working with United States ZIP Code and ZIP Code Tabulation Area\nData - diffify\n{and} 0.1.6: Construct Natural-Language Lists with Internationalization - diffify\n{dittoViz} 1.0.3: User Friendly Data Visualization - diffify\n{brickset} 2025.0.0: Interface with the Brickset API for Getting Data About LEGO Sets - diffify\n{khroma} 1.16.0: Colour Schemes for Scientific Data Visualization - diffify\n{arkhe} 1.10.0: Tools for Cleaning Rectangular Data - diffify\n{akc} 0.9.9.1: Automatic Knowledge Classification - diffify\n{watcher} 0.1.2: Watch the File System for Changes - diffify\n{RPostgres} 1.4.8: C++ Interface to PostgreSQL - diffify\n{networktools} 1.6.0: Tools for Identifying Important Nodes in Networks - diffify\n{R.utils} 2.13.0: Various Programming Utilities - diffify\n{reticulate} 1.41.0: Interface to ‘Python’ - diffify\n{ggnewscale} 0.5.1: Multiple Fill and Colour Scales in ‘ggplot2’ - diffify\n{teal} 0.16.0: Exploratory Web Apps for Analyzing Clinical Trials Data - diffify\n{simDAG} 0.2.2: Simulate Data from a DAG and Associated Node Information - diffify\n{planr} 0.5.1: Tools for Supply Chain Management, Demand and Supply Planning - diffify\n{plotscaper} 0.2.8: Explore Your Data with Interactive Figures - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nR-Ladies Rome (English) - Interactive R, Python, and Shiny in the Browser with Quarto and Shinylive\nMaster Data Extraction - Turn Texts into Tidy Data with R & {ellmer}\nCompany-branded reports, apps, and dashboards made easier with brand.yml & Posit\nTutorials\nChecking your R packages and practicals on a schedule using GitHub Actions\n3MW (Authentication for Quarto Projects on Azure)\nDependency-light hex stickers with {gex}\nWeb app with DeepSeek R1 and Hugging Face API for chatting\nHow to Create Tables in R (With Examples) – A Comprehensive Guide Using Base R, dplyr, and data.table\nRapid RAG Prototyping: Building a Retrieval Augmented Generation Prototype with ellmer and DuckDB\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nFrame-by-Frame Modeling and Validation of NFL geospatial data using gganimate in R workshop\nIntroduction to Empirical Macroeconomics with R workshop\nRix: reproducible data science environments with Nix\nGrants & Funding\n2025 ISC Grant Program\nConnect\nJoin the Data Science Learning Community\nrtistry\n  \n \nPost by @nrennie@fosstodon.org\n View on Mastodon\n  \n\n\nQuotes of the Week\n#TodayinHistory #dataviz #Onthisday #OTD 📊\n🎂Happy #Rstats birthday!\nR 1.0.0 was first released on February 29, 2000.\nDoes that make it 24 or just 6 leap-years old? pic.twitter.com/KpZordLXAt\n— Michael Friendly @datavisfriendly.bsky.social (@datavisFriendly) March 1, 2025",
      "link": "https://rweekly.org//2025-W10.html",
      "pubDate": "Mon, 03 Mar 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/241/",
      "title": "The Real Python Podcast – Episode #241: Deciphering Python Jargon & Compiling Python 1.0",
      "description": "How do you learn the terms commonly used when speaking about Python? How is the jargon similar to other programming languages? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/241/",
      "pubDate": "2025-02-28T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-bytes/",
      "title": "Quiz: Python Bytes",
      "description": "In this quiz, you’ll test your understanding of Bytes Objects: Handling Binary Data in Python. By working through this quiz, you’ll revisit the key concepts related to this low-level data type.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-bytes/",
      "pubDate": "2025-02-28T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-while-loop/",
      "title": "Quiz: Python while Loops: Repeating Tasks Conditionally",
      "description": "In this quiz, you’ll test your understanding of Python while Loops: Repeating Tasks Conditionally. \nThe while keyword is used to initiate a loop that repeats a block of code while a condition is true. A while loop works by evaluating a condition at the start of each iteration. If the condition is true, then the loop executes. Otherwise, it terminates.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-while-loop/",
      "pubDate": "2025-02-28T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "http://www.ruanyifeng.com/blog/2025/02/weekly-issue-339.html",
      "title": "科技爱好者周刊（第 339 期）：代币是什么",
      "description": "这里记录每周值得分享的科技内容，周五发布。\n本杂志开源，欢迎投稿。另有《谁在招人》服务，发布程序员招聘信息。合作请邮件联系（yifeng.ruan@gmail.com）。\n封面图\n\n西安咸阳国际机场，新开放的 T5 航站楼里面，有一座博物馆，展示机场建设工地发现的文物。（via）\n代币是什么\n现在，媒体经常出现一个词\"代币\"（token），今天就来谈谈这是什么？\n\n首先声明，代币属于加密货币，有交易市场。我完全不想碰这一块，只想谈谈它们的原理。\n大家读了就能理解，它们为什么可以发行，可以交易。作为技术实验，这是很有意思的。\n我想谈这个题目，是因为前些日子读到一篇文章《去金融化与超金融化》，让我想通了代币与金融的关系。\n\n加密货币的起源，与纸币的弊端有关。纸币（比如美元）都会越发越多，形成通货膨胀，长期中贬值，购买力不断下降。\n人们因此不愿意持有现金，而是想法设法保值增值，从而形成\"金融\"活动，比如储蓄、投资、购买房产等等。\n所以，金融就是现金的对立面，货币越发越多，人们越不愿意持有现金，导致金融活动也越来越多。\n\n比特币的最初动机，是创造一种无法增发的货币机制。由于比特币总额是确定的，所以如果把它当作货币，就肯定不会发生通货膨胀。\n因此，人们会愿意持有比特币现金，而不是拿它去消费和投资。由此推论，比特币的世界应该没有太多的金融活动，它可以\"去金融化\"，减少金融投资的规模。\n但是，没有想到，后来出现了\"以太坊\"。\n\n以太坊跟比特币一样，建立在区块链之上，区块链可以看作是一个写入后无法修改的公开账本。此外，它还有一个比特币没有的特点，就是\"智能合约\"。它允许用户写自己的程序，放上区块链，让区块链去执行。\n这意味着，用户可以基于\"智能合约\"，在区块链上发行自己的代币。比如，你在区块链上写入一条记录（可以是任意内容），然后用智能合约规定，这条记录的所有权分成10000份（即关联10000条子记录），每一份都可以单独交易。\n这样一来，你就创造了一种自己的代币，总额为10000份。你对外出售这些代币，只要有足够的人愿意买，就会形成这种币的交易市场。\n这里的关键是，你写入区块链的原始记录，可以是\"任意内容\"。这意味着，任意东西都可以代币化，比如一条笔记、一段录音、甚至一件衣服，都可以发行成代币，只要保证写入区块链的内容能够代表原始物品即可。\n根据这个原理，就出现了各种奇奇怪怪的代币发行，比如狗币、猫币、月亮币、火星币、大蒜币等等。它们统称为 meme coin（中文译为迷因币或模因币）。\n代币可以是同质的（每一份可以互相替代），也可以是非同质的，即每个代币都是独一无二，相当于有编号证书。后者称为\"非同质代币\"，英文为 NFT（Non-fungible token），曾经一度非常火爆。\n\n2022年，一只称为\"无聊猿\"的猿猴头像，它的一份 NFT 最高价格到过147个以太坊（约42万美元）。本质上，你花了这么多钱，买到的只是区块链上你名下的一条记录，你有权再把这条记录转给其他人，仅此而已。\n由于任何东西都能变成可以交易的代币，因此代币创造了一种\"超金融化\"，即任何东西都变成金融化的可交易资产。\n所以，事情就有点讽刺了，加密货币发明的原意是\"去金融化\"，诞生一种有稳定购买力的货币，现在却变成了\"超金融化\"，无数原本不可交易的东西，变成了金融资产，从来没有稳定的价格。\nGeeLark 云手机\n国内很多个人和企业，现在都在做跨境电商，需要工具来管理境外的社交媒体平台。\n今天，就介绍一款这样的工具 GeeLark。\n\n它的定位是\"跨境营销一站式运营平台\"，服务中国品牌出海。\n功能上，它是云手机，让你在电脑上，通过云端操作各种手机 App，比如 TikTok、Instagram、YouTube、Facebook、WhatsApp 等（上图）。\n大部分商家，还在用实体手机管理 TikTok 账号，如果有几个账号，就需要使用多部手机，非常麻烦。云手机就是解决这个问题，\n（1）每个云手机是一个单独隔离的环境，没有任何学习成本，跟操作实体手机一样。系统版本的选择非常丰富，从 Andorid 10～Android 14 供选择。\n（2）账号管理方便，一部电脑管理全部的手机和账号。\n（3）常规操作全部自动化：自动批量发视频、发图集、修改文案、AI 养号、互动评论等。\n（4）分组授权。团队成员可以设置单独的访问权限，可以分组管理，成员可以不知道媒体平台的账号密码，确保账号安全。\n（5）TikTok 账号管理功能强大，可以一站式创建、管理和自动化运营账号，支持直播。\n（6）提供 API。用户自己编写脚本，通过 API 实现对云手机的操作，执行自动化任务，还可以开启 ADB 远程控制云手机。\n（7）GeeLark AI。最新版本上线了 AI 功能（下图），接入了 DeepSeek 模型。云手机可以在 AI 操作下，像真人一样使用 TikTok，浏览特定关键词或博主的视频，从而让系统为账号打上合适的标签。\n发布视频或图集时，AI 可以帮你写文案，还可以生成不同版本的视频，帮助测试分发效果。\n\nGeeLark 免费试用。新用户注册后，可以使用两部云手机，免费时长总共为60分钟。如需要更长的时间，或者更多的云手机，则需要付费。\n感兴趣的朋友，不妨现在访问官网 geelark.cn 下载试用，无需绑定信用卡。新手入门操作可以看这篇文章。\n[活动] AI FOR CODE 创意挑战赛\n为了推广 AI 编程，探索技术创新，全国\"AI FOR CODE 创意挑战赛\"即将举行。\n\n本次大赛为了鼓励更多同学参与，降低参加门槛，除了常规的\"应用实现\"赛道，还特别增设\"创意征集\"赛道。\n只要你有想法，哪怕没有时间完成落地开发，都可以参加。你只要有创意，为参赛队伍提供灵感，让 AI 去实现，即使无法参与亲自开发，也有机会让自己的灵感变为现实，从而参与评奖。\n大赛的启动仪式将在下周一（3月3日）晚上18点举行，详细介绍赛制，以及本次大赛的指定的 AI 编程环境 Trae。\n直播期间将有大量抽奖。另外，预约直播后分享海报，邀请他人参加，也有丰厚奖品。\n关注 AI 编程的同学，不要错过本次大赛。现在点击这里，或者扫描上面海报的二维码，预约参加直播，了解详情。\n科技动态\n1、月球机房\n本周，美国通过猎鹰9号火箭，发送了一个月球登陆器。\n登陆器将一个迷你服务器（下图）送到了月球表面，它重约1公斤，带有 8TB 硬盘。\n\n这个服务器是为了测试，月球机房这个想法是否可行。\n相比地球，月球没有自然灾害，没有风和雨，也没有水份和氧气，更没有战争和人为破坏。事实上，只要不遇到陨石撞击，月球地表几万年也不会改变。\n于是，就有人提出，能不能把机房放到月球上，数据就不会损坏了，可以长期保存。\n本次实验就是为了验证，通过太阳能供电，服务器能不能在月球上正常工作，经受极端的高温和低温。\n2、飞行汽车\n马斯克投资的飞行汽车，上周进行了原型试飞。\n\n这辆车的奇特之处，在于它的外形就是普通的汽车，没有外露的螺旋桨，难道藏在车体内部。\n\n它也飞不高，目击者说离地高度不超过5米，然后保持这个高度，向前飞了一段距离，就落地了。\n\n厂商说，它的使用场景之一是，如果前车抛锚堵塞道路，它就可以飞过前车。另一个场景是飞过水面。\n该车售价30万美元（约人民币217万），预计年底可以交付，可能成为世界第一辆上市的飞行汽车，只是不知道多少人会买。\n3、天基太阳能\n太阳能发电正在快速发展，但是它有一个重大缺点，就是无法全天发电，每天最多工作12小时，还不能有阴雨天气。\n早就有人设想\"天基太阳能\"，为什么不把光伏板放到太空呢？全天24小时发电，再把电力传回地球。\n\n一家美国创业公司，就打算开展这项业务，计划于2026年发射第一颗实验卫星。\n它的设计类似于\"星链\"：多颗光伏卫星排列成一条直线，将太阳光转换为电能，再通过红外激光向地面传送。\n地面设有多个接收站，每个站接收头顶卫星发来的能量，当前卫星飞过以后，再接收下一颗，就跟卫星上网差不多的模式。\n4、其他\n（1）湖南省严禁使用 AI 为病人开处方。\n（2）埃及新发现一个法老墓，入口藏在山谷底部，很不起眼（下图）。上一次发现法老墓，还是1922年的图坦卡蒙墓，已经相隔百年了。\n\n文章\n1、本地部署 DeepSeek 模型保姆级教程（中文）\n\n网友的教程，家用 PC 怎么跑 DeepSeek，当然跑不了满血版，只能跑小参数的版本。（@lovefc 投稿）\n2、从头构建大模型（英文）\n\n作者按照教材（上图），从零开始做一个大模型，本文简要解释了大模型原理。\n3、Svelte 5 不是 JavaScript（英文）\n\nSvelte 是一个流行的前端框架，去年发了5.0版。作者使用后感觉，它的抽象层次太高，已经不像 JavaScript 语言，而像一种新的语言。\n4、面试伦敦谷歌（中文）\n作者面试伦敦谷歌，最后被拒，全程的记录。（@DoctorLai 投稿）\n5、Proxmox 虚拟机的10个项目（英文） \n\nProxmox 是现在很流行的虚拟机软件，本文介绍它在家庭实验室的10种用途。\n6、我如何用手势模拟鼠标（英文）\n\n一篇教程，作者用谷歌的 MediaPipe 和 OpenCV，将摄像头捕获的手势动作，转化为鼠标操作，也就是不需要鼠标了。\n7、如何制作网页的毛玻璃效果（英文）\n\n本文介绍如何制作一个网页的毛玻璃透明区块。\n8、CSS 局部作用域 @scope（英文）\n\n本文介绍 CSS 局部作用域语法 @scope，它定义的规则只对当前区域生效，Chrome 浏览器已经支持。\n工具\n1、digiKam\n\n开源的本地照片管理软件。\n2、Web Awesome\n\n一个 Web Component 组件库。\n3、WhiteSur\n\n一个类似 Mac 的 Linux GTK 桌面主题。\n4、mdq\n一个从 Markdown 文件提取信息的命令行工具，类似 处理 Markdown 文件的 jq 命令。\n5、Electro\n\n一个命令行的图片浏览器，Rust 语言写的，速度快。\n6、链图\n\n一个开源的在线工具，将网址转成一张包含二维码、网站标题和简介的图片。（@wind-liang 投稿）\n7、MinMail.app\n\n免费的临时邮箱服务。（@withoctober 投稿）\n8、MoePush\n\n基于 NextJS + Cloudflare 的消息推送服务, 支持钉钉、企业微信、Telegram 等多种渠道。（@beilunyang 投稿）\n9、Ant Design X Vue\n\nAnt Design X 的 Vue 移植，专门用来做 AI 的前端界面。（@wzc520pyfm 投稿）\n10、New SVG Viewer\n\n开源的 SVG 预览网站。（@liujuntao123 投稿）\n11、Statusnook\n\n一个需要自己部署的服务，用来架设一个简单的网站，检查指定网址是否在线。\n12、llm-commit\n使用大模型生成 Git 仓库的提交信息，用法简单，基于 Python 工具 llm。\n资源\n1、中日文翻译\n\n该网站将中文翻译为日语，并显示假名和罗马发音。（@zhanghuid 投稿）\n2、3D 陶器动手做\n\n谷歌的网页小游戏，在网页上做一个 3D 陶器，挺有趣的。\n3、苏特罗塔 3D 模型\n\n苏特罗塔是旧金山的电视塔，高298米。作者用几千张无人机的照片，合成了它的 3D 模型，效果极佳。网站上有方法介绍。（@YuJianrong 投稿）\n4、椭圆曲线加密（Elliptic Curve Cryptography）\n\n这个英文仓库有椭圆曲线加密的简单介绍。\n图片\n1、分形台钳\n台钳是一种常用的金属加工工具，用来固定零件。\n常见的台钳都是下面的样子，只适合固定那些固定形状的零件。\n\n但是，还有一种分形台钳，利用多个可调整角度的固定块，去固定不规则形状的零件。\n\n\n\n\n\n文摘\n1、如果没有人读博客，为什么要写呢？\n让我们坦率一点吧，你写了一篇博客，根本就没有人读。\n至少，没有你想要的那么多读者。你把自己的想法倾注在文章，精心构思每个句子，选择合适的图片----然后什么反响也没有，没有点赞，没有分享，没有互动。\n那么写博客的意义何在？\n首先，关于写博客，有两个误解。一个是只要我写出了好文章，读者自然就会来。不，他们不会来，网上有几十亿篇博客，好像浩浩荡荡的飓风一样，你的博客只是风里的一片叶子，谁会注意呢。\n另一个误解是如果没有人阅读，写作就是浪费时间。\n博客有自己隐藏的价值。你写博客不是为了别人的掌声，而是因为你自己的需要。\n博客使人头脑清晰。它帮你理清思绪，锐化视角。当你写作时，你会思考得更好。当你思考得更好时，你会做出更好的成果。\n博客的目标读者，其实不是互联网人群，而是未来的你，你的文章会让你看到自己思想的演变。\n此外，未来也许有一天，某个真正需要你文章的人，会找到它。一篇有深度的文章比一篇病毒式传播的文章，影响力更持久。\n写博客有点像街头摄影。你手拿相机，漫步在城市中。你看到一个场景----一个充满光、影、人性的瞬间，就拍下了它。\n没人关心你拍到了什么。但这不是你摄影的原因，你摄影是因为你看到了一些东西。\n写博客也一样。你写博客是因为你在思考，因为你在观察，因为你希望把它放在某个地方。\n如果有人读了，那就更好了。如果没有，工作还是完成了。\n这才是真正的重点。\n言论\n1、\n有些大型科技公司，只招募中高级程序员，不招募初级程序员。我认为，这样做不对。\n因为现代企业是知识型企业，初级程序员会迫使团队去教导、训练、合作，从而发现知识、创造知识。\n-- 《你的公司需要初级程序员》\n2、\n我们公司的高管（没有一个是工程师）完全相信\"AI 取代开发者\"的炒作。我们的 CTO 曾说过：\"使用 GPT 编写代码，这是一天内就能完成的任务，应该不会超过一天。\"\n他们真的相信 AI 可以在一夜之间取代熟练的程序员。同时，他们从未使用过 GPT 自己编写生产代码，他们只是阅读了公关宣传并认为 AI 很神奇。\n-- 《应对破碎的开发文化》\n3、\n最终，我希望机器人能做我不想做的事情，比如洗碗、洗衣服。我不希望它们代替我播放音乐、编写代码、写字。\n-- 《我能合乎道德地使用大模型吗》\n4、\n日本铁路公司拥有车站附近的大量土地，为了提高客运量，会在车站旁做很多建设，吸引客流，比如开设酒店。\n他们甚至会开设剧团，日本著名的宝冢歌舞团就是阪急铁路公司创立的，为了吸引人们乘坐火车去看演出。\n-- Hacker News 读者\n5、\n人们首先解决生存需要，然后寻求实用性，接着追求舒适性，后来又享受快乐，从而变得荒唐奢侈，最终变得疯狂并浪费物质。\n-- 维柯，意大利哲学家\n往年回顾\n所有代码都是技术债（#292）\n一次尴尬的服务器被黑（#242）\n最大的机会来自新技术（#192）\n2020年才是21世纪元年（#142）\n（完）\n文档信息\n版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\n发表日期： 2025年2月28日",
      "link": "http://www.ruanyifeng.com/blog/2025/02/weekly-issue-339.html",
      "pubDate": "2025-02-28T00:21:57.000Z",
      "source": "阮一峰的网络日志",
      "sourceUrl": "http://www.ruanyifeng.com/blog",
      "category": "技术博客"
    },
    {
      "id": "https://realpython.com/polars-lazyframe/",
      "title": "How to Work With Polars LazyFrames",
      "description": "A Polars LazyFrame provides an efficient way to handle large datasets through lazy evaluation. Unlike traditional DataFrames, LazyFrames don’t contain data but instead store a set of instructions known as a query plan. Query plans perform operations like predicate and projection pushdown, ensuring only necessary rows and columns are processed. LazyFrames also support the parallel execution of query plans, further enhancing performance.\nBy the end of this tutorial, you’ll understand that:\nA Polars LazyFrame allows efficient data processing by storing query instructions instead of data.\nLazy evaluation in LazyFrames optimizes query plans before data materialization.\nPredicate and projection pushdown minimize unnecessary data processing in LazyFrames.\nYou create a LazyFrame using functions like scan_parquet() or scan_csv().\nSwitching between lazy and eager modes is sometimes necessary for certain operations.\nDive into this tutorial to discover how LazyFrames can transform your data processing tasks, providing both efficiency and flexibility for managing large datasets.\nBefore you start your learning journey, you should already be comfortable with the basics of working with DataFrames. This could be from any previous Polars experience you have, or from using any other DataFrame library, such as pandas.\nIn addition, you may consider using Jupyter Notebook as you work through many of the examples in this tutorial. Alternatively, JupyterLab will enhance your notebook experience, but any Python environment you’re comfortable with will be fine.\nTo get started, you’ll need some data. For the main part of this tutorial, you’ll use the rides.parquet file included in the downloadable materials. You can download this by clicking the link below:\nGet Your Code: Click here to download the free sample code  that shows you how work with Polars LazyFrames.\nThe rides.parquet file is a doctored version of the taxi ride data freely available on the New York City Taxi and Limousine Commission (TLC) website. The dataset contains edited information about New York taxi cab rides from July 2024. Before you go any further, you’ll need to download the file and place it in your project folder.\nNote: The Parquet format is a format for storing large volumes of data efficiently. Parquet files use compression to minimize storage space. They also maintain metadata about each column allowing columns to be searched efficiently, often in parallel, and without the need to read the entire file. Because this metadata is useful to LazyFrames when they need to investigate a file’s content, Parquet is an excellent format for LazyFrames to use.\nThe table below shows details of the rides.parquet file’s columns, along with their Polars data types. The text in parentheses beside each data type shows how these types are annotated in a DataFrame header when Polars displays its results:\nColumn Name\nPolars Data Type\nDescription\n\n\n\n\npick_up\nString (str)\nPick-up borough\n\n\ndrop_off\nString (str)\nDrop-off borough\n\n\npassengers\nInt32 (i32)\nNumber of passengers\n\n\ndistance\nInt32 (i32)\nTrip distance (miles)\n\n\nfare\nInt32 (i32)\nTotal fare ($)\n\n\n\n\nAs a starting point, you’ll create a LazyFrame and take a first look at its data. To use Polars, you first need to install the Polars library into your Python environment. You might also like to install Matplotlib as well.  You’ll use this to view the inner workings of a LazyFrame graphically later on. To install both from a command prompt you use:\nWindows\n  \nLinux + macOS\n  \nIn a Windows environment use:\nWindows PowerShell\n    \n    \n\n      \n    \nPS> python -m pip install polars matplotlib\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nBoth libraries will install.\nIn a Linux or macOS environment use:\nShell\n    \n    \n\n      \n    \n$ python -m pip install polars matplotlib\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nBoth libraries will install.\nIn a Jupyter Notebook, the command is !python -m pip install polars matplotlib.\nYou can then begin to use the Polars library and all of its cool features. Here’s what your data looks like, and here’s how to create your first LazyFrame:\nPython\n    \n    \n\n      \n    \n>>> import polars as pl\n\n>>> rides = pl.scan_parquet(\"rides.parquet\")\n\n>>> rides.collect()\nshape: (3_076_903, 5)\n┌───────────┬───────────┬────────────┬──────────┬──────┐\n│ pick_up   ┆ drop_off  ┆ passengers ┆ distance ┆ fare │\n│ ---       ┆ ---       ┆ ---        ┆ ---      ┆ ---  │\n│ str       ┆ str       ┆ i32        ┆ i32      ┆ i32  │\n╞═══════════╪═══════════╪════════════╪══════════╪══════╡\n│ Manhattan ┆ Manhattan ┆ 1          ┆ 3        ┆ 24   │\n│ Queens    ┆ Manhattan ┆ 1          ┆ 19       ┆ 75   │\n│ Manhattan ┆ Queens    ┆ 1          ┆ 1        ┆ 16   │\n│ Queens    ┆ Manhattan ┆ 0          ┆ 9        ┆ 60   │\n│ Queens    ┆ Manhattan ┆ 1          ┆ 17       ┆ 90   │\n│ …         ┆ …         ┆ …          ┆ …        ┆ …    │\n│ Manhattan ┆ Manhattan ┆ null       ┆ 5        ┆ 27   │\n│ Manhattan ┆ Manhattan ┆ null       ┆ 4        ┆ 26   │\n│ Queens    ┆ Brooklyn  ┆ null       ┆ 4        ┆ 26   │\n│ Manhattan ┆ Manhattan ┆ null       ┆ 3        ┆ 24   │\n│ Manhattan ┆ Manhattan ┆ null       ┆ 8        ┆ 35   │\n└───────────┴───────────┴────────────┴──────────┴──────┘\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nFirst of all, you import the Polars library using the conventional pl alias. You then use the scan_parquet() function to read rides.parquet. This makes your LazyFrame aware of the data file’s content. A LazyFrame doesn’t contain data but instead contains a set of instructions detailing what processing is to be carried out. To access the data, you need to materialize your LazyFrame by calling its .collect() method. This creates a DataFrame and reads the data.\nIn this example, .collect() shows there are 3,076,903 rows and five columns of data, as indicated by its shape.\nUsing LazyFrames may seem like a strange way of working given that you have to materialize them into DataFrames to view the data. You might wonder why not just stick with DataFrames instead. As you’ll see later, despite their name, LazyFrames offer an extremely efficient way to work with data. With their lazy evaluation capabilities, LazyFrames should be your preferred way to work with data in Polars whenever possible.\nNext, you’ll learn the main ways you can create LazyFrames.\n Take the Quiz: Test your knowledge with our interactive “How to Work With Polars LazyFrames” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nHow to Work With Polars LazyFrames \n      \nThis quiz will challenge your knowledge of working with Polars LazyFrames. You won't find all the answers in the tutorial, so you'll need to do some extra investigating. By finding all the answers, you're sure to learn some interesting things along the way.\nHow to Create a Polars LazyFrame\nYou can create LazyFrames in three main ways:\nRead the full article at https://realpython.com/polars-lazyframe/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/polars-lazyframe/",
      "pubDate": "2025-02-26T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/polars-lazyframe/",
      "title": "Quiz: How to Work With Polars LazyFrames",
      "description": "In this quiz, you’ll test your understanding of the techniques covered in\nHow to Work With Polars LazyFrames.\nBy working through the questions, you’ll review your understanding of why LazyFrames are an efficient and preferred way of working in Polars.\nYou’ll need to do some research outside of the tutorial to answer all the questions, so let this challenge take you on a learning journey.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/polars-lazyframe/",
      "pubDate": "2025-02-26T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/single-double-underscore-naming-conventions/",
      "title": "Single and Double Underscore Naming Conventions in Python",
      "description": "Python has a few important naming conventions that are based on using either a single or double underscore character (_). These conventions allow you to differentiate between public and non-public names in APIs, write safe classes for subclassing purposes, avoid name clashes, and more.\nFollowing and respecting these conventions allows you to write code that looks Pythonic and consistent in the eyes of other Python developers. This skill is especially useful when you’re writing code that’s intended for other developers to work with.\nIn this video course, you’ll:\nLearn about Python naming conventions that rely on using underscores (_)\nDifferentiate public and non-public names by using a single leading underscore\nUse double leading underscores to leverage name mangling in Python classes\nExplore other common uses of underscores in Python names\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/single-double-underscore-naming-conventions/",
      "pubDate": "2025-02-25T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-sort/",
      "title": "How to Use sorted() and .sort() in Python",
      "description": "Sorting in Python is a fundamental task that you can accomplish using sorted() and .sort(). The sorted() function returns a new sorted list from the elements of any iterable, without modifying the original iterable. On the other hand, the .sort() method modifies a list in place and doesn’t return a value. Both methods support customization through optional keyword arguments like key and reverse.\nBy the end of this tutorial, you’ll understand that:\nYou can sort any iterable with the sorted() function.\nThe sorted() function returns a new sorted list.\nThe .sort() method sorts the list in place.\nYou sort items in descending order by setting the reverse argument to True.\nThe key argument accepts a function to customize the sort order.\nIn this tutorial, you’ll learn how to sort various types of data in different data structures, customize the order, and work with two different ways of sorting in Python. You’ll need a basic understanding of lists and tuples as well as sets. These are the data structures you’ll be using to perform some basic operations.\nGet Your Cheat Sheet: Click here to download a free cheat sheet that summarizes how to use sorted() and .sort() in Python.\n Take the Quiz: Test your knowledge with our interactive “How to Use sorted() and .sort() in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nHow to Use sorted() and .sort() in Python \n      \nIn this quiz, you'll test your understanding of sorting in Python using sorted() and .sort(). You'll revisit how to sort various types of data in different data structures, customize the order, and work with two different ways of sorting in Python.\nOrdering Values With sorted()\nIn Python, you can sort iterables with the sorted() built-in function. To get started, you’ll work with iterables that contain only one data type.\nSorting Numbers\nYou can use sorted() to sort a list in Python. In this example, a list of integers is defined, and then sorted() is called with the numbers variable as the argument:\nPython\n    \n    \n\n      \n    \n>>> numbers = [6, 9, 3, 1]\n>>> sorted(numbers)\n[1, 3, 6, 9]\n>>> numbers\n[6, 9, 3, 1]\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nThe output from this code is a new, sorted list. When the original variable is printed, the initial values are unchanged.\nThis example shows four important characteristics of sorted(): \nYou don’t have to define the sorted() function. It’s a built-in function that’s available in any standard installation of Python.\nYou’re ordering the values in numbers from smallest to largest when you call sorted(numbers). When you pass no additional arguments or parameters,  sorted() orders the values in numbers in ascending order.\nYou don’t change the original numbers variable because sorted() provides sorted output and doesn’t update the original value in place. \nYou get an ordered list as a return value when you call sorted(). \nThese points mean that sorted() can be used on a list, and the output can immediately be assigned to a variable:  \nPython\n    \n    \n\n      \n    \n>>> numbers = [6, 9, 3, 1]\n>>> numbers_sorted = sorted(numbers)\n>>> numbers_sorted\n[1, 3, 6, 9]\n>>> numbers\n[6, 9, 3, 1]\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, a new variable called numbers_sorted now stores the output of the sorted() function.\nYou can confirm all of these observations by calling help() on sorted():\nPython\n    \n    \n\n      \n    \n>>> help(sorted)\nHelp on built-in function sorted in module builtins:\n\nsorted(iterable, /, *, key=None, reverse=False)\n    Return a new list containing all items from the iterable in ascending order.\n\n    A custom key function can be supplied to customize the sort order, and the\n    reverse flag can be set to request the result in descending order.\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nYou’ll cover the optional arguments key and reverse later in the tutorial.\nThe first parameter of sorted() is an iterable. That means that you can use sorted() on tuples and sets very similarly:\nPython\n    \n    \n\n      \n    \n>>> numbers_tuple = (6, 9, 3, 1)\n>>> sorted(numbers_tuple)\n[1, 3, 6, 9]\n\n>>> numbers_set = {5, 10, 1, 0}\n>>> sorted(numbers_set)\n[0, 1, 5, 10]\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nNotice how even though the input was a set and a tuple, the output is a list because sorted() returns a new list by definition. The returned object can be cast to a new type if it needs to match the input type. Be careful if attempting to cast the resulting list back to a set, as a set by definition is unordered:\nPython\n    \n    \n\n      \n    \n>>> numbers_tuple = (6, 9, 3, 1)\n>>> numbers_set = {5, 10, 1, 0}\n>>> numbers_tuple_sorted = sorted(numbers_tuple)\n>>> numbers_set_sorted = sorted(numbers_set)\n>>> numbers_tuple_sorted\n[1, 3, 6, 9]\n>>> numbers_set_sorted\n[0, 1, 5, 10]\n>>> tuple(numbers_tuple_sorted)\n(1, 3, 6, 9)\n>>> set(numbers_set_sorted)\n{0, 1, 10, 5}\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nWhen you cast the numbers_set_sorted value to a set, it’s unordered, as expected. If you’re curious about how sets work in Python, then you can check out the tutorial Sets in Python.\nRead the full article at https://realpython.com/python-sort/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-sort/",
      "pubDate": "2025-02-24T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-sort/",
      "title": "Quiz: How to Use sorted() and .sort() in Python",
      "description": "In this quiz, you’ll test your understanding of\nsorting in Python.\nBy working through this quiz, you’ll revisit how to sort various types of data in different data structures, customize the order, and work with two different ways of sorting in Python.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-sort/",
      "pubDate": "2025-02-24T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W09.html",
      "title": "R Weekly 2025-W09 nhyris, tisthemachinelearner, Forks",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Colin Fay, with help from the R Weekly team members and contributors.\nHighlight\nnhyris - The minimal framework for transform R shiny application into standalone\ntisthemachinelearner: A Lightweight interface to scikit-learn with 2 classes, Classifier and Regressor (in Python and R)\nThe Dynamic Relationship of Forks with their Upstream Repository\nInsights\nWhy we forked nixpkgs\nRcpp now used by 3000 CRAN packages!\nThe Dynamic Relationship of Forks with their Upstream Repository\nR in Academia\nWin a Battle in the Game of Risk\nResources\nnhyris - The minimal framework for transform R shiny application into standalone\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{GitAI} 0.1.0: Extracts Knowledge from ‘Git’ Repositories\n{codelist} 0.1.0: Working with Code Lists\n{netknitr} 0.2.1: Knit Network Map for any Dataset\n{aftables} 1.0.2: Create Spreadsheet Publications Following Best Practice\n{musicXML} 1.0.1: Data Sonification using ‘musicXML’\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppDE 0.1.8 on CRAN: Maintenance\n{summarytools} 1.1.0: Tools to Quickly and Neatly Summarize Data - diffify\n{duckdb} 1.2.0: DBI Package for the DuckDB Database Management System - diffify\n{cpp11armadillo} 0.4.4: An ‘Armadillo’ Interface - diffify\n{parseLatex} 0.3.0: Parse ‘LaTeX’ Code - diffify\n{flint} 0.0.2: Fast Library for Number Theory - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nCollaborating Across Pharma: Open Source Highlights from the PHUSE US Connect 2024 Keynote\nTutorials\ntisthemachinelearner: A Lightweight interface to scikit-learn with 2 classes, Classifier and Regressor (in Python and R)\nBurn Notice\nHappy Valentine’s Day\nHow to Replace Values in Data Frame Based on Lookup Table in R\n3MW (Host Quarto Projects on Azure)\n5 Levels of Data Wrangling Every R User Must Master\nCreating a Finder Smart Folder of your RStudio Project files to enable super fast project launching\nCreating R, Python, Stata, and Julia tutorial worksheets (with and without solutions) using Quarto\nCreating effectively multi-engine Quarto documents using Quarto’s embed shortcode\nA First Look at TimeGPT using nixtlar\nHow to use a histogram as a legend in {ggplot2}\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nShiny in Production 2025: Call for Abstracts\nGovernment Advances in Statistical Programming (GASP) Conference 2025: Call for Abstracts\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nGrants & Funding\nDiscover posit::conf as an Opportunity Scholar\nConnect\nJoin the Data Science Learning Community",
      "link": "https://rweekly.org//2025-W09.html",
      "pubDate": "Mon, 24 Feb 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/240/",
      "title": "The Real Python Podcast – Episode #240: Telling Effective Stories With Your Python Visualizations",
      "description": "How do you make compelling visualizations that best convey the story of your data? What methods can you employ within popular Python tools to improve your plots and graphs? This week on the show, Matt Harrison returns to discuss his new book \"Effective Visualization: Exploiting Matplotlib & Pandas.\"\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/240/",
      "pubDate": "2025-02-21T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-pyproject-toml/",
      "title": "How to Manage Python Projects With pyproject.toml",
      "description": "The pyproject.toml file simplifies Python project configuration by unifying package setup, managing dependencies, and streamlining builds. In this tutorial, you’ll learn how it can improve your day-to-day Python setup by exploring its key use cases, like configuring your build system, installing packages locally, handling dependencies, and publishing to PyPI.\nBy the end of this tutorial, you’ll understand that:\npyproject.toml is a key component for defining a Python project’s build system, specifying requirements and the build backend.\nDependencies and optional dependencies can be managed directly within the pyproject.toml file or combined with the traditional requirements.txt.\nScripts for command-line execution are defined in the [project.scripts] section, allowing you to automate common tasks.\nDynamic metadata in pyproject.toml enables flexible project configuration, with attributes like version being resolved at build time.\nThe Python packaging ecosystem includes various tools that leverage pyproject.toml for project management, enhancing collaboration, flexibility, and configurability.\nTo get the most out of this tutorial, you should be familiar with the basics of Python. You should know how to import modules and install packages with pip. You should also be able to navigate the terminal and understand how to create virtual environments.\nThe pyproject.toml package configuration file is the relatively new (circa 2016) standard in the Python ecosystem, intended to unify package configuration. It’s also supported by many major tools for managing your Python projects. Some of the project management tools that support the pyproject.toml file are pip, Setuptools, Poetry, Flit, pip-tools, Hatch, PDM, and uv.\nThe pyproject.toml file is a configuration file written in the TOML syntax. For many Python project management needs, a minimal pyproject.toml file doesn’t have to contain a lot of information:\nTOML\n    pyproject.toml\n    \n[project]\nname = \"a-sample-project\"\nversion = \"1.0.0\"\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nDifferent tools have different requirements, but the name and version of your project are officially the only required fields in the [project] table. Typically, you’ll want to include more fields, but if you only want to include a minimal pyproject.toml file, then that’s all you’ll need to get started. Just include this file at the root of your project.\nTo understand more about why using a pyproject.toml file may be useful, you’ll explore a sample CLI application to show you how the pyproject.toml file fits into a standard project workflow.\nGet Your Code: Click here to download the free sample code  you’ll use to learn how to manage Python projects with pyproject.toml.\nSetting Up a Python Project With pyproject.toml\nThe example project you’ll work with in this tutorial is inspired by the classic cowsay program. The example project is called snakesay and—once installed—you can run it with the ssay command:\nShell\n    \n    \n\n      \n    \n$ ssay Hello, World!\n\n _______________\n( Hello, World! )\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n  \\\n   \\    ___\n    \\  (o o)\n        \\_/ \\\n         λ \\ \\\n           _\\ \\_\n          (_____)_\n         (________)=Oo°\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nAs you can see, the program takes a string argument and echoes it back with a bit of ASCII art.\nThe structure of the example project follows a popular pattern for Python projects:\nsnakesay-project/    ← The project root\n│\n├── snakesay/        ← The main module of this project\n│   ├── __init__.py\n│   ├── __main__.py  ← The entry point to snakesay\n│   └── snake.py     ← The core of the program\n│\n├── .gitignore\n├── LICENSE\n├── pyproject.toml   ← What this tutorial is about\n└── README.md\n\n\nThe directory snakesay-project is the root location of your project. The main package, where most of the code goes, is the snakesay directory.\nNote: A popular and often recommended project layout is the src layout:\nsnakesay-project/\n│\n├── src/\n│   └── snakesay/\n│       ├── __init__.py\n│       ├── __main__.py\n│       └── snake.py\n...\n\n\nThis layout has two key advantages: it makes the location of the source code more explicit and helps avoid some of the issues that can arise with more complex configurations, especially with testing.\nAt the root level of the project, you’ve got the star of this tutorial, the pyproject.toml file. In this project, the pyproject.toml file currently contains the following content:\nTOML\n    pyproject.toml\n    \n[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"snakesay\"\nversion = \"1.0.0\"\n\n[project.scripts]\nssay = \"snakesay.__main__:main\"\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nAs the tutorial progresses, you’ll examine what all this means in more detail. You’ll also expand this pyproject.toml to include more tables and fields. As it stands, this pyproject.toml file includes:\nThe [build-system] table: Specifies what’s needed to build the project. The requires key lists the required packages, and the build-backend key defines the module used for the build process.\nThe [project] table: Contains essential project metadata and has plenty of optional fields, some of which you’ll explore later in this tutorial.\nThe [project.scripts] table: Allows you to define one or several executable commands to be able to call your application from the command line. In this case, it’s ssay, but it can be anything you like.\nThe [tools.setuptools.packages.find] table: Tells your build-system, Setuptools, where to find packages in your project. In this case, it’s just the root directory.\nWith this pyproject.toml file, you’ve already defined all the configuration you need to build and run your project.\nThe [tools.setuptools.packages.find] table isn’t required since the value of [\".\"] is the default. Even though it’s the default, sometimes Setuptools can’t find other modules in the project root, and explicitly setting the where key can help with this.\nSetuptools has various defaults for package discovery, which include the current project layout and the src layout.\nRead the full article at https://realpython.com/python-pyproject-toml/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-pyproject-toml/",
      "pubDate": "2025-02-19T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/concatenating-strings-efficiently/",
      "title": "Concatenating Strings in Python Efficiently",
      "description": "Python string concatenation is a fundamental operation that combines multiple strings into a single string. In Python, you can concatenate strings using the + operator or append them with +=. For more efficient concatenation, especially when working with lists of strings, the .join() method is recommended. Other techniques include using StringIO for large datasets and the print() function for quick screen output.\nBy the end of this video course, you’ll understand that you can:\nConcatenate strings in Python using the + and += operators.\nUse += to append a string to an existing string.\nUse the .join() method to combine strings in a list in Python.\nHandle a stream of strings efficiently by using StringIO as a container with a file-like interface.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/concatenating-strings-efficiently/",
      "pubDate": "2025-02-18T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-news-february-2025/",
      "title": "Python News Roundup: February 2025",
      "description": "The new year has brought a flurry of activity to the Python community. New bugfix releases of Python 3.12 and 3.13 show that the developers seemingly never sleep. A new type of interpreter is slated for the upcoming Python 3.14 as part of ongoing efforts to improve Python’s performance.\nPoetry takes a giant leap toward compatibilty with other project management tools with the release of version 2. If you’re interested in challenging yourself with some programming puzzles, check out the new season of Coding Quest.\nTime to jump in! Enjoy this tour of what’s happening in the world of Python!\nPoetry Version 2 Adds Compatibility\nPoetry is a trusted and powerful project and dependency manager for Python. Initially created by Sébastien Eustace in 2018, it reached its Version 1 milestone in 2019. Since then, it has grown to be one of the most commonly used tools for managing Python projects.\nOn January 5, 2025, the Poetry team announced the release of Poetry 2.0.0. This major release comes with many updates. One of the most requested changes is compatibility with PEP 621, which describes how to specify project metadata in pyproject.toml.\nMost of the common tools for project management, including setuptools, uv, Hatch, Flit, and PDM, use pyproject.toml and the project table in a consistent way, as defined in PEP 621. With Poetry on board as well, you can more simply migrate your project from one tool to another.\nThis improved compatibility with the rest of the Python eco-system comes with a price. There are a few breaking changes in Poetry 2 compared to earlier versions. If you’re already using Poetry, you should take care when updating to the latest version.\nThe changelog describes all changes, and you can read the documentation for advice on how to migrate your existing projects to the new style of configuration. \nThe Python Team Releases Bugfix Versions for 3.12 and 3.13\nRead the full article at https://realpython.com/python-news-february-2025/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-news-february-2025/",
      "pubDate": "2025-02-17T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W08.html",
      "title": "R Weekly 2025-W08 CRAN, Lit Review, Laziness",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Eric Nantz, with help from the R Weekly team members and contributors.\nHighlight\nIs CRAN Holding R Back?\nHow to use large language models to assist in systematic literature reviews\nLazy introduction to laziness in R\nInsights\nLazy introduction to laziness in R\nIs CRAN Holding R Back?\nR in the Real World\nForecasting Food Commodity Prices - Ethiopia\n\nR version of survivalist: Probabilistic model-agnostic survival analysis using scikit-learn, xgboost, lightgbm (and conformal prediction)\nHow to use large language models to assist in systematic literature reviews\nGold’s Rise Over Silver Amid Trump Tariffs\nR in Organizations\nOpen-Source Adoption in Pharma: Opportunities and Challenges\nR in Academia\nEstimating a Bayesian proportional hazards model\nResources\nLarge Language Model tools for R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{TransProR} 1.0.2: Analysis and Visualization of Multi-Omics Data\n\n{odbr} 0.1.1: Download Data from Brazil’s Origin Destination Surveys\n{ClusterGVis} 0.1.2: One-Step to Cluster and Visualize Gene Expression Data\n{zonebuilder} 0.1.0: Create and Explore Geographic Zoning Systems\n{tomledit} 0.1.0: Parse, Read, and Edit ‘TOML’\n{rchroma} 0.1.0: A Client for ‘ChromaDB’\n{swash} 1.0.0: Swash-Backwash Model for the Single Epidemic Wave\n{BayesChange} 1.1.1: Bayesian Methods for Change Points Analysis\n{rockx} 0.0.2: Easily Import Data from Your ‘ODK-X Sync Endpoint’\n{manydist} 0.4.3: Unbiased Distances for Mixed-Type Data\n{BIOMASS} 2.1.12: Estimating Aboveground Biomass and Its Uncertainty in Tropical Forests\n{Surrogate} 3.3.3: Evaluation of Surrogate Endpoints in Clinical Trials\n{streamy} 0.1.0: Inline Asynchronous Generator Results into Documents\n{parseLatex} 0.2.1: Parse ‘LaTeX’ Code\n{schwabr} 0.1.2: ‘Schwab API’ Interface for R\n{metaquant} 0.1.1: Estimating Means, Standard Deviations and Visualising Distributions using Quantiles\n{PatientLevelPrediction} 6.4.0: Develop Clinical Prediction Models Using the Common Data Model\n{bushtucker} 0.1.0: ‘I’m a Celebrity Get Me Out of Here’ Data\n{siera} 0.1.0: Generate Analysis Results Programmes Using ARS Metadata\n{BayesERtools} 0.2.1: Bayesian Exposure-Response Analysis Tools\n{retmort} 1.0.0: Estimate User-Based Tagging Mortality and Tag Loss in Mark-Recapture Studies\nUpdated Packages\n🔍 Search on R-universe 🔍\n{valentine} 2025.2.14: Spread the Love for R Packages with Poetry - diffify\n{details} 0.4.0: Create Details HTML Tag for Markdown and Package Documentation - diffify\nRcppUUID 1.2.0 on CRAN: Adding Clock-based UUIDs\n{R6} 2.6.1: Encapsulated Classes with Reference Semantics - diffify\n{parsnip} 1.3.0: A Common API to Modeling and Analysis Functions - diffify\n{censored} 0.3.3: ‘parsnip’ Engines for Survival Models - diffify\n{transltr} 0.1.0: Support Many Languages in R - diffify\n{BAwiR} 1.3.4: Analysis of Basketball Data - diffify\n{ade4} 1.7-23: Analysis of Ecological Data: Exploratory and Euclidean Methods in Environmental Sciences - diffify\n{teal.logger} 0.3.2: Logging Setup for the ‘teal’ Family of Packages - diffify\n{teal.code} 0.6.1: Code Storage and Execution Class for ‘teal’ Applications - diffify\n{teal.transform} 0.6.0: Functions for Extracting and Merging Data in the ‘teal’ Framework - diffify\n{groqR} 0.0.3: A Coding Assistant using the Fast AI Inference ‘Groq’ - diffify\n{dawaR} 0.3.0: An API Wrapper for ‘DAWA’ - ‘The Danish Address Web API’ - diffify\n{collegeScorecard} 0.2.0: US College Scorecard Data - diffify\n{cli} 3.6.4: Helpers for Developing Command Line Interfaces - diffify\n{cheapr} 1.0.1: Simple Functions to Save Time and Memory - diffify\n{psborrow2} 0.0.4.0: Bayesian Dynamic Borrowing Analysis and Simulation - diffify\n{lintr} 3.2.0: A ‘Linter’ for R Code - diffify\n{clustermq} 0.9.7: Evaluate Function Calls on HPC Schedulers (LSF, SGE, SLURM, PBS/Torque) - diffify\nVideos and Podcasts\nConvincing IT that R packages are safe\nAI & Traditional Functions with R & {ellmer}\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nShinyConf24 - Keynote: Decade of Shiny in Action: Case Studies from Three Enterprises\nTutorials\nYour Definitive Guide to Seamless Authentication with Auth0 in Shiny Apps\nUsing options() to inject a function’s internal variable for reproducible testing\nHow to Combine a List of Matrices in R: A Comprehensive Guide\n3MW (Use AWS Textract With R & {paws})\nA plumber API to filter and aggregate datasets\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nSign Up for Appsilon’s Tiny Shiny Hackathon: Build, Compete, and Win!\nHitting web APIs with {httr2} in R workshop\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week\n  \n \nPost by @dgkf@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @kupac@functional.cafe\n View on Mastodon",
      "link": "https://rweekly.org//2025-W08.html",
      "pubDate": "Sun, 16 Feb 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/239/",
      "title": "The Real Python Podcast – Episode #239: Behavior-Driven vs Test-Driven Development & Using Regex in Python",
      "description": "What is behavior-driven development, and how does it work alongside test-driven development? How do you communicate requirements between teams in an organization? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/239/",
      "pubDate": "2025-02-14T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-keywords/",
      "title": "Python Keywords: An Introduction",
      "description": "Python keywords are reserved words with specific functions and restrictions in the language. Currently, Python has thirty-five keywords and four soft keywords. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.\nBy the end of this tutorial, you’ll understand that:\nThere are 35 keywords and four soft keywords in Python.\nYou can get a list of all keywords using keyword.kwlist from the keyword module.\nSoft keywords in Python act as keywords only in specific contexts.\nprint and exec are keywords that have been deprecated and turned into functions in Python 3.\nIn this article, you’ll find a basic introduction to all Python keywords and soft keywords along with other resources that will be helpful for learning more about each keyword.\nGet Your Cheat Sheet: Click here to download a free cheat sheet that summarizes the main keywords in Python.\n Take the Quiz: Test your knowledge with our interactive “Python Keywords: An Introduction” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nPython Keywords: An Introduction \n      \nIn this quiz, you'll test your understanding of Python keywords and soft keywords. These reserved words have specific functions and restrictions in Python, and understanding how to use them correctly is fundamental for building Python programs.\nPython Keywords\nPython keywords are special reserved words that have specific meanings and purposes and can’t be used for anything but those specific purposes. These keywords are always available—you’ll never have to import them into your code.\nPython keywords are different from Python’s built-in functions and types. The built-in functions and types are also always available, but they aren’t as restrictive as the keywords in their usage. \nAn example of something you can’t do with Python keywords is assign something to them. If you try, then you’ll get a SyntaxError. You won’t get a SyntaxError if you try to assign something to a built-in function or type, but it still isn’t a good idea. For a more in-depth explanation of ways keywords can be misused, check out Invalid Syntax in Python: Common Reasons for SyntaxError.\nThere are thirty-five keywords in Python. Here’s a list of them, each linked to its relevant section in this tutorial:\nFalse\nawait\nelse\nimport\npass\n\n\nNone\nbreak\nexcept\nin\nraise\n\n\nTrue\nclass\nfinally\nis\nreturn\n\n\nand\ncontinue\nfor\nlambda\ntry\n\n\nas\ndef\nfrom\nnonlocal\nwhile\n\n\nassert\ndel\nglobal\nnot\nwith\n\n\nasync\nelif\nif\nor\nyield\n\n\n\n\nTwo keywords have additional uses beyond their initial use cases. The else keyword is also used with loops and with try and except in addition to in conditional statements. The as keyword is most commonly used in import statements, but also used with the with keyword.\nThe list of Python keywords and soft keywords has changed over time. For example, the await and async keywords weren’t added until Python 3.7. Also, both print and exec were keywords in Python 2.7 but were turned into built-in functions in Python 3 and no longer appear in the keywords list.\nPython Soft Keywords\nAs mentioned above, you’ll get an error if you try to assign something to a Python keyword. Soft keywords, on the other hand, aren’t that strict. They syntactically act as keywords only in certain conditions.\nThis new capability was made possible thanks to the introduction of the PEG parser in Python 3.9, which changed how the interpreter reads the source code.\nLeveraging the PEG parser allowed for the introduction of structural pattern matching in Python. In order to use intuitive syntax, the authors picked match, case, and _ for the pattern matching statements. Notably, match and case are widely used for this purpose in many other programming languages.\nTo prevent conflicts with existing Python code that already used match, case, and _ as variable or function names, Python developers decided to introduce the concept of soft keywords.\nCurrently, there are four soft keywords in Python:\nmatch\ncase\n_\ntype\n\n\n\n\nYou can use the links above to jump to the soft keywords you’d like to read about, or you can continue reading for a guided tour.\nValue Keywords: True, False, None\nThere are three Python keywords that are used as values. These values are singleton values that can be used over and over again and always reference the exact same object. You’ll most likely see and use these values a lot.\nThere are a few terms used in the sections below that may be new to you. They’re defined here, and you should be aware of their meaning before proceeding:\nRead the full article at https://realpython.com/python-keywords/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-keywords/",
      "pubDate": "2025-02-12T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-keywords/",
      "title": "Quiz: Python Keywords: An Introduction",
      "description": "In this quiz, you’ll test your understanding of Python Keywords.\nPython keywords are reserved words with specific functions and restrictions in the language. These keywords are always available in Python, which means you don’t need to import them. Understanding how to use them correctly is fundamental for building Python programs.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-keywords/",
      "pubDate": "2025-02-12T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/build-command-line-todo-app-typer/",
      "title": "Building a Python Command-Line To-Do App With Typer",
      "description": "Building an application to manage your to-do list can be an interesting project when you’re learning a new programming language or trying to take your skills to the next level. In this video course, you’ll build a functional to-do application for the command line using Python and Typer, which is a relatively young library for creating powerful command-line interface (CLI) applications in almost no time.\nWith a project like this, you’ll apply a wide set of core programming skills while building a real-world application with real features and requirements.\nIn this video course, you’ll learn how to:\nBuild a functional to-do application with a Typer CLI in Python\nUse Typer to add commands, arguments, and options to your to-do app\nTest your Python to-do application with Typer’s CliRunner and pytest\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/build-command-line-todo-app-typer/",
      "pubDate": "2025-02-11T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-join-string/",
      "title": "How to Join Strings in Python",
      "description": "Python’s built-in string method .join() lets you combine string elements from an iterable into a single string, using a separator that you specify. You call .join() on the separator, passing the iterable of strings to join.\nBy the end of this tutorial, you’ll understand that:\nYou use .join() in Python to combine string elements with a specified separator.\nA separator is the piece of text you want inserted between each substring.\nTo join list elements, you call .join() on a separator string, passing the list as the argument.\n.join() inserts the separator between each list element to form a single string.\nThe .join() method returns a new string that is the concatenation of the elements in the iterable, separated by the specified string.\nFor smaller string concatenation tasks, you can use the concatenation operator (+) or f-strings instead of .join().\nPython’s built-in str.join() method gives you a quick and reliable way to combine multiple strings into a single string. Whether you need to format output or assemble data for storage, .join() provides a clean and efficient approach for joining strings from an iterable.\nIn the upcoming sections, you’ll learn the basic usage of .join() to concatenate strings effectively. You’ll then apply that knowledge to real-world scenarios, from building CSV files to constructing custom log outputs. You’ll also discover some surprising pitfalls and learn how to avoid them.\nGet Your Code: Click here to download the free sample code  that shows you how to join strings in Python.\n Take the Quiz: Test your knowledge with our interactive “How to Join Strings in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nHow to Join Strings in Python \n      \nTest your understanding of Python's .join() string method for combining strings, handling edge cases, and optimizing performance.\nHow to Join Strings in Python Using .join()\nTo use the string method .join(), you call .join() on a separator string and pass an iterable of other strings as the argument. The method returns a single string, where it has inserted the separator string between each element of the iterable:\nPython\n    \n    \n\n      \n    \n>>> words = [\"Time\", \"flies\", \"like\", \"an\", \"arrow!\"]\n>>> \" \".join(words)\n'Time flies like an arrow!'\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, you joined a list of words into one sentence, separated by spaces.\nAt first glance, this usage might look a little backward. In many other string operations, you call the method on the main string that you want to manipulate. However, with .join(), you call the method on the separator string, then pass the iterable of strings that you want to combine:\nPython\n    \n    \n\n      \n    \n>>> separator = \" \"\n>>> separator.join(words)\n'Time flies like an arrow!'\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nThis example achieves the same result as the earlier one but splits the process into two steps. Defining separator separately makes the code more readable and avoids the potentially odd-looking syntax of calling .join() directly on a short string literal.\nNote: Remember that .join() is a string method, which means that you’ll need to call it on a single string object. Keeping that in mind may help you remember why you need to call it on the separator string.\nYou rarely see code that’s written in multiple steps where you assign the separator string to a variable, like you did in the example above.\nIn typical usage, you call .join() directly on the separator string, all in one line. This approach is more concise and highlights that any valid string can be your separator, whether it’s whitespace, a dash, or a multicharacter substring.\nJoin With an Empty String\nWhat if you don’t want any separator at all, but just want to concatenate the items? One valid approach is to use an empty string (\"\") as the separator:\nPython\n    \n    \n\n      \n    \n>>> letters = [\"A\", \"B\", \"C\", \"D\"]\n>>> \"\".join(letters)\n'ABCD'\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nThis code snippet concatenates the letters in the list, forming a single string \"ABCD\". Using an empty string as the separator is a great way to assemble strings without a delimiter between them.\nCombine Strings of Characters\nSince .join() can take any iterable of strings—not just lists—you can even pass a string as an argument. Because strings are iterable, Python iterates over each character in that string, considering each character as a separate element:\nPython\n    \n    \n\n      \n    \n>>> characters = \"ABCD\"\n>>> \",\".join(characters)\n'A,B,C,D'\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nBy calling .join() on \",\" and passing the string characters, you effectively place a comma between every single character in \"ABCD\". This might not always be what you intend, but it’s a neat trick to keep in mind if you ever need to treat each character as a separate element.\nRead the full article at https://realpython.com/python-join-string/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-join-string/",
      "pubDate": "2025-02-10T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W07.html",
      "title": "R Weekly 2025-W07 Monochrome plots, Tidying text, Rlinguo",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Carroll, \nwith help from the RWeekly team members and contributors. This issue includes \nsome posts we overlooked over the end of year break.\nHighlight\nDesigning monochrome data visualisations\nThe life changing magic of tidying text files\nRlinguo — Why Did We Build It?\nInsights\nExploring the bioRxiv API with R, httr2, rvest, tidytext, and Datawrapper\nRlinguo — Why Did We Build It?\nKerning and Kerning in a Widening Gyre\nKey considerations for retiring/superseding an R package\nDesigning monochrome data visualisations\n\n3MW (Save Data at AWS S3 With {paws})\nHow to Combine Lists in R: A Complete Guide with Examples\nHow to Append Values to List in R: A Complete Guide with Examples\nHow to Append Values to a Vector Using a Loop in R: A Comprehensive Guide\nHow to dynamically aggregate any dataset in R with purrr and dplyr\nSimpson’s Paradox in a Logistic Regression\nThe life changing magic of tidying text files\nDepression incidence by county and vote for Trump by @ellis2013nz\nShould you Submit Papers before Christmas? Submission Percentages across Months of the Year\nLaunch RStudio, Positron, and other Data Science apps from your Finder Toolbar\nIntroducing the {pipeflow} package\nCreating an animated Christmas tree in R\nImpact of Trump’s Win on Financial ETFs\nSpeak at posit::conf(2025)!\nDyson’s Algorithm for the Twelve Coins Problem\nResources\nmirai v2.0 - easier distributed computing, mirai cancellation, tidyverse purrr integration.\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nRcppUUID 1.1.2 on CRAN: Newly Adopted Package\n{ggsurveillance} 0.1.1: Tools for Outbreak Investigation and Infectious Disease Surveillance, like Epicurves in ‘ggplot2’\n{tergo} 0.1.8: Style Your Code Fast\n{kollaR} 1.0.3: Filtering, Visualization and Analysis of Eye Tracking Data\n{taxize} 0.10.0: Taxonomic Information from Around the Web\n{tall} 0.1.0: Text Analysis for All\n{watcher} 0.1.0: Watch the File System for Changes\n{SQLFormatteR} 0.0.1: Format SQL Queries\n{shiny2docker} 0.0.1: Generate Dockerfiles for ‘Shiny’ Applications\n{nlpembeds} 1.0.0: Natural Language Processing Embeddings\n{shinyr} 0.4.2: Data Insights Through Inbuilt R Shiny App\n{shinykanban} 0.0.1: Create Kanban Board in Shiny Applications\n{authoritative} 0.1.0: Parse and Deduplicate Author Names\n{raybevel} 0.2.2: Generates Polygon Straight Skeletons and 3D Bevels\n{autoimport} 0.1.1: Automatic Generation of @importFrom Tags\n{timeplyr} 1.0.0: Fast Tidy Tools for Date and Date-Time Manipulation\nGitHub\nausvotesTR - an R package for exploring Australian federal political donations\nUpdated Packages\n🔍 Search on R-universe 🔍\nNew version of package gDefrag\nzigg 0.0.2 on CRAN: Micromaintenance\nRcppArmadillo 14.2.3-1 on CRAN: Small Upstream Fix\n{cocoon} 0.2.0: Extract, Format, and Print Statistical Output - diffify\n{happign} 0.3.2: R Interface to French Geospatiale data from ‘IGN’ Web Services - diffify\n{string2path} 0.2.0: Rendering Font into ‘data.frame’ - diffify\n{tidyHeatmap} 1.11.6: A Tidy Implementation of Heatmap - diffify\n{openrouteservice} 0.6.2: An ‘openrouteservice’ API Client - diffify\n{rbioapi} 0.8.2: User-Friendly R Interface to Biologic Web Services’ API - diffify\n{renv} 1.1.1: Project Environments - diffify\n{zigg} 0.0.2: Lightweight Interfaces to the ‘Ziggurat’ Pseudo Random Number Generator - diffify\n{paws.common} 0.8.0: Paws Low-Level Amazon Web Services API - diffify\n{jsonvalidate} 1.5.0: Validate ‘JSON’ Schema - diffify\n{duckplyr} 1.0.0: A ‘DuckDB’-Backed Version of ‘dplyr’ - diffify\n{rayrender} 0.38.8: Build and Raytrace 3D Scenes - diffify\n{emayili} 0.9.3: Send Email Messages - diffify\n{ellmer} 0.1.1: Chat with Large Language Models - diffify\n{checkglobals} 0.1.3: Static Analysis of R-Code Dependencies - diffify\n{arcpullr} 0.3.0: Pull Data from an ‘ArcGIS REST’ API - diffify\n{dibble} 0.3.1: Dimensional Data Frames - diffify\n{urlparse} 0.2.0: Fast Simple URL Parser - diffify\n{convertid} 0.1.10: Convert Gene IDs Between Each Other and Fetch Annotations from\nBiomart - diffify\n{RcppArmadillo} 14.2.3-1: ‘Rcpp’ Integration for the ‘Armadillo’ Templated Linear Algebra Library - diffify\n{gemini.R} 0.8.0: Interface for ‘Google Gemini’ API - diffify\n{purrr} 1.0.4: Functional Programming Tools - diffify\n{sessioninfo} 1.2.3: R Session Information - diffify\n{fishmethods} 1.13-1: Fishery Science Methods and Models - diffify\n{super} 0.0.5: Interpreted String Literals - diffify\n{shinyscholar} 0.2.5: A Template for Creating Reproducible ‘shiny’ Applications - diffify\n{plotthis} 0.5.1: High-Level Plotting Built Upon ‘ggplot2’ and Other Plotting Packages - diffify\n{ggbreak} 0.1.4: Set Axis Break for ‘ggplot2’ - diffify\n{primes} 1.6.1: Fast Functions for Prime Numbers - diffify\n{miceFast} 0.8.5: Fast Imputations Using ‘Rcpp’ and ‘Armadillo’ - diffify\n{tidyterra} 0.7.0: ‘tidyverse’ Methods and ‘ggplot2’ Helpers for ‘terra’ Objects - diffify\n{mongolite} 3.0.1: Fast and Simple ‘MongoDB’ Client for R - diffify\n{lessR} 4.4.1: Less Code, More Results - diffify\n{crew} 1.0.0: A Distributed Worker Launcher Framework - diffify\n{quickcode} 1.0.5: Quick and Essential ‘R’ Tricks for Better Scripts - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nA simple test of the martingale hypothesis in esgtoolkit\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry",
      "link": "https://rweekly.org//2025-W07.html",
      "pubDate": "Mon, 10 Feb 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/238/",
      "title": "The Real Python Podcast – Episode #238: Charlie Marsh: Accelerating Python Tooling With Ruff and uv",
      "description": "Are you looking for fast tools to lint your code and manage your projects? How is the Rust programming language being used to speed up Python tools? This week on the show, we speak with Charlie Marsh about his company, Astral, and their tools, uv and Ruff.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/238/",
      "pubDate": "2025-02-07T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-for-loop/",
      "title": "Quiz: Python \"for\" Loops: The Pythonic Way",
      "description": "In this quiz, you’ll test your understanding of Python’s for loop.\nBy working through this quiz, you’ll revisit how to iterate over items in a data collection, how to use range() for a predefined number of iterations, and how to use enumerate() for index-based iteration.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-for-loop/",
      "pubDate": "2025-02-06T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-join-string/",
      "title": "Quiz: How to Join Strings in Python",
      "description": "In this quiz, you’ll test your understanding of How to Join Strings in Python.\nBy working through this quiz, you’ll review how to use .join() to combine strings with a specified separator and handle non-string data in iterables. You’ll also revisit how .join() compares to other concatenation methods and how it’s optimized in CPython.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-join-string/",
      "pubDate": "2025-02-06T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-split-string/",
      "title": "How to Split a String in Python",
      "description": "Python’s .split() method lets you divide a string into a list of substrings based on a specified delimiter. By default, .split() separates at whitespace, including spaces, tabs, and newlines. You can customize .split() to work with specific delimiters using the sep parameter, and control the amount of splits with maxsplit.\nBy the end of this tutorial, you’ll understand that:\nYou split a string by spaces in Python using .split() without arguments.\nPython’s .split() method can split on custom delimiters when you pass a character or string as an argument.\nYou limit splits using maxsplit to control the number of substrings Python extracts.\n.splitlines() splits multiline strings into individual lines, excluding or including line breaks with the keepends parameter.\nre.split() uses regular expressions for splitting strings based on complex patterns.\nExploring these methods will level up your text-processing capabilities and enable you to confidently tackle real-world data parsing challenges.\nGet Your Code: Click here to download the free sample code that shows you how to split strings in Python.\n Take the Quiz: Test your knowledge with our interactive “How to Split a String in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nHow to Split a String in Python \n      \nIn this quiz, you'll test your understanding of Python's .split() method. This method is useful for text-processing and data parsing tasks, allowing you to divide a string into a list of substrings based on a specified delimiter.\nHow to Split a String in Python Using .split()\nThe .split() method in Python is a versatile tool that allows you to divide a string into a list of substrings based on a specified delimiter. By default, .split() separates a string at each occurrence of whitespace, which includes spaces, tabs, and newlines. This makes it particularly handy when dealing with plain text where words are separated by spaces:\nPython\n    \n    \n\n      \n    \n>>> sentence = \"Python is a versatile language.\"\n>>> sentence.split()\n['Python', 'is', 'a', 'versatile', 'language.']\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nAs you can see, .split() divides the sentence into individual words, removing the spaces in the process. It’s important to note that .split() also strips newlines by default, which might not be immediately obvious:\nPython\n    \n    \n\n      \n    \n>>> text = \"\"\"Line one\n... Line two\n... Line three\"\"\"\n\n>>> text.split()\n['Line', 'one', 'Line', 'two', 'Line', 'three']\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nThe .split() method treats the newline characters as whitespace, and splits the text into individual words rather than lines. This is a crucial point to remember when working with multiline strings.\nThe simplicity of .split() makes it a powerful tool for string manipulation. Whether you’re processing text files or parsing user input, using .split() can streamline your workflow.\nWhen you’re faced with the task of cleaning up messy text, you may want to pair .split() with .strip(). You can learn more about using str.strip().split() by expanding the collapsible section below:\nUsing str.strip().split()Show/Hide\n  \nYou may encounter code that uses .split() in combination with another string method, .strip():\nPython\n    \n    \n\n      \n    \n>>> text = \"    Hello   world  \"\n>>> text.strip().split()\n['Hello', 'world']\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, you’re dealing with text that contains whitespace characters at the beginning and end of text. You may see results like this when working with data that you received through web scraping, copy-paste artifacts from PDFs, or even regular user input.\nCombining .strip() and .split() is a common and straightforward way to break potentially messy text into manageable tokens.\nThe idea is that you first remove superfluous whitespace characters from the beginning and end of the string using .strip(). This operation returns a new string object without that whitespace. You then chain .split() to this cleaned output, allowing it to break the text into elements—in this case, individual words.\nIf you’re only dealing with messy whitespace, however, then you don’t need to use .strip() to get to a clean result:\nPython\n    \n    \n\n      \n    \n>>> text = \"    Hello   world  \"\n>>> text.split()\n['Hello', 'world']\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nBecause .split() splits on any whitespace and ignores extra leading and trailing whitespace, the result is the same as when you first explicitly remove leading and trailing whitespace with .strip().\nNevertheless, there may be advantages to adding .strip() into the mix:\nExplicitness: You clearly communicate to other developers that you intend to apply data cleaning—and readability counts!\nFuture-proofing: You may later need to update your code to split on a different delimiter, in which case .split() won’t remove extra whitespace automatically. A well-designed additional step of explicitly removing whitespace with .strip() can prevent surprises.\nIf you’re only splitting on whitespace, then you likely won’t need to use str.strip().split(). However, due to developer habits and a preference for explicitness, you may still come across this combination of string methods in the wild.\nWhen you use .split(), it returns a list of substrings. This means that you can iterate over the result, access individual elements using indexing, or unpack the iterable into separate variables.\nFor example, when you’re dealing with user input, you might want to extract specific pieces of information:\nPython\n    \n    \n\n      \n    \n>>> user_input = \"Deborah Lopez 30\"\n>>> user_data = user_input.split()\n>>> user_data\n['Deborah', 'Lopez', '30']\n\n>>> name, surname, age = user_data\n>>> print(f\"Welcome {name}! You're {age} years old.\")\nWelcome Deborah! You're 30 years old.\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this code snippet, you take a string containing a name, surname, and age, and split it into a list of three separate strings. Then, you unpack the list into three descriptive variables. Finally, you use an f-string to format the output.\nNote: Extracting data pieces like this is useful when you’re dealing with structured data where you know the position of each element beforehand, and you can rely on consistent use of whitespace.\nIn this section, you’ve learned how to use Python’s .split() method to divide strings into smaller parts based on whitespace. This method is invaluable when working with plain text data, allowing you to extract and manipulate information. By understanding the default behavior of .split(), including its treatment of newlines, you’ll be well-equipped to handle a variety of string manipulation tasks in your Python projects.\nIn the next section, you’ll explore how to customize the behavior of .split() by specifying different delimiters, enabling you to tackle more complex string splitting scenarios.\nSplit With Different Delimiters Using sep\nBy default, .split() uses any whitespace as a delimiter to separate a string into a list of substrings. However, many real-world scenarios require splitting strings using other delimiters. This is where the sep parameter comes into play.\nImagine that you’re parsing data from a CSV (comma-separated values) file. CSV files are a popular format for storing tabular data, where each line represents a row and each value within a line is separated by a comma.\nRead the full article at https://realpython.com/python-split-string/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-split-string/",
      "pubDate": "2025-02-05T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/numpy-techniques-practical-examples/",
      "title": "NumPy Techniques and Practical Examples",
      "description": "The NumPy library is a Python library used for scientific computing. It provides you with a multidimensional array object for storing and analyzing data in a wide variety of ways. In this video course, you’ll see examples of some features NumPy provides that aren’t always highlighted in other tutorials. \nIn this video course, you’ll learn how to:\nCreate multidimensional arrays from data stored in files\nIdentify and remove duplicate data from a NumPy array\nUse structured NumPy arrays to reconcile the differences between datasets\nAnalyze and chart specific parts of hierarchical data\nCreate vectorized versions of your own functions\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/numpy-techniques-practical-examples/",
      "pubDate": "2025-02-04T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/python-split-string/",
      "title": "Quiz: How to Split a String in Python",
      "description": "In this quiz, you’ll test your understanding of\nPython’s .split() method.\nPython’s .split() method lets you divide a string into a list of substrings based on a specified delimiter. By default, .split() separates at whitespace, including spaces, tabs, and newlines. You can customize .split() to work with specific delimiters using the sep parameter, and control the amount of splits with maxsplit.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/python-split-string/",
      "pubDate": "2025-02-04T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/python-for-loop/",
      "title": "Python for Loops: The Pythonic Way",
      "description": "Python’s for loop allows you to iterate over the items in a collection, such as lists, tuples, strings, and dictionaries. The for loop syntax declares a loop variable that takes each item from the collection in each iteration. This loop is ideal for repeatedly executing a block of code on each item in the collection. You can also tweak for loops further with features like break, continue, and else.\nBy the end of this tutorial, you’ll understand that:\nPython’s for loop iterates over items in a data collection, allowing you to execute code for each item.\nTo iterate from 0 to 10, you use the for index in range(11): construct.\nTo repeat code a number of times without processing the data of an iterable, use the for _ in range(times): construct.\nTo do index-based iteration, you can use for index, value in enumerate(iterable): to access both index and item.\nIn this tutorial, you’ll gain practical knowledge of using for loops to traverse various collections and learn Pythonic looping techniques. Additionally, you’ll learn how to handle exceptions and how to use asynchronous iterations to make your Python code more robust and efficient.\nGet Your Code: Click here to download the free sample code that shows you how to use for loops in Python.\n Take the Quiz: Test your knowledge with our interactive “Python \"for\" Loops: The Pythonic Way” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n            \n \n      \nInteractive Quiz\nPython \"for\" Loops: The Pythonic Way \n      \nIn this quiz, you'll test your understanding of Python's for loop. You'll revisit how to iterate over items in a data collection, how to use range() for a predefined number of iterations, and how to use enumerate() for index-based iteration.\nGetting Started With the Python for Loop\nIn programming, loops are control flow statements that allow you to repeat a given set of operations a number of times. In practice, you’ll find two main types of loops:\nfor loops are mostly used to iterate a known number of times, which is common when you’re processing data collections with a specific number of data items.\nwhile loops are commonly used to iterate an unknown number of times, which is useful when the number of iterations depends on a given condition.\nPython has both of these loops and in this tutorial, you’ll learn about for loops. In Python, you’ll generally use for loops when you need to iterate over the items in a data collection. This type of loop lets you traverse different data collections and run a specific group of statements on or with each item in the input collection.\nIn Python, for loops are compound statements with a header and a code block that runs a predefined number of times. The basic syntax of a for loop is shown below:\nPython Syntax\n    \n    \nfor variable in iterable:\n    <body>\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this syntax, variable is the loop variable. In each iteration, this variable takes the value of the current item in iterable, which represents the data collection you need to iterate over. The loop body can consist of one or more statements that must be indented properly.\nHere’s a more detailed breakdown of this syntax:\nfor is the keyword that initiates the loop header.\nvariable is a variable that holds the current item in the input iterable.\nin is a keyword that connects the loop variable with the iterable.\niterable is a data collection that can be iterated over.\n<body> consists of one or more statements to execute in each iteration.\nHere’s a quick example of how you can use a for loop to iterate over a list:\nPython\n    \n    \n\n      \n    \n>>> colors = [\"red\", \"green\", \"blue\", \"yellow\"]\n\n>>> for color in colors:\n...     print(color)\n...\nred\ngreen\nblue\nyellow\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this example, color is the loop variable, while the colors list is the target collection. Each time through the loop, color takes on a successive item from colors. In this loop, the body consists of a call to print() that displays the value on the screen. This loop runs once for each item in the target iterable. The way the code above is written is the Pythonic way to write it.\nHowever, what’s an iterable anyway? In Python, an iterable is an object—often a data collection—that can be iterated over. Common examples of iterables in Python include lists, tuples, strings, dictionaries, and sets, which are all built-in data types. You can also have custom classes that support iteration.\nNote: Python has both iterables and iterators. Iterables support the iterable protocol consisting of the .__iter__() special method. Similarly, iterators support the iterator protocol that’s based on the .__iter__() and .__next__() special methods.\nBoth iterables and iterators can be iterated over. All iterators are iterables, but not all iterables are iterators. Python iterators play a fundamental role in for loops because they drive the iteration process.\nA deeper discussion on iterables and iterators is beyond the scope of this tutorial. However, to learn more about them, check out the Iterators and Iterables in Python: Run Efficient Iterations tutorial.\nYou can also have a loop with multiple loop variables:\nPython\n    \n    \n\n      \n    \n>>> points = [(1, 4), (3, 6), (7, 3)]\n\n>>> for x, y in points:\n...     print(f\"{x = } and {y = }\")\n...\nx = 1 and y = 4\nx = 3 and y = 6\nx = 7 and y = 3\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nIn this loop, you have two loop variables, x and y. Note that to use this syntax, you just need to provide a tuple of loop variables. Also, you can have as many loop variables as you need as long as you have the correct number of items to unpack into them. You’ll also find this pattern useful when iterating over dictionary items or when you need to do parallel iteration.\nSometimes, the input iterable may be empty. In that case, the loop will run its header once but won’t execute its body:\nPython\n    \n    \n\n      \n    \n>>> for item in []:\n...     print(item)\n...\n\n\n    \n    \n    \n      Copied!\n    \n    \n  \nRead the full article at https://realpython.com/python-for-loop/ »\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/python-for-loop/",
      "pubDate": "2025-02-03T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W06.html",
      "title": "R Weekly 2025-W06 LLM code, Gapminder, Our World in Data",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Kitt, with help from the R Weekly team members and contributors.\nHighlight\nThree experiments in LLM code assist with RStudio and Positron\nGapminder: how has the world changed?\n\nDownloading datasets from Our World in Data in R\nInsights\nRcppStreams 0.1.4 Maintenance\nrOpenSci News Digest, January 2025\nGapminder: how has the world changed?\nR in the Real World\nMapping water insecurity in R with tidycensus\n\nWorld Happiness Report 2024\n\nR in Organizations\nShiny Gathering x Pharmaverse Recap: Simplifying R Package Quality with the {riskassessment} App\nUsing AI with R - R for the rest of us\nR in Academia\nDecomposing within and between person effects in longitudinal data with SEM in R workshop\nExtensions of the survey package in R providing a new used interface and resampling methods for especially complex sample designs\nResources\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{jobqueue} 1.0.1: Run Interruptible Code Asynchronously\n{ggfootball} 0.1.0: Plotting Expected Goals (xG) Stats with Understat Data\n{shinyCLT} 0.9.3: Central Limit Theorem ‘shiny’ Application\n{layer} 0.0.3: Tilt your Maps and Turn Them into ‘ggplot’ Plots\n{superspreading} 0.3.0: Understand Individual-Level Variation in Infectious Disease\nTransmission\nUpdated Packages\n🔍 Search on R-universe 🔍\n{brulee} 0.4.0: High-Level Modeling Functions with ‘torch’ - diffify\n{torch} 0.14.0: Tensors and Neural Networks with ‘GPU’ Acceleration - diffify\n{chattr} 0.2.1: Interact with Large Language Models in ‘RStudio’ - diffify\n{shinyscholar} 0.2.4: A Template for Creating Reproducible ‘shiny’ Applications - diffify\n{vegan} 2.6-10: Community Ecology Package - diffify\n{tidyclust} 0.2.4: A Common API to Clustering - diffify\n{surveydown} 0.8.0: Markdown-Based Surveys Using ‘Quarto’ and ‘shiny’ - diffify\n{report} 0.6.0: Automated Reporting of Results and Statistical Models - diffify\n{tidyHeatmap} 1.11.4: A Tidy Implementation of Heatmap - diffify\n{fusen} 0.7.1: Build a Package from Rmarkdown Files - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nModel cards with vetiver for transparent, responsible reporting\nShiny Apps\nSharing data between pages in a multi-page Brochure Shiny application\nR Internationally\n[Bioconductor Course\n          Nairobi, Kenya\n          March 2025](https://training.bioconductor.org/workshops/2025-03-Nairobi/index.html)\n        \nTutorials\nDownloading datasets from Our World in Data in R\nThinking about covariates in an analysis of an RCT\nThree experiments in LLM code assist with RStudio and Positron\nnanoparquet 0.4.0\nHow to Remove Duplicate Rows in R: A Complete Guide to Data Cleaning\n3MW (Extract Information From Images and PDFs With R & LLMs)\nHow to run a T-Test in R\n\n-->\n\nR Project Updates\nUpdates from R Core:\nChanges in R-devel\nUpdates from the R Contribution Working Group (RCWG):\nR Contributor Office Hours, Thursday February 6: 10:00-11:00 UTC or 09:30-11:00 PST. R Core developer Martin Maechler will be joining the first office hour.\nCall for Participation\nEverything You Need to Know About Submitting a Talk for ShinyConf 2025\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nGenuary 2025 Day 30: Abstract map. 🎨\n\n#Genuary #Genuary2025 #RStats #Rtistry #GenerativeArt #Genuary30\n[image or embed]\n— Nicola Rennie (@nrennie.bsky.social) 30 janvier 2025 à 09:49\n\n\nQuotes of the Week\nWhen you spend forever debugging trying to make your code find the \"data\" folder, but you've accidentally added a space before it when you named it: \" data\". #datamishaps #rstats #datascience\n— Ted Laderas (@tladeras.bsky.social) 29 janvier 2025 à 23:55\n\n\n\nWhen you're at the end of your shift in the Description writing factory\n\n#rstats\n[image or embed]\n— Tony Corke (@matterofstats.bsky.social) 28 janvier 2025 à 03:31",
      "link": "https://rweekly.org//2025-W06.html",
      "pubDate": "Mon, 03 Feb 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/237/",
      "title": "The Real Python Podcast – Episode #237: Testing Your Python Code Base: Unit vs. Integration",
      "description": "What goes into creating automated tests for your Python code? Should you focus on testing the individual code sections or on how the entire system runs? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/237/",
      "pubDate": "2025-01-31T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/create-scalable-flask-web-app/",
      "title": "Creating a Scalable Flask Web Application From Scratch",
      "description": "Flask is a powerful and flexible micro web framework for Python, ideal for both small and large web projects. It provides a straightforward way to get a web application up and running, with all the features that you need to get started.\nOver the course of this video course, you’ll explore the process of creating a boilerplate for a Flask web project. This boilerplate will serve as a great starting point for any scalable Flask web app that you wish to develop in the future, from basic web pages to complex web applications.\nIn this video course, you’ll learn how to:\nSet up a Flask project\nCreate a \"Hello, World!\" Flask app\nAdd multiple pages with blueprints\nLeverage Jinja templates\nStore static files\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/create-scalable-flask-web-app/",
      "pubDate": "2025-01-28T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W05.html",
      "title": "R Weekly 2025-W05 Quarto revealjs, First Time Contributions",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jon Calder, with help from the R Weekly team members and contributors.\nHighlight\nSeven tips for creating Quarto revealjs presentations\nFrom Novice to Contributor: Making and Supporting First-Time Contributions to FOSS\nInsights\nrOpenSci 2024 Highlights\nFrom Novice to Contributor: Making and Supporting First-Time Contributions to FOSS\nRemembering Friedrich “Fritz” Leisch\nR in Organizations\nShift from Myth to Risk-Based Validation: GxP Case Studies\nLower Validation Workload and Faster Development With GxP Compliant Rstudio Environment on AWS\nR in Academia\nGet Better: R for cell biologists\n\nResources\nCRAN R package binaries for Linux - arm64 and Alpine Linux\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{ncaavolleyballr 0.4.1} Extract Data from NCAA Women’s and Men’s Volleyball Website\n{phylospatial} 1.0.0: Spatial Phylogenetic Analysis\n{oldr} 0.2.3: An Implementation of Rapid Assessment Method for Older People\nUpdated Packages\n🔍 Search on R-universe 🔍\n{httr2} 1.1.0: Perform HTTP Requests and Process the Responses - diffify\n{qlcal} 0.0.14: R Bindings to the Calendaring Functionality of ‘QuantLib’ - diffify\n{sparsevctrs} 0.2.0: Sparse Vectors for Use in Data Frames - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nWe want GREAT tables! - Richard Iannone & Michael Chow - Data Science Hangout\nShiny Apps\nFrom Code to Compliance: Validated Shiny Apps with Rhino\nAcceptance Test-Driven Development with Shiny\nHow to configure your shiny app content from a remote JSON file\nTutorials\n3MW (Turn Text Into Structured Data With R & LLMs)\nHow to Remove Rows in R: A Comprehensive Guide with Examples\nSeven tips for creating Quarto revealjs presentations\nDyson’s Algorithm: The General Case\nJust got a paper on conformal prediction REJECTED by International Journal of Forecasting despite evidence on 30,000 time series (and more). What’s going on? Part2: 1311 time series from the Tourism competition\nGuide to comparing sample and population proportions with CPS data, both classically and Bayesianly: Download CPS demographic data from IPUMS and use R and {brms} to calculate differences between sample and national proportions with Bayesian ROPE-based inference\n\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpdates from the R Contribution Working Group (RCWG):\nAnnouncing R Dev Day @ Rencontres R 2025: University of Mons, Belgium, Thursday 22 May, 09:00-17:00 CEST. Join us to work on contributions to the code, documentation and translations in base R. Free and open registration, deadline Friday 18 April.\nCall for Participation\nShinyConf 2025 Registration and Call for Proposals are open!\nApply to be an Opportunity Scholar at posit::conf(2025)\nCoworking Mini-Hackathon for First-Time Contributors\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nTabular ML in R: an overview of tidymodels in R for tabularized data workshop\nDatasets\n{setariaviridis} 0.1.0: Field-Collected Data of Green Foxtail\nConnect\nJoin the Data Science Learning Community\ntidymodels Internship for 2025",
      "link": "https://rweekly.org//2025-W05.html",
      "pubDate": "Tue, 28 Jan 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/236/",
      "title": "The Real Python Podcast – Episode #236: Simon Willison: Using LLMs for Python Development",
      "description": "What are the current large language model (LLM) tools you can use to develop Python? What prompting techniques and strategies produce better results? This week on the show, we speak with Simon Willison about his LLM research and his exploration of writing Python code with these rapidly evolving tools.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/236/",
      "pubDate": "2025-01-24T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/exploring-tuple-data-type-examples/",
      "title": "Exploring Python's tuple Data Type With Examples",
      "description": "In Python, a tuple is a built-in data type that allows you to create immutable sequences of values. The values or items in a tuple can be of any type. This makes tuples pretty useful in those situations where you need to store heterogeneous data, like that in a database record, for example.\nThrough this tutorial, you’ll dive deep into Python tuples and get a solid understanding of their key features and use cases. This knowledge will allow you to write more efficient and reliable code by taking advantage of tuples.\nIn this video course, you’ll learn how to:\nCreate tuples in Python\nAccess the items in an existing tuple\nUnpack, return, copy, and concatenate tuples\nReverse, sort, and traverse existing tuples\nExplore other features and common gotchas of tuples\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/exploring-tuple-data-type-examples/",
      "pubDate": "2025-01-21T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/quizzes/how-to-deal-with-missing-data-in-polars/",
      "title": "Quiz: How to Deal With Missing Data in Polars",
      "description": "In this quiz, you’ll test your understanding of\nHow to Deal With Missing Data in Polars.\nBy working through the questions, you’ll review your understanding of dealing with null values in Polars and also expand on what you learned in the tutorial.\nYou’ll need to do some research outside of the tutorial to answer all the questions. Embrace this challenge and let it take you on a learning journey.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/quizzes/how-to-deal-with-missing-data-in-polars/",
      "pubDate": "2025-01-21T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W04.html",
      "title": "R Weekly 2025-W04 flowcharts, data.table entry points, surface brain data",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Ryo Nakagawara, with help from the R Weekly team members and contributors.\nHighlight\nFlowcharts made easy with the package {flowchart}\nUse of non-API entry points in data.table\nIntro to working with volume and surface brain data \nInsights\nTransforming Academic Research with R in Santa Rosa, Argentina\n2024 Posit Year in Review\nSome R Conferences for 2025\nUse of non-API entry points in data.table\nUser-Friendly Technical Cookbook-Style CRAN Guide for New R Programmers Ready\nR in the Real World\nIntro to working with volume and surface brain data \n\nR in Academia\nstana: an R package for metagenotyping analysis and interactive application based on clinical data\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{windfarmGA} 4.0.0: Genetic Algorithm for Wind Farm Layout Optimization\n{tidyfit} 0.7.3: Regularized Linear Modeling with Tidy Data\n{unhcrdown} 0.6.0: UNHCR Branded Templates for R Markdown Documents\n{veesa} 0.1.6: Pipeline for Explainable Machine Learning with Functional Data\n{rtables.officer} 0.0.2: Exporting Tools for ‘rtables’\n{MonotonicityTest} 1.0: Nonparametric Bootstrap Test for Regression Monotonicity\n{zephyr} 0.1.0: Structured Messages and Options\n{chartreview} 1.0: Adaptive Multi-Wave Sampling for Efficient Chart Validation\n{SeedMaker} 1.0.0: Generate a Collection of Seeds from a Single Seed\n{duet} 0.1.1: Analysing Non-Verbal Communication in Dyadic Interactions from\nVideo Data\n{smer} 0.0.1: Sparse Marginal Epistasis Test\n{SiFINeT} 1.13: Single Cell Feature Identification with Network Topology\n{qmj} 0.2.1: Quality Scores for the Russell 3000\n{sgapi} 1.0.3: Aid Querying ‘nomis’ and ‘Office for National Statistics Open\nGeography’ APIs\n{hhmR} 0.0.1: Hierarchical Heatmaps\n{pudu} 0.1.0: C++ Tools for Cleaning Strings\n{ggstackplot} 0.4: Create Overlapping Stacked Plots\n{bitstreamio} 0.1.0: Read and Write Bits from Files, Connections and Raw Vectors\n{BIS} 0.4: Programmatic Access to Bank for International Settlements Data\n{PLStests} 0.1.0: Model Checking for High-Dimensional GLMs via Random Projections\n{OpenRange} 0.0.1: Code to Access Open Access Species Range Maps\n{theorytools} 0.1.0: FAIR Theory Construction\n{pam} 1.0.1: Fast and Efficient Processing of PAM Data\n{ggmapcn} 0.1.2: Customizable China Map Visualizations\n{sequenceR} 1.0.1: A Simple Sequencer for Data Sonification\n{dfeR} 1.0.1: Common Department for Education Analysis Tasks\n{bnns} 0.1.2: Bayesian Neural Network with ‘Stan’\n{soilassessment} 0.3.0: Soil Health Assessment Models for Assessing Soil Conditions and\nSuitability\n{quickPWCR} 1.2: Quickly Construct and Rate Large Binary Pairwised Comparisons\n{maraca} 0.7.1: The Maraca Plot: Visualizing Hierarchical Composite Endpoints\n{dietr} 1.1.6: Diet Estimated Trophic Levels\n{bitstreamio} 0.1.0: Read and Write Bits from Files, Connections and Raw Vectors\n{pam} 1.0.1: Fast and Efficient Processing of PAM Data\n{parttree} 0.1.0: Visualize Simple 2-D Decision Tree Partitions\n\nGitHub or Bitbucket\n{susR} 0.0.2: Interface for Accessing the Open Data of Slovak Statistical Office via API\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppFastFloat 0.0.5 on CRAN: New Upstream, Updates\nRProtoBuf 0.4.23 on CRAN: Mulitple Updates\n{colorrepel} 0.4.1: Repel Visually Similar Colors for Colorblind Users in Various\nPlots - diffify\n{rlang} 1.1.5: Functions for Base Types and Core R and ‘Tidyverse’ Features - diffify\n{soilDB} 2.8.7: Soil Database Interface - diffify\n{pak} 0.8.0.1: Another Approach to Package Installation - diffify\n{gridpattern} 1.3.1: ‘grid’ Pattern Grobs - diffify\n{raster} 3.6-31: Geographic Data Analysis and Modeling - diffify\n{bit64} 4.6.0-1: A S3 Class for Vectors of 64bit Integers - diffify\n{unhcrthemes} 0.6.3: UNHCR ‘ggplot2’ Theme and Colour Palettes - diffify\n{VisitorCounts} 2.0.3: Modeling and Forecasting Visitor Counts Using Social Media - diffify\n{accessr} 1.1.1: Command Line Tools to Produce Accessible Documents using ‘R\nMarkdown’ - diffify\n{Factoshiny} 2.7: Perform Factorial Analysis from ‘FactoMineR’ with a Shiny\nApplication - diffify\n{funkyheatmap} 0.5.1: Generating Funky Heatmaps for Data Frames - diffify\n{ggsem} 0.2.1: Interactively Visualize Structural Equation Modeling Diagrams - diffify\n{colorSpec} 1.6-0: Color Calculations with Emphasis on Spectral Data - diffify\n{streamDAG} 1.5-9: Analytical Methods for Stream DAGs - diffify\n{Rfast} 2.1.4: A Collection of Efficient and Extremely Fast R Functions - diffify\n{ssdtools} 2.2.0: Species Sensitivity Distributions - diffify\n{geomtextpath} 0.1.5: Curved Text in ‘ggplot2’ - diffify\n{parameters} 0.24.1: Processing of Model Parameters - diffify\n{mlr3verse} 0.3.1: Easily Install and Load the ‘mlr3’ Package Family - diffify\n{hommel} 1.8: Methods for Closed Testing with Simes Inequality, in Particular\nHommel’s Method - diffify\n{fusen} 0.7.0: Build a Package from Rmarkdown Files - diffify\n{fdacluster} 0.4.1: Joint Clustering and Alignment of Functional Data - diffify\n{praatpicture} 1.4.0: ‘Praat Picture’ Style Plots of Acoustic Data - diffify\n{shinyStorePlus} 1.4: Secure in-Browser and Database Storage for ‘shiny’ Inputs,\nOutputs, Views and User Likes - diffify\n{worldmet} 0.9.9: Import Surface Meteorological Data from NOAA Integrated Surface\nDatabase (ISD) - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nUnleash GIS Power: Create Jaw-Dropping REM Maps with Lidar Data in R!\nShiny Apps\nShare Your Shiny Expertise at ShinyConf 2025!\nPorting a Shiny App to Observable Framework: Part 1\nTutorials\nFitting TabPFN models in R using reticulate\nFlowcharts made easy with the package {flowchart}\n\n3MW (Using AI Functions With R & {ellmer})\nEfficient CI/CD: Balancing Automation with GxP Compliance\nSending e-mails with {blastula}\nBilingual Bluesky Sentiment\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\n116th Tokyo.R User Meetup\nConnect\nJoin the Data Science Learning Community\ntidymodels Internship for 2025\nrtistry\nDay 17 of #genuary, Inspired by Islamic art\n\n#RStats code: github.com/gkaramanis/a...\n\n#genuary2024 #genuary17 #rtistry\n[image or embed]\n— Georgios Karamanis (@karaman.is) January 18, 2024 at 4:23 AM\n\n\n\nGenuary 2025 Day 19: Op Art. 🎨\n\n#Genuary #Genuary2025 #RStats #Rtistry #GenerativeArt #Genuary19\n[image or embed]\n— Nicola Rennie (@nrennie.bsky.social) January 19, 2025 at 7:17 PM\n\n\n\nExactly forty two lines of code.\n\nA secret code?  A doctors notes?  Or a hastily repurposed asemic writing system?  Who knows.\n\nWith 42 of the hackiest lines of #rstats  code used to make it. gist.github.com/georgemsavva...\n\n#genuary3 #genuary2025  #genuary #mathart #rtistry #asemicwriting\n[image or embed]\n— George Savva (@georgemsavva.bsky.social) January 4, 2025 at 6:04 AM\n\n\nQuotes of the Week\nI'm just saying this is syntatically correct #rstats code\n[image or embed]\n— Robert (Bob) Kubinec (@rmkubinec.bsky.social) January 17, 2025 at 1:38 AM\n\n\n\n#dataviz A customized grid pattern in #ggplot2 using {geofacet} to mimic approx. geogrpahic locations of entities. \nData: @openstreetmap @india_soi \nFull code 🔗 https://t.co/FA7OnxBSHP\nTools #rstats #sf #ggplot2 #geofacet by @hafenstats pic.twitter.com/kI9lRIJnYC\n— Aditya Dahiya (@AdityaDahiyaIAS) January 19, 2025\n\n\n\nDo you have more than one column that uniquely identifies rows in your data?\n\nFor example,\n- ID + Time\n- First Name + Last Name\n\nNo problem, you can easily join data using multiple columns in #rstats, even if those columns have different names across datasets.\ncghlewis.com/blog/joins/\n[image or embed]\n— Crystal Lewis (@cghlewis.bsky.social) January 18, 2025 at 10:43 PM",
      "link": "https://rweekly.org//2025-W04.html",
      "pubDate": "Tue, 21 Jan 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/235/",
      "title": "The Real Python Podcast – Episode #235: Principles for Considering Your Python Tooling",
      "description": "What are the principles you should consider when making decisions about which Python tools to use? What anti-patterns get in the way of making the right choices for your team? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/235/",
      "pubDate": "2025-01-17T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/building-dictionary-comprehensions/",
      "title": "Building Dictionary Comprehensions in Python",
      "description": "Dictionary comprehensions are a concise and quick way to create, transform, and filter dictionaries in Python. They can significantly enhance your code’s conciseness and readability compared to using regular for loops to process your dictionaries.\nUnderstanding dictionary comprehensions is crucial for you as a Python developer because they’re a Pythonic tool for dictionary manipulation and can be a valuable addition to your programming toolkit.\nIn this video course, you’ll learn how to:\nCreate dictionaries using dictionary comprehensions\nTransform existing dictionaries with comprehensions\nFilter key-value pairs from dictionaries using conditionals\nDecide when to use dictionary comprehensions\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/building-dictionary-comprehensions/",
      "pubDate": "2025-01-14T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2025-W03.html",
      "title": "R Weekly 2025-W03 Bluesky, colours in R and Azure OpenAI",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nHappy New Year! Welcome to our first issue of 2025. This week’s content was curated by Batool Almarzouq, with support from our amazing R Weekly team members and contributors. Happy reading!\nHighlight\nBluesky conversation analysis with local and frontier LLMs with R/Tidyverse.\nWorking with colours in R\nHarnessing Azure OpenAI and R for Web Content Summarisation: A Practical Guide with rvest and tidyverse\nInsights\nRevisiting depression incidence by county and vote for Trump by @ellis2013nz\n\nBluesky conversation analysis with local and frontier LLMs with R/Tidyverse.\nStrategic Investment Analysis: Key Questions Generated by DoTadda’s Knowledge Platform\n\nR in the Real World\nInfodemiology & Health Insights: Analyzing Trends in Back Pain using R & Google Trends data\nWhat region is Pittsburgh in? Unsupervised learning with spatially constrained clustering.\nR in Academia\nNew Paper: Towards a Generative Model of Emotion Dynamics\nResources\nReposting Partial Pooling\nWebsite for tidyplots use cases, complete with data and code\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{CMHSU} 0.0.6.9: Mental Health Status, Substance Use Status and their Concurrent\nStatus in North American Healthcare Administrative Databases\n{BerkeleyForestsAnalytics} 2.0.4: Compute and Summarize Core Forest Metrics from Field Data\n{S4DM} 0.0.1: Small Sample Size Species Distribution Modeling\n{linevis} 1.0.0: Interactive Time Series Visualizations\n{geneviewer} 0.1.10: Gene Cluster Visualizations\n\n{jetty} 0.1.0: Execute R in a ‘Docker’ Context\n{ColombiAPI} 0.1.0: Access Colombia’s Public Data via ‘API-Colombia’\n{collett} 0.1.0: Datasets from “Modelling Survival Data in Medical Research” by\nCollett\n{pacta.multi.loanbook} 0.1.1: Run ‘PACTA’ on Multiple Loan Books Easily\n{ellmer} 0.1.0: Chat with Large Language Models\n{drone} 1.0.0: Data for Data Visualisation Geometries Encyclopedia\n{tidyprompt} 0.0.1: Prompt Large Language Models and Enhance Their Functionality\n{epiparameter} 0.4.0: Classes and Helper Functions for Working with Epidemiological\nParameters\n{Certara.RsNLME.ModelExecutor} 3.0.1: Execute Pharmacometric Models Using ‘shiny’\n{ritalic} 0.10.1: Interface to the ITALIC Database of Lichen Biodiversity\nGitHub or Bitbucket\n{th2analytics} 0.0.1 thaink² analytics SDK forecasting as a service\n{mapmetadata} 3.0.0: Mapping from variables to concepts\n\nUpdated Packages\n🔍 Search on R-universe 🔍\nAnother season, another release. {survivoR} v2.3.5 now on CRAN\nnanotime 0.3.11 on CRAN: Polish\ninline 0.3.21: Minor Polish\nRcppGetconf 0.0.4 on CRAN: Updates\n{makepipe} 0.2.2: Pipeline Tools Inspired by ‘GNU Make’ - NEWS, - diffify\n{ggiraph} 0.8.12: Make ‘ggplot2’ Graphics Interactive - diffify\n\n{BioVizSeq} 1.0.1: Visualizing the Elements Within Bio-Sequences - diffify\n{cnum} 0.1.4: Chinese Numerals Processing - diffify\n{tabula} 3.2.0: Analysis and Visualization of Archaeological Count Data - diffify\n{DEPONS2R} 1.2.5: Read, Plot and Analyse Output from the DEPONS Model - diffify\n{syllogi} 1.0.4: Collection of Data Sets for Teaching Purposes - diffify\n{rgoogleads} 0.12.0: Loading Data from ‘Google Ads API’ - diffify\n{onemap} 3.2.0: Construction of Genetic Maps in Experimental Crosses - diffify\n{khroma} 1.15.0: Colour Schemes for Scientific Data Visualization - diffify\n{forestly} 0.1.2: Interactive Forest Plot - diffify\n{ruminate} 0.3.1: A Pharmacometrics Data Transformation and Analysis Tool - diffify\n{BiodiversityR} 2.17-1: Package for Community Ecology and Suitability Analysis - diffify\n{datawizard} 1.0.0: Easy Data Wrangling and Statistical Transformations - diffify\n{rix} 0.14.3: Reproducible Data Science Environments with ‘Nix’ - diffify\n{rtables} 0.6.11: Reporting Tables - diffify\n{collapse} 2.0.19: Advanced and Fast Data Transformation - diffify\n{plotthis} 0.5.0: High-Level Plotting Built Upon ‘ggplot2’ and Other Plotting\nPackages - diffify\n{colourvision} 2.1.0: Colour Vision Models - diffify\n{dpkg} 0.6.1: Create, Stow, and Read Data Packages - diffify\n{plotmm} 0.1.2: Tidy Tools for Visualizing Mixture Models - diffify\n{ggspectra} 0.3.15: Extensions to ‘ggplot2’ for Radiation Spectra - diffify\n{jsmodule} 1.6.1: ‘RStudio’ Addins and ‘Shiny’ Modules for Medical Research - diffify\n{jskm} 0.5.8: Kaplan-Meier Plot with ‘ggplot2’ - diffify\n{tidyterra} 0.6.2: ‘tidyverse’ Methods and ‘ggplot2’ Helpers for ‘terra’ Objects - diffify\n\n{ggbreak} 0.1.3: Set Axis Break for ‘ggplot2’ - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nR Internationally\nGenocidio en Palestina 🍉\nTutorials\nHarnessing Azure OpenAI and R for Web Content Summarisation: A Practical Guide with rvest and tidyverse\nSetting values in R6 classes, and testing with shiny::MockShinySession\nLittle useless-useful R functions – QR-Code Clock\nLittle useless-useful R functions – Vanishing sentences\nSome of the more useful Tidyverse functions\nR and Python Together: Refactoring and Prompt Engineering A Previous Case Study, Using the Perplexity API\nSetting values in R6 classes, and testing with shiny::MockShinySession\nWorking with colours in R\n\nHow to Create an Empty Matrix in R: A Comprehensive Guide\n\nHow to Create an Empty Data Frame in R: A Comprehensive Guide with Examples\nHow to Remove Rows with Any Zeros in R: A Complete Guide with Examples\nHow to Transpose Data Frames in R: Complete Guide with Examples\nReflecting on the Past Year: A LinkedIn Year in Review (2024)\nRounding Numbers in R with Examples: A Comprehensive Guide\nComprehensive Guide to Arcsine Transformation in R with Examples\n3MW (Adding Async Streams to Our Shiny Chat Bot)\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nDay 6 of #genuary, Make a landscape using only primitive shapes#Rstats code: https://t.co/gXP1HZ8hOW#genuary6 #genart pic.twitter.com/b5esNUjoXv\n— Georgios Karamanis (@geokaramanis) January 7, 2025\n\n\n\nToday's artwork generated with #rstats and #ggplot2: pic.twitter.com/yFney62N6L\n— aRtsy package (@aRtsy_package) January 13, 2025\n\n\nQuotes of the Week\nPlease, if you have an idea for a package, just write it and publish it on CRAN. The availability of high quality packages are one of #RStats greatest strengths, just package stuff please pic.twitter.com/dY3JhKdDUr\n— Bruno Rodrigues (@brodriguesco@fosstodon.org) (@brodriguesco) January 10, 2025\n\n\n\n12 years. RIP my darling boy. pic.twitter.com/RFLpiwPqLP\n— Susan Swartz (@beadmomsw) January 11, 2025\n\n\n\n08.01.2025 📅 \nToday’s Quote: \n“It always seems impossible until it's done.” — Nelson Mandela pic.twitter.com/UMS6Q3yCPE\n— Hanwool Park (@hanwoolpark2426) January 8, 2025",
      "link": "https://rweekly.org//2025-W03.html",
      "pubDate": "Mon, 13 Jan 2025 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/234/",
      "title": "The Real Python Podcast – Episode #234: Building New Structures for Learning Python",
      "description": "What are the new ways we can teach and share our knowledge about Python? How can we improve the structure of our current offerings and build new educational resources for our audience of Python learners? This week on the show, Real Python core team members Stephen Gruppetta and Martin Breuss join us to discuss enhancements to the site and new ways to learn Python.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/234/",
      "pubDate": "2025-01-10T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/interactive-python/",
      "title": "Ways to Start Interacting With Python",
      "description": "There are multiple ways of interacting with Python, and each can be useful for different scenarios. You can quickly explore functionality in Python’s interactive mode using the built-in Read-Eval-Print Loop (REPL), or you can write larger applications to a script file using an editor or Integrated Development Environment (IDE).\nIn this video course, you’ll learn how to:\nUse Python interactively by typing code directly into the interpreter\nExecute code contained in a script file from the command line\nWork within a Python Integrated Development Environment (IDE)\nAssess additional options, such as Thonny and Python’s IDLE\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/interactive-python/",
      "pubDate": "2025-01-07T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/podcasts/rpp/233/",
      "title": "The Real Python Podcast – Episode #233: PyCoder's Weekly 2024 Top Articles & Missing Gems",
      "description": "PyCoder's Weekly included over 1,500 links to articles, blog posts, tutorials, and projects in 2024. Christopher Trudeau is back on the show this week to help wrap it all up by sharing some highlights and uncovering a few missing gems from the pile.\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/podcasts/rpp/233/",
      "pubDate": "2025-01-03T12:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://realpython.com/courses/django-rest-framework/",
      "title": "Building HTTP APIs With Django REST Framework",
      "description": "REST is a loosely defined protocol for listing, creating, changing, and deleting data on your server over HTTP. The Django REST framework (DRF) is a toolkit built on top of the Django web framework that reduces the amount of code you need to write to create REST HTTP API interfaces.\nIn this course you’ll learn about:\nThe REST protocol\nDRF Serializers and how to use them with Django objects\nUsing Django views and DRF ViewSet classes to create REST end-points\nMultiple flavors of renderers and how to control their output\nSpecifying permissions and limiting who can see what data in your REST API\n[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ]",
      "link": "https://realpython.com/courses/django-rest-framework/",
      "pubDate": "2024-12-31T14:00:00.000Z",
      "source": "Real Python",
      "sourceUrl": "https://realpython.com",
      "category": "Python"
    },
    {
      "id": "https://rweekly.org//2024-W52.html",
      "title": "R Weekly 2024-W52 Rlinguo, R for music, Shiny sprite randomiser",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Sam Parmar, with help from the R Weekly team members and contributors.\nHighlight\nIntroducing Rlinguo, a native mobile app that runs R\nWhy would I use R for music?\nA roguelike sprite randomiser with Shiny\nInsights\nIntroducing Rlinguo, a native mobile app that runs R\n\nWhy would I use R for music?\n\n#45: Some r-ci Updates\nIntegrating Machine Learning Models in Shiny\nHow to Use {renv} and Bioconductor for Reproducible Data Analysis\nPins in Databricks\nUse an LLM to translate help documentation on-the-fly\nUnified branding across Posit tools with brand.yml\nRStudio IDE and Posit Workbench 2024.12.0: What’s New\nThe Perplexed Banker\nBaby got backreferences\nR in Organizations\nAWS for Pharmaceutical and Life Science Companies: Guide for Directors\nSummary of 2024: Appsilon’s Focus on Life Sciences  🧬\nAnnouncing DevOps for Data Science by Alex Gold\nPosit’s pledge to support open source\nConnect Cloud moves into Beta with new features and subscription plans\nrOpenSci News Digest, December 2024\nIntroducing the rOpenSci Localization and Translation Guidelines\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nNovember 2024 Top 40 New CRAN Packages\n{ggtaxplot} 0.0.1: Create Plots to Visualize Taxonomy\n{ciphertext} 0.1.0: Classical Cryptography Methods for Words and Phrases\n{Certara.RsNLME.ModelBuilder} 3.0.1: Pharmacometric Model Building Using ‘shiny’\n{cpp11qpdf} 1.3.5: Split, Combine and Compress PDF Files\n{spanishoddata} 0.1.0: Get Spanish Origin-Destination Data\n{shinychat} 0.1.1: Chat UI Component for ‘shiny’\n{datacutr} 0.2.1: SDTM Datacut\n{colorfast} 1.0.0: Fast Conversion of R Colors to Color Component Values and Native Packed Integer Format\nGitHub or Bitbucket\n{oomph}\n{chesstrainer}\nUpdated Packages\n🔍 Search on R-universe 🔍\nBH 1.87.0-1 on CRAN: New Upstream\n{PSS.Health} 1.1.4: Power and Sample Size for Health Researchers via Shiny - diffify\n{climate} 1.2.2: Interface to Download Meteorological (and Hydrological) Datasets - diffify\n{tidyBdE} 0.3.8: Download Data from Bank of Spain - diffify\n{GHCNr} 1.0.0: Download Weather Station Data from GHCN - diffify\n{argparse} 2.2.5: Command Line Optional and Positional Argument Parser - diffify\n{logib} 0.2.0: Salary Analysis by the Swiss Federal Office for Gender Equality - diffify\n{aifeducation} 1.0.0: Artificial Intelligence for Education - diffify\n{gastempt} 0.7.0: Analyzing Gastric Emptying from MRI or Scintigraphy - diffify\n{openxlsx2} 1.12: Read, Write and Edit ‘xlsx’ Files - diffify\n{DrugUtilisation} 0.8.1: Summarise Patient-Level Drug Utilisation in Data Mapped to the\nOMOP Common Data Model - diffify\n{tidypredict} 0.5.1: Run Predictions Inside the Database - diffify\n{FaaSr} 1.4.3: FaaS (Function as a Service) Package - diffify\n{connectapi} 0.5.0: Utilities for Interacting with the ‘Posit Connect’ Server API - diffify\n{ggblanket} 11.1.0: Simplify ‘ggplot2’ Visualisation - diffify\n{survival} 3.8-3: Survival Analysis - diffify\n{aplot} 0.2.4: Decorate a ‘ggplot’ with Associated Information - diffify\n{tugboat} 0.1.1: Build a Docker Image from a Directory or Project - diffify\n{parabar} 1.4.2: Progress Bar for Parallel Tasks - diffify\n{card.pro} 2.2.1: Lightweight Modern & Responsive Card Component for ‘shiny’ - diffify\n{duckdbfs} 0.0.9: High Performance Remote File System, Database and ‘Geospatial’ Access Using ‘duckdb’ - diffify\n{super} 0.0.4: Interpreted String Literals - diffify\n{tidyplots} 0.2.0: Tidy Plots for Scientific Papers - diffify\n{xslt} 1.5.0: Extensible Style-Sheet Language Transformations - diffify\n{jqr} 1.4.0: Client for ‘jq’, a ‘JSON’ Processor - diffify\n{ggh4x} 0.3.0: Hacks for ‘ggplot2’ - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nAn Introduction to Survival Analysis in R with Emily Zabor\nShiny Apps\n2d-random-walk\ncentral-limit-theorem\nA roguelike sprite randomiser with Shiny\n\nTutorials\nLatent Growth Curve Models using the Lavaan Package in R workshop\nSatellite mapping of surface waters in R\nRObservations #50: a journey across the United States with {mapBliss}\nHow to Use complete.cases in R With Examples\nA Complete Guide to Using na.rm in R: Vector and Data Frame Examples\nHow to Use na.omit in R: A Comprehensive Guide to Handling Missing Values\n3MW (Nice Markdown Output for our AI chat bot)\nArt from code I: Generative art with R\nArt from code II. Spatial tricks with ambient\nArt from code III: Polygon tricks\nArt from code IV: Shading tricks\nArt from code V: Iterated function systems\nArt from code VI: Tiles and tessellations\nArt from code VII: Pixel filters\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\n  \n \nPost by @nrennie@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @coolbutuseless@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @tylermorganwall@fosstodon.org\n View on Mastodon\n  \n\n\nQuotes of the Week\n  \n \nPost by @colinfay@fosstodon.org\n View on Mastodon",
      "link": "https://rweekly.org//2024-W52.html",
      "pubDate": "Mon, 23 Dec 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W51.html",
      "title": "R Weekly 2024-W51 Signed Trinary, Async and Parallel, and Advent of Code",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Colin Fay, with help from the R Weekly team members and contributors.\nHighlight\nWriting Signed Trinary: or, Back To the Four Weights Problem\nParallel and Asynchronous Programming in Shiny with future, promise, future_promise, and ExtendedTask\nAdvent of Code with data.table: Week One\nInsights\nTurn a GitHub repo into a single text file for LLM-friendly input, with R and Python packages as examples\nParallel and Asynchronous Programming in Shiny with future, promise, future_promise, and ExtendedTask\nProblems with iconv on macOS\nThe most efficient way to manage snapshot tests in R.\nR in the Real World\nLime Bike Summary Stats Dashboard\nR in Organizations\nDiffify & Posit Package Manager\n#44: r2u For ML and MLops Talk\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppCCTZ 0.2.13 on CRAN: Maintenance\npinp 0.0.11 on CRAN: Maintenance\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nGist & Cookbook\n7 New Books added to Big Book of R [7/12/2024]\nTutorials\nHow to Use drop_na to Drop Rows with Missing Values in R: A Complete Guide\nHow to Select Row with Max Value in Specific Column in R: A Complete Guide\nHow to Find the Column with the Max Value for Each Row in R\n3MW (AI Chat-Bots With R, {shiny} & {elmer})\nWant to get code coverage report, but not share your private code with codecov.io? Use cobertura-action.\nAdvent of Code with data.table: Week One\nWriting Signed Trinary: or, Back To the Four Weights Problem\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community",
      "link": "https://rweekly.org//2024-W51.html",
      "pubDate": "Mon, 16 Dec 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W50.html",
      "title": "R Weekly 2024-W50 R-Universe Funding, Positron, AI for Shiny",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Eric Nantz, with help from the R Weekly team members and contributors.\nHighlight\nR-Universe Named R Consortium’s Newest Top Level Project\nPositron vs RStudio - is it time to switch?\nSummer is Coming: AI for Shiny, R, and Pharma\nInsights\nR-Universe Named R Consortium’s Newest Top Level Project\nPositron vs RStudio - is it time to switch?\nQuantitative Analysis: NVIDIA\nBachet’s Four Weights Problem\nposit::glimpse() Newsletter – December 2024\nR in the Real World\nPolitely mapping recommended travel vaccines\n\nModernizing Clinical Trial Design and Analysis to Improve Efficiency & Flexibility\n{SLmetrics}: Machine Learning performance evaluation on steroids\nPredicting Best Picture at the 2025 Academy Awards\nR in Organizations\nHow Good Automated Testing Supports GxP Compliance in Software Development\nGSK x Posit Live Event November 2024 Q&A\nR in Academia\nEmpowering Girls in Data Science: The R-Girls-School Network Initiative\nResources\nA Book Dash for the R Development Guide\nAdvent of Code with data.table: Week One\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nIntroducing the {messy} package\nIntroducing {samplezoo}\n{tablespan} 0.1.7: Create Satisficing ‘Excel’, ‘HTML’, ‘LaTeX’, and ‘RTF’ Tables using a Simple Formula\n{qcluster} 1.2: Clustering via Quadratic Scoring\n{PhenotypeR} 0.1.0: Assess Study Cohorts Using a Common Data Model\n{sooty} 0.1.0: Data Source Catalogues Online for Southern Ocean Ecosystem Research\n{robqda} 1.0: Robust Quadratic Discriminant Analysis\n{RegDDM} 1.0: Generalized Linear Regression with DDM\n{rectpacker} 1.0.0: Rectangle Packing\n\n{recforest} 1.0.0: Random Survival Forest for Recurrent Events\n{RapidFuzz} 1.0: String Similarity Computation Using ‘RapidFuzz’\n{mixedbiastest} 0.2.1: Bias Diagnostic for Linear Mixed Models\n{MIGEE} 0.1.0: Impute Missing Values and Fitting Linear Mixed Effect Model\n{iclogcondist} 1.0.1: Log-Concave Distribution Estimation with Interval-Censored Data\n{GVS} 0.0.1: ‘Geocoordinate Validation Service’\n{GOLDprice} 0.1.0: Gold Price Data\n{GDILM.SEIRS} 0.0.1: Spatial Individual Level Modeling of Infectious Disease Transmission with Reinfection Dynamics\n{ErlangC} 0.1.0: Solve Erlang-C Model\n{educationR} 0.1.0: A Comprehensive Collection of Educational Datasets\n{drhutools} 1.0.0: Political Science Academic Research Gears\n{BayesianFitForecast} 1.0.0: Bayesian Parameter Estimation and Forecasting for Epidemiological Models\n{airship} 1.4.3: Visualization of Simulated Datasets with Multiple Simulation\nInput Dimensions\n{wooldridge} 1.4-4: 115 Data Sets from “Introductory Econometrics: A Modern\nApproach, 7e” by Jeffrey M. Wooldridge\n{iClusterVB} 0.1.3: Fast Integrative Clustering and Feature Selection for High\nDimensional Data\n{aphylo} 0.3-4: Statistical Inference and Prediction of Annotations in Phylogenetic Trees\n{extractox} 0.1.0: Extract Tox Info from Various Databases\n{csmGmm} 0.3.0: Conditionally Symmetric Multidimensional Gaussian Mixture Model\n{basicspace} 0.25: Recovering a Basic Space from Issue Scales\n{sshicm} 0.1.0: Information Consistency-Based Measures for Spatial Stratified Heterogeneity\n{resourcecode} 0.2.1: Access to the ‘RESOURCECODE’ Hindcast Database\n{RCNA} 1.0: Robust Copy Number Alteration Detection (RCNA)\n{gtfs2emis} 0.1.1: Estimating Public Transport Emissions from General Transit Feed Specification (GTFS) Data\n{atime} 2024.11.29: Asymptotic Timing\n{wdiEF} 1.0.2: Calculation of the Water Deficit Index (WDI) and the Evaporative Fraction (EF) on Rasters\n{twc} 0.0.1: Terrestrial Water Cycle\n{sffdr} 1.0.0: Surrogate Functional False Discovery Rates for Genome-Wide Association Studies\n{scR} 0.1.0: Estimate Vapnik-Chervonenkis Dimension and Sample Complexity\n{SAKERNAS} 0.1.0: A National Labor Force Survey of Indonesia\n{RCMsize} 1.0.0: Sample Size Calculation in Reversible Catalytic Models\n{pipeflow} 0.2.1: Lightweight, General-Purpose Data Analysis Pipelines\n{MEDesigns} 1.0.0: Mating Environmental Designs\n{ldmppr} 1.0.3: Estimate and Simulate from Location Dependent Marked Point Processes\n{ILRCM} 0.1.0: Convert Irregular Longitudinal Data to Regular Intervals and Perform Clustering\n{IDLFM} 0.0.2: Individual Dynamic Latent Factor Model\n{gfoRmulaICE} 0.1.0: Parametric Iterative Conditional Expectation G-Formula\n{crimedatasets} 0.1.0: A Comprehensive Collection of Crime-Related Datasets\n{orthGS} 0.1.6: Orthology vs Paralogy Relationships among Glutamine Synthetase from Plants\n{antaresViz} 0.18.3: Antares Visualizations\nGitHub or Bitbucket\nfroggeR - Enhance Quarto project workflows and standards\npeeky - Download and extract Shinylive applications\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppArmadillo 14.2.2-1 on CRAN: Small Upstream Fixes\ncorels 0.0.5 on CRAN: Maintenance\nanytime 0.3.10 on CRAN: Multiple Enhancements\n{crandep} 0.3.11: Network Analysis of Dependencies of CRAN Packages - diffify\n{sfnetworks} 0.6.5: Tidy Geospatial Networks - diffify\n{rstanemax} 0.1.7: Emax Model Analysis with ‘Stan’ - diffify\n{rollama} 0.2.0: Communicate with ‘Ollama’ to Run Large Language Models Locally - diffify\n{textshaping} 0.4.1: Bindings to the ‘HarfBuzz’ and ‘Fribidi’ Libraries for Text\nShaping - diffify\n{shinyStorePlus} 1.3: Secure in-Browser and Database Storage for ‘shiny’ Inputs, Outputs, Views and User Likes - diffify\n{rpostgis} 1.6.0: R Interface to a ‘PostGIS’ Database - diffify\n{cowsay} 1.0.0: Messages, Warnings, Strings with Ascii Animals - diffify\n\n{geostan} 0.8.1: Bayesian Spatial Analysis - diffify\n{pharmr} 1.4.0: Interface to the ‘Pharmpy’ ‘Pharmacometrics’ Library - diffify\n{parallelly} 1.40.1: Enhancing the ‘parallel’ Package - diffify\n{simdata} 0.4.1: Generate Simulated Datasets - diffify\n{bit} 4.5.0.1: Classes and Methods for Fast Memory-Efficient Boolean Selections - diffify\n{mongolite} 2.8.2: Fast and Simple ‘MongoDB’ Client for R - diffify\n{apache.sedona} 1.7.0: R Interface for Apache Sedona - diffify\n{container} 1.0.5: Extending Base ‘R’ Lists - diffify\n{fastplyr} 0.5.0: Fast Alternatives to ‘tidyverse’ Functions - diffify\nVideos and Podcasts\nSummer is Coming: AI for Shiny, R, and Pharma\nDuckDB and duckplyr: An in-process database management system in your R script\nExplore Real-World hospital Electronic Health Records data with {ggehr}\nA Tour of the Haunted Places Quiz Shiny App\nListen to the R-Weekly Highlights Podcast\nShiny Apps\ntargetsboard - A GUI to {targets}\nR Sidebot: How to Add an LLM Assistant to Your R Shiny Apps\nWhich Library Should You Choose To Acceptance Test Shiny Apps?\nTutorials\nUse meta shortcode variables with Quarto Includes to insert precise content\nPosting to Bluesky from R\nApple Music Wrapped with R\n\nSpatial correlation between rasters using ‘terra’\n\nHow to Find Columns with All Missing Values in Base R\nHow to Find and Count Missing Values in R: A Comprehensive Guide with Examples\nHow to Replace Missing Values in R: A Comprehensive Guide\n3MW (Chatting with LLMs With R & {elmer})\nTime Series Forecasting in R: Forecasting with Supervised Machine Learning Models\n\n-->\n\nR Project Updates\nUpdates from R Core:\nFaster downloads\nCall for Participation\nposit::conf(2025) in-person registration is now open!\nShinyConf 2025 Call for Speakers\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nDay 30: The Final Map! 🐍 Rattlesnake venom lectin (1muq), a galactose-specific C-type lectin, visualized in 3D. Went deep into micromapping, and it paid off! Big thanks to \n & the {raymolecule} R package. #30DayMapChallenge #Micromapping 🧬✨\n[image or embed]\n— Brooks Groves (@bdgroves.bsky.social) December 6, 2024 at 7:27 PM\n\n\n  \n \nPost by @unicornCoder@fosstodon.org\n View on Mastodon\n  \n\n\nQuotes of the Week\nWhat is the most annoying thing in R? I will go first - functions with upper case letters, such as the View function 🤦🏻‍♂️\n\n#RStats\n— Rami Krispin (@ramikrispin.bsky.social) December 2, 2024 at 5:27 PM\n\n\n  \n \nPost by @tylermorganwall@fosstodon.org\n View on Mastodon\n  \n\n\n\nJust realized the bluesky may not be aware that you can access dad jokes (via the icanhazdadjoke API) directly in #rstats with the {dadjokeapi} 📦!\n[image or embed]\n— Jeff Hollister (@jhollist.bsky.social) December 5, 2024 at 7:42 AM",
      "link": "https://rweekly.org//2024-W50.html",
      "pubDate": "Mon, 09 Dec 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W49.html",
      "title": "R Weekly 2024-W49 Thanking, Interpolating, Predicting",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Carroll, with help from the RWeekly team members and contributors.\nHighlight\nGive Thanks with the allcontributors Package\nHow to Interpolate Missing Values in R: A Step-by-Step Guide with Examples\nPredicting NBA Score Plays - Steph Curry Shots\nInsights\nThese Languages are Accumulating\nSimulating Ponzi schemes by @ellis2013nz\nGive Thanks with the allcontributors Package\nExamining Meta-Analysis\nSpilhaus\nPesticides\nHow to Interpolate Missing Values in R: A Step-by-Step Guide with Examples\nMastering String Comparison in R: 3 Essential Examples and Bonus Tips\nDeleting Multiple Columns in R: A Step-by-Step Guide for Data Frame Manipulation\n3MW (Using Local LLMs With R & ollama)\nOptimizing R/Shiny App Performance with Advanced Caching Techniques\nTIL: dplyr::mutate()’s .keep argument\nR in the Real World\nPredicting NBA Score Plays - Steph Curry Shots\n\nR in Organizations\nrOpenSci News Digest, November 2024\nR in Academia\nStatistical Computing Approaches to Maximum Likelihood Estimation\nR Adjacent\nxkcd and Data Science\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nOctober 2024: Top 40 New CRAN Packages\nCRAN\n{PaRe} 0.1.14: A Way to Perform Code Review or QA on Other Packages\n{tern.rbmi} 0.1.4: Create Interface for ‘RBMI’ and ‘tern’\n{ClinTrialPredict} 0.0.4: Predicting and Simulating Clinical Trial with Time-to-Event Endpoint\n{scatterbar} 0.1.0: Scattered Stacked Bar Chart Plots\n\nGitHub\n{insitu} 0.1.3.9008\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppAPT 0.0.10: Maintenance\n{geotargets} 0.2.0\n{surveydown} 0.5.1: Markdown-Based Surveys Using ‘Quarto’ and ‘shiny’ - diffify\n{RcppAPT} 0.0.10: ‘Rcpp’ Interface to the APT Package Manager - diffify\n{ggtangle} 0.0.5: Draw Network with Data - diffify\n{isocountry} 0.3.0: ISO 3166-1 Country Codes - diffify\n{callme} 0.1.11: Easily Compile and Call Inline ‘C’ Functions - diffify\n{promises} 1.3.2: Abstractions for Promise-Based Asynchronous Programming - diffify\n{jlme} 0.4.1: Regression Modelling with ‘GLM.jl’ and ‘MixedModels.jl’ in ‘Julia’ - diffify\n{httr2} 1.0.7: Perform HTTP Requests and Process the Responses - diffify\n{handwriter} 3.2.3: Handwriting Analysis in R - diffify\n{ymd} 0.1.4: Parse ‘YMD’ Format Number or String to Date - diffify\n{gameR} 0.0.7: Color Palettes Inspired by Video Games - diffify\n{AIscreenR} 0.1.1: AI Screening Tools in R for Systematic Reviewing - diffify\n{ctv} 0.9-6: CRAN Task Views - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\n  \n \nPost by @unicornCoder@fosstodon.org\n View on Mastodon\n  \n\n\nQuotes of the Week\n  \n \nPost by @coatless@mastodon.social\n View on Mastodon",
      "link": "https://rweekly.org//2024-W49.html",
      "pubDate": "Mon, 02 Dec 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W48.html",
      "title": "R Weekly 2024-W48 Native Mobile Apps, Bluesky Network, Re-imagining read_csv",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Tony ElHabr, with help from the R Weekly team members and contributors.\nHighlight\nYou’ve Been Waiting for Native Mobile Apps with R? The Wait Is Over.\nExpand your Bluesky network with R and the atrrr package\nS7 & Options objects - reimagining readr::read_csv()\nInsights\nExpand your Bluesky network with R and the atrrr package\n\nS7 & Options objects - reimagining readr::read_csv()\n3MW (5 Lessons For Getting Better At Programming)\nSo Your Team Needs Help with R Shiny - What are Your Options?\nR in the Real World\nSpotify Wrapped: R and ggplot2 Edition - code\n\nYou’ve Been Waiting for Native Mobile Apps with R? The Wait Is Over.\nMapping the Vendée Globe\nSummarising Top 100 UK Climbs: Running Local Language Models with LM Studio and R\nR in Organizations\nUsing LLM agents to review tutorials ‘in character’ as learners\nR in Academia\nA new topic model for analyzing imbalanced corpora\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{tsmarch} 1.0.0: Multivariate ARCH Models\n{roxy.shinylive} 1.0.0: A ‘roxygen2’ Extension for ‘Shinylive’\n{kendallknight} 0.4.0: Efficient Implementation of Kendall’s Correlation Coefficient Computation\n{talkr} 0.1.3: Plotting Conversation Data\n{effectplots} 0.1.0: Effect Plots\nUpdated Packages\n🔍 Search on R-universe 🔍\n{tinytable} 0.6.1: Simple and Configurable Tables in ‘HTML’, ‘LaTeX’, ‘Markdown’, ‘Word’, ‘PNG’, ‘PDF’, and ‘Typst’ Formats - diffify\n{ggiraph} 0.8.11: Make ‘ggplot2’ Graphics Interactive - diffify\n{duckdb} 1.1.3: DBI Package for the DuckDB Database Management System - diffify\n{tidyvpc} 1.5.2: VPC Percentiles and Prediction Intervals - diffify\n{targets} 1.9.0: Dynamic Function-Oriented ‘Make’-Like Declarative Pipelines - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nSignature.py: Award-Winning Application at the 2024 Shiny Contest\nTutorials\nRandom Effects and Overdispersion\nRandom effect priors, redo\n\n100 Bushels of Corn, Revisited\nHow to Make Data Validation Easy in R/Shiny with pointblank\nRStudio Addin 101 for beginners\nIndia\nBike accidents\nHow to Compare Two Columns in R: A Comprehensive Guide with Examples\nHow to Compare Two Vectors in base R With Examples\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\n2024-12-19 - Crafting Custom and Reproducible PDF Reports with Quarto and Typst in R workshop\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nThe EU only with letters. 🅰️🅱️©️ 🇪🇺\n#30DayMapChallenge Day 19 Typography #rstats #maps\n[image or embed]\n— Ansgar Wolsing (@ansgarw.bsky.social) November 19, 2024 at 5:00 AM\n\n\n\n💨Winds of November in Europe! My latest map shows average wind speeds and directions sweeping across the continent this month, brought to life with data from the Climate Data Store\n\nWatch this video and start making your wind maps:\nyoutu.be/d8VZMjhBFwE\n\n#dataviz #maps #wind #rstats\n[image or embed]\n— milos makes maps (@milos-makes-maps.bsky.social) November 24, 2024 at 4:17 AM\n\n\nQuotes of the Week\nTangential: I just learned about the row_number() function from @jofrhwld.bsky.social‬'s blog post. And all this time I've been using 1:n() like a total sucker. The other parts of the blog post are cool, too. #Rstats\n[image or embed]\n— Solomon Kurz (@solomonkurz.bsky.social) November 21, 2024 at 10:42 AM\n\n\n\nStirring the pot this morning: #rstats crowd, which do you prefer?\n\ndf3 <- df1 |>\n  left_join(df2)\n\nOR\n\ndf3 <- left_join(df1, df2)\n— Spencer Schien (@mrpecners.bsky.social) November 20, 2024 at 8:32 AM\n\n\n\nFirst time asking for help writing #RStats code with Gemini. I guess I'll stick with ChatGPT for now....\n[image or embed]\n— jsmiths.bsky.social (@jsmiths.bsky.social) November 20, 2024 at 3:47 AM",
      "link": "https://rweekly.org//2024-W48.html",
      "pubDate": "Mon, 25 Nov 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W47.html",
      "title": "R Weekly 2024-W47 Dev Day, Greenland Ice",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jon Calder, with help from the R Weekly team members and contributors.\nHighlight\nR Dev Day @ SIP 2024\nGreenland ice thickness\nInsights\nHow Github Copilot and ChatGPT have changed my life as an R developer\nR Dev Day @ SIP 2024\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date with CRANberries 📦\nCRAN\n{cocoon} 0.1.0: Extract, Format, and Print Statistical Output\n{GeoTox} 0.2.0: Spatiotemporal Mixture Risk Assessment\n{wbids} 0.1.0: Seamless Access to World Bank International Debt Statistics\n(IDS)\n{brickster} 0.2.5: R Toolkit for ‘Databricks’\nGitHub\n{messy} 0.0.2: R package to make a data frame messy and untidy\nUpdated Packages\n🔍 Search on R-universe 🔍\n{shinylive} 0.3.0: Run ‘shiny’ Applications in the Browser - diffify\n{packageRank} 0.9.4: Computation and Visualization of Package Download Counts and\nPercentile Ranks - diffify\n{bioregion} 1.1.1-1: Comparison of Bioregionalisation Methods - diffify\n\n{tabulapdf} 1.0.5-5: Extract Tables from PDF Documents - diffify\n{osmapiR} 0.2.2: Interface to OpenStreetMap API - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nR Shiny Deployment: 5 Options for Individuals and Enterprises\nComprehensive Documentation:  How We Ensure Your Project’s Success Beyond Delivery\n{PakPC} 0.2.0: ‘shiny’ App to Analyze Pakistan’s Population Census Data\n{PakNAcc} 0.1.0: ‘shiny’ App for National Accounts\n{WeibullR.shiny} 0.3: A ‘Shiny’ App for Weibull Analysis\n\nTutorials\nManifold Learning\nAI Transcription from R using Whisper: Part 3\nGreenland ice thickness\nTime Series Machine Learning: Shanghai Composite\nSmith-Pittman Algorithm: Enhancing Community Detection in Networks\n\nUnderstanding and extending the methods of comparing spatial patterns in raster data\nHow to Keep Certain Columns in Base R with subset(): A Complete Guide\nHow to Subset a Data Frame in R: 4 Practical Methods with Examples\nHow to Use the Tilde Operator (~) in R: A Comprehensive Guide\n3MW (Look at all those Quarto Outputs)\n100 Bushels of Corn\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nDecember 3, 2024: ROpenSci - Social Coworking and Office Hours - Getting Involved in the Antarctic/Southern Ocean rOpenSci Community\nDecember 5, 2024: Introduction to generalized linear models in R workshop\nDatasets\n{lovecraftr} 1.0.0: A Collection of Lovecraftian Tales and Texts\nConnect\nJoin the Data Science Learning Community\nR Work Opportunities\nBilingual [Japanese/English] Product Support Specialist (Zelus Analytics) - Remote\nQuotes of the Week\nBluesky really is the new #rstats twitter because we have the first base R vs tidyverse flame war 🤣\n— Hadley Wickham (@hadleywickham.bsky.social) 14 November 2024 at 19:18",
      "link": "https://rweekly.org//2024-W47.html",
      "pubDate": "Mon, 18 Nov 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W46.html",
      "title": "R Weekly 2024-W46 Computational markdown, Bob's Burgers, S7",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Ryo Nakagawara, with help from the R Weekly team members and contributors.\nHighlight\nGuide to generating and rendering computational markdown content programmatically with Quarto\nBob’s Burgers Episode Fingerprints by Season\nS7 0.2.0\nInsights\nHealth Technology Assessment (HTA) Working Group Kickoff: Building a Collaborative Vision in R for HTA\nR in the Real World\nGuide to generating and rendering computational markdown content programmatically with Quarto: Learn how to use knitr::knit() in inline chunks to correctly render auto-generated R and markdown content in Quarto documents\n{ntfy}: Lightweight Wrapper to the ntfy.sh Service\nR in Academia\nEmbedding R/exams Exercises as Forms in R/Markdown or Quarto Documents\nResources\nExamples of restructuring data between long and wide format in R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{tidywater} 0.6.2: Water Quality Models for Drinking Water Treatment Processes.\n{handwriterRF} 1.0.2: Handwriting Analysis with Random Forests.\n{surveydown} 0.4.0: Markdown-Based Surveys Using ‘Quarto’ and ‘shiny’.\n{tidyplots} 0.6.2: Tidy Plots for Scientific Papers.\nGitHub or Bitbucket\n{fastml}: Fast Machine Learning Model Training and Evaluation.\n{newplaces}: R-wrapper package to the Google Places API (New)\n{plumber-nextjs-app}: A demo Next.js app that interacts with an R Plumber backend\n{pray}: Display ASCII art of objects for prayer in the R console.\n{ig.degree.betweenness}: Smith-Pittman Community Detection Algorithm for ‘igraph’ Objects (2024) in R.\n{autoimport}: A toolbox to automatically generate @importFrom roxygen tags from R files.\n{peeky}: Download and Extract Shinylive Applications.\nUpdated Packages\n🔍 Search on R-universe 🔍\ninline 0.3.20: Mostly Maintenance\n{S7} 0.2.0: An Object Oriented System Meant to Become a Successor to S3 and\nS4 - diffify\n{curl} 6.0.0: A Modern and Flexible Web Client for R - diffify\n{salesforcer} 1.0.2: An Implementation of ‘Salesforce’ APIs Using Tidy Principles - diffify\n{libr} 1.3.7: Libraries, Data Dictionaries, and a Data Step for R - diffify\n{zipangu} 0.3.3: Japanese Utility Functions and Data - diffify\n{waldo} 0.6.1: Find Differences Between R Objects - diffify\n{stars} 0.6-7: Spatiotemporal Arrays, Raster and Vector Data Cubes - \ndiffify\n{charcuterie} 0.0.6: Handle Strings as Vectors of Characters - diffify\n{ranger} 0.17.0: A Fast Implementation of Random Forests - diffify\n{knitr} 1.49: A General-Purpose Package for Dynamic Report Generation in R - diffify\n{connectapi} 0.4.0: Utilities for Interacting with the ‘Posit Connect’ Server API - diffify\n{av} 0.9.3: Working with Audio and Video in R - diffify\n{ggreveal} 0.1.3: Reveal a ‘ggplot’ Incrementally - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nRoguelike Sprite Builder\n\nTutorials\nNew qeML Plotting Function\nBirth date temperature\nRegressions where the coefficients are a simplex. by @ellis2013nz\nComparison of spatial patterns in categorical raster data for arbitrary regions using R\nHow to Use Dollar Sign ($) Operator in R: A Comprehensive Guide for Beginners\n3MW (Use Secrets With GitHub Actions and Schedueling)\nR t-SNE: How to Visualize High-Dimensional Datasets in R\nR 3D Charts: Top 3 Packages to Master 3D Data Visualization in R\nWant To Get Even Faster Feedback From Your Unit Tests? Optimize Your Test Files Structure.\nBob’s Burgers Episode Fingerprints by Season\n\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nDecember 3, 2024: ROpenSci - Social Coworking and Office Hours - Getting Involved in the Antarctic/Southern Ocean rOpenSci Community\nDecember 5, 2024: Introduction to generalized linear models in R workshop\nConnect\nJoin the Data Science Learning Community\nR Work Opportunities\nBilingual [Japanese/English] Product Support Specialist (Zelus Analytics) - Remote\nQuotes of the Week\nI've just explored the brand-new tidyplots package in R, and it’s impressive how effortlessly it enables you to create beautiful, publication-ready plots. Designed with scientific papers in mind, tidyplots lets you build, adjust, and refine plot components gradually, all with a… pic.twitter.com/ZVaPGoPHXW\n— Joachim Schork (@JoachimSchork) November 11, 2024\n\n\n\nTo be a good geospatial data scientist, you need good tools.\nMy tool of choice is R.\nHere are the packages I can't live without:#rstats pic.twitter.com/n4qfYGes3Z\n— Yohan (@yohaniddawela) October 31, 2024",
      "link": "https://rweekly.org//2024-W46.html",
      "pubDate": "Tue, 12 Nov 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W45.html",
      "title": "R Weekly 2024-W45 Talk recordings from posit::conf(2024), GitHub actions, Parameterized plots",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Batool Almarzouq, with help from the R Weekly team members and contributors.\nHighlight\nTalk recordings and workshop materials from posit::conf(2024)\n3MW (Automate Anything With R & GitHub Actions)\nParameterized plots and reports with R and Quarto\nInsights\nAugust 2024: Top 40 New CRAN Packages\nR in the Real World\nShiny Gatherings x Pharmaverse: Building Clinical Data Analysis Apps with {teal} \n\nSpendDash: a free online dashboard that allows you to keep track of your spending habits over time\nR in Academia\nComparison of spatial patterns in categorical raster data for overlapping regions using R\n\nResources\nTalk recordings and workshop materials from posit::conf(2024)\n10 New Books added to Big Book of R + R community on BlueSky\nOrdinal State Transition Models as a Unifying Risk Prediction Framework\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nRcpp 1.0.13-1 on CRAN: Hot Fix\ngcbd 0.2.7 on CRAN: More Mere Maintenance\nTapyr 0.2 Update: Package Management with uv and Shiny for Python Testing API\n{favawesome} 0.1.1: Use Font Awesome Icons as Shiny favicons\n{surveydown} 0.4.0: Markdown-Based Surveys Using ‘Quarto’ and ‘shiny’\n{rcollectadhd} 0.8: Collection of Data Sets Containing ADHD Related Data\n{legendry} 0.1.0: Extended Legends and Axes for ‘ggplot2’\n{CADF} 0.1: Customer Analytics Data Formatting\n{vchartr} 0.1.3: Interactive Charts with the ‘JavaScript’ ‘VChart’ Library\n{mapindiatools} 1.0.1: Mapping Data for ‘mapindia’ Package\n{dsTidyverseClient} 1.0.0: ‘DataSHIELD’ ‘Tidyverse’ Clientside Package\n{picohdr} 0.1.1: Read, Write and Manipulate High Dynamic Range Images\n{ggpca} 0.1.2: Publication-Ready PCA, t-SNE, and UMAP Plots\n\n{BSTZINB} 1.0.1: Association Among Disease Counts and Socio-Environmental Factors\n{redatamx} 1.0.0: R Interface to ‘Redatam’ Library\n{TMTI} 1.0.3: Too Many, Too Improbable (TMTI) Test Procedures\n{tapLock} 0.2.0: Seamless Single Sign-on for ‘shiny’\n{ShinyWizard} 1.1.3.11: An Interactive Wizard to Design, Build, and Deploy R Packages Demo Presentation\nUpdated Packages\n🔍 Search on R-universe 🔍\n{spatstat.utils} 3.1-1: Utility Functions for ‘spatstat’ - diffify\n{ggeasy} 0.1.5: Easy Access to ‘ggplot2’ Commands - diffify\n{EIEntropy} 0.0.1.2: Ecological Inference Applying Entropy - diffify\n{dataCompare} 1.0.1: A ‘shiny’ App to Compare Two Data Frames - diffify\n{RaceID} 0.3.7: Identification of Cell Types, Inference of Lineage Trees, and Prediction of Noise Dynamics from Single-Cell RNA-Seq Data - diffify\n{iimi} 1.2.1: Identifying Infection with Machine Intelligence - diffify\n{basemaps} 0.0.8: Accessing Spatial Basemaps in R - diffify\n{mapgl} 0.1.4: Interactive Maps with ‘Mapbox GL JS’ and ‘MapLibre GL JS’ - diffify\n{priorsense} 1.0.4: Prior Diagnostics and Sensitivity Analysis - diffify\n{gitignore} 0.1.8: Create Useful .gitignore Files for your Project - diffify\n{ggstatsplot} 0.12.5: ‘ggplot2’ Based Plots with Statistical Details - diffify\n{flexlsx} 0.3.0: Exporting ‘flextable’ to ‘xlsx’ Files - diffify\n{iForecast} 1.0.9: Machine Learning Time Series Forecasting - diffify\n{dunlin} 0.1.8: Preprocessing Tools for Clinical Trial Data - diffify\n{statsExpressions} 1.6.1: Tidy Dataframes and Expressions with Statistical Details - diffify\n{proffer} 0.2.1: Profile R Code and Visualize with ‘Pprof’ - diffify\n{DescToolsAddIns} 1.12: Interactive Functions to be Used as Shortcuts in ‘RStudio’ - diffify\n{bio3d} 2.4-5: Biological Structure Analysis - diffify\n\n{manynet} 1.3.1: Many Ways to Make, Modify, Map, Mark, and Measure Myriad Networks - diffify\n{ggseqplot} 0.8.5: Render Sequence Plots using ‘ggplot2’ - diffify\n\n{RcmdrPlugin.DoE} 0.12-6: R Commander Plugin for (Industrial) Design of Experiments - diffify\n{rspm} 0.6.1: ‘RStudio’ Package Manager - diffify\n{progressr} 0.15.0: An Inclusive, Unifying API for Progress Updates - diffify\n{pdp} 0.8.2: Partial Dependence Plots - diffify\n{rgl} 1.3.12: 3D Visualization Using OpenGL - diffify\n{liver} 1.17: “Eating the Liver of Data Science” - diffify\n{circumplex} 1.0.0: Analysis and Visualization of Circular Data - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nVetiver: Monitoring Models in Production\nPredictive scenarios simulation in R, Python and Excel using Techtonique API\nDelimiting the modelling background for scattered uneven occurrence data\nStreet names: Day 2 of 30DayMapChallenge. Trying to find the genders in Lyon street names\nLidar: Day 1 of 30DayMapChallenge. Playing with points\nParameterized plots and reports with R and Quarto\nHow to Use ‘OR’ Operator in R: A Comprehensive Guide for Beginners\nThe Ultimate Guide to Creating Lists in R: From Basics to Advanced Examples\nHow to Iterate Over Rows of Data Frame in R: A Complete Guide for Beginners\nReading in multiple files without loops\n3MW (Automate Anything With R & GitHub Actions)\nConnecting R to Postgres: From Database Creation to Data Manipulation and Charts\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpdates from the R Contribution Working Group (RCWG):\nAnnouncing R Dev Day @ LatinR 2024: online, Monday 18 and Tuesday 19 November, 5:30pm - 8pm (UTC-3). Join us to work on contributions to the code, documentation and translations in base R. Free and open registration, deadline Saturday 16 Nov.\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nartistry\nToday's artwork generated with #rstats and #ggplot2: pic.twitter.com/9UMkxbcpnA\n— aRtsy package (@aRtsy_package) November 5, 2024\n\n\n\nImage of Mexicali, Mexico created in #rstats using data from #OpenStreetMap. pic.twitter.com/7epnCkTPlp\n— R City Views (@rcityviews) November 3, 2024\n\n\nQuotes of the Week\n  \n \nPost by @johnmackintosh@fosstodon.org\n View on Mastodon",
      "link": "https://rweekly.org//2024-W45.html",
      "pubDate": "Tue, 05 Nov 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W44.html",
      "title": "R Weekly 2024-W44 {sortable}, HTML table to dataframe, Shiny Assistant",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Sam Parmar, with help from the R Weekly team members and contributors.\nHighlight\n{sortable} card games in {shiny}\nHTML Table to DataFrame Tool\nShiny Assistant: Prototype and build Shiny applications with the help of AI - Winston Chang - Posit \nInsights\nWinners of the 2024 Shiny Contest\n\nPython for R users\nTime Series Machine Learning: S&P 500\nIterating to achieve my first accepted posit::conf talk\nDyson’s Algorithm for the Twelve Coins Problem\n3 Lessons learned from 3 years of testing as an R developer\n{sortable} card games in {shiny}\nA note about a bug in irr::kripp.alpha()\nR in the Real World\nPosit’s Hadley Wickham honored with the 2025 ASA Award for Statistical Computing and Graphics\nR in Organizations\nIntroducing sdtm.oak\nResources\nHTML Table to DataFrame Tool\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{cpp11tesseract} 5.3.2: Open Source OCR Engine\n{flourishcharts} 1.0.0.3: ‘Flourish’ for ‘R’ and ‘Python’\nGitHub or Bitbucket\n{isocubes}\n\nUpdated Packages\n🔍 Search on R-universe 🔍\ndrat 0.2.5 on CRAN: Small Updates\n{deeptime} 2.1.0: Plotting Tools for Anyone Working in Deep Time - diffify\n{nonmemica} 1.0.11: Create and Evaluate NONMEM Models in a Project Context - diffify\n{plater} 1.0.5: Read, Tidy, and Display Data from Microtiter Plates - diffify\n{slider} 0.3.2: Sliding Window Functions - diffify\n{finnts} 0.5.0: Microsoft Finance Time Series Forecasting Framework - diffify\n{checked} 0.2.4: Systematically Run R CMD Checks - diffify\n{ami} 0.2.0: Checks for Various Computing Environments - diffify\n{handwriter} 3.2.1: Handwriting Analysis in R - diffify\n{rscorecard} 0.30.0: A Method to Download Department of Education College Scorecard\nData - diffify\n{RandomWalker} 0.2.0: Generate Random Walks Compatible with the ‘tidyverse’ - diffify\n{allcontributors} 0.2.2: Acknowledge all Contributors to a Project - diffify\n{radiant.data} 1.6.7: Data Menu for Radiant: Business Analytics using R and Shiny - diffify\n{logger} 0.4.0: A Lightweight, Modern and Flexible Logging Utility - diffify\n{lzstring} 0.1.3: Wrapper for ‘lz-string’ ‘C++’ Library - diffify\n{dtrackr} 0.4.6: Track your Data Pipelines - diffify\n{git2r} 0.35.0: Provides Access to Git Repositories - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nUnlocking Insights from LatinR: Collaboration and Innovation in Data Science Webinar\nShiny Assistant: Prototype and build Shiny applications with the help of AI - Winston Chang - Posit \nTutorials\nData Science Workflows in R: Tutorial Companion e-book\nPolyglot Maxxie and Minnie\nListing Alpaca Assets\nComparison of spatial patterns in continuous raster data for arbitrary regions using R\nSentiment Analysis in R\nEnhancing Time Series Analysis: RandomWalker 0.2.0 Release\nHow to Loop Through List in R with Base R and purrr: A Comprehensive Guide for Beginners\nMastering Column Names in Base R: A Beginner’s Guide\n3MW (Automate E-mails With R & {blastula})\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nVisualizing Variance with Sankey diagrams/Riverplots using R: An Illustration with Longitudinal Multi-level Modeling workshop\nUnderstanding Difference-in-Differences: Basics and Beyond with Applications in R workshop\nR/Pharma 2024 Workshops: Oct 25-Nov 1\nR/Pharma 2024 Conference: Oct 29-31\n\nConnect\nJoin the Data Science Learning Community\nrtistry\n  \n \nPost by @nrennie@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @coolbutuseless@fosstodon.org\n View on Mastodon",
      "link": "https://rweekly.org//2024-W44.html",
      "pubDate": "Mon, 28 Oct 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W43.html",
      "title": "R Weekly 2024-W43 tidyHeatmap, test titles, reshape",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Carroll, with help from the RWeekly team members and contributors.\nHighlight\nExploring the tidyHeatmap R package\nDon’t Expect That “Function Works Correctly”, Do This Instead\nComparing data.table reshape to duckdb and polars\nInsights\nR and Python consoles + JupyterLite in www.techtonique.net\nGradient-Boosting anything (alert: high performance): Part2, R version\nHighlights from Shiny in Production (2024)\nPositron in action with #TidyTuesday orca encounters\nMonads in R\nAuthenticate with Alpaca API\nComparison of spatial patterns in continuous raster data for overlapping regions using R\n\nHow to Loop Through Column Names in Base R with Examples\nHow to Add Suffix to Column Names in Base R: A Beginner’s Guide\nSoftware Engineering Good Practices (GSEP) in FDA Submissions - 7 Categories to Follow\nDon’t Expect That “Function Works Correctly”, Do This Instead\nr2lambda update to support multi-file projects and renv projects\nDeploying Shiny for Python apps built with Tapyr to Posit Connect\nRunning tidymodel prediction workflows inside databases with orbital and Snowflake\nExploring the tidyHeatmap R package\nHow PCA projection and cell label transfer work in Seurat\nposit::conf(2024)\nR in the Real World\nR Consortium : Dengue Data Hub\nR Consortium : The U.S. Federal Reserve quarterly model in R\nResources\nCASdatasets 1.2.0\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{Platypus} 3.6.0: Single-Cell Immune Repertoire and Gene Expression Analysis\n{plotscaper} 0.2.3: Explore Your Data with Interactive Figures\n{ctypesio} 0.1.1: Read and Write Standard C Types from Files, Connections and Raw Vectors\n{hollr} 1.0.0: Chat Completion and Text Annotation with Local and OpenAI Models\n{affiner} 0.1.1: A Finer Way to Render 3D Illustrated Objects in ‘grid’ Using Affine Transformations\nUpdated Packages\n🔍 Search on R-universe 🔍\nqlcal 0.0.13 on CRAN: Small Calendar Update\nRcppDate 0.0.4: New Upstream Minor\n{shinyAce} 0.4.3: Ace Editor Bindings for Shiny - diffify\n{Matrix} 1.7-1: Sparse and Dense Matrix Classes and Methods - diffify\n{openxlsx2} 1.10: Read, Write and Edit ‘xlsx’ Files - diffify\n{charlatan} 0.6.1: Make Fake Data - diffify\n{rstudioapi} 0.17.0: Safely Access the RStudio API - diffify\n{litedown} 0.3: A Lightweight Version of R Markdown - diffify\n{duckdb} 1.1.1: DBI Package for the DuckDB Database Management System - diffify\n{bookdown} 0.41: Authoring Books and Technical Documents with R Markdown - diffify\n{coro} 1.0.5: ‘Coroutines’ for R - diffify\n{shiny.telemetry} 0.3.1: ‘Shiny’ App Usage Telemetry - diffify\n{downloadthis} 0.4.1: Implement Download Buttons in ‘rmarkdown’ - diffify\n{terra} 1.7-83: Spatial Data Analysis - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nDuckDB vs dplyr vs base R\nUse nanoparquet instead of readr/CSV\n\nComparing data.table reshape to duckdb and polars\nVisualizing performance regression of data.table with atime\nBeyond Functions: How to Enrich an R Package with Data\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nCome Learn About Time Series with Me at ODSC West Wednesday October 30th, 2024\nConnect\nJoin the Data Science Learning Community\nrtistry\n\n\n  \n \nPost by @coolbutuseless@fosstodon.org\n View on Mastodon\n  \n\n\nQuotes of the Week\n  \n \nPost by @nrennie@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @mattdray@fosstodon.org\n View on Mastodon\n  \n\n\n  \n \nPost by @coolbutuseless@fosstodon.org\n View on Mastodon",
      "link": "https://rweekly.org//2024-W43.html",
      "pubDate": "Mon, 21 Oct 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W42.html",
      "title": "R Weekly 2024-W42 Nested Tests, ShinyChat, Post Summaries",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Eric Nantz, with help from the R Weekly team members and contributors.\nHighlight\nNested unit tests with testthat\nshinychat: Chat UI component for Shiny for R\nCreating post summary with AI from Hugging Face\nInsights\nPostprocessing is coming to tidymodels\nR in the Real World\nExploratory Data Analysis: Will PCE Data Push Bitcoin?\nR in Academia\nCan ChatGPT help construct non-trivial statistical models? An example with Bayesian “random” splines\nCalculating an LOOCV MSE by hand\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nmicroinverterdata release 0.1.0\n{data.table.threads} 1.0.0: Analyze Multi-Threading Performance for ‘data.table’ Functions\n{AdverseEvents} 0.0.1: ‘shiny’ Application for Adverse Event Analysis of ‘OnCore’ Data\n{openrouteservice} 0.5.3: An ‘openrouteservice’ API Client\n{tidyllm} 0.1.0: Tidy Integration of Large Language Models\n{genular} 1.0.0: ‘Genular’ Database API\n{autometric} 0.0.5: Background Resource Logging\n{opendataformat} 1.3.0: Reading and Writing Open Data Format Files\n{spheredata} 0.1.0: Students’ Performance Dataset in Physics Education Research (SPHERE)\n{usdatasets} 0.1.0: A Comprehensive Collection of U.S. Datasets\nGitHub or Bitbucket\nshinychat: Chat UI component for Shiny for R\nhexsession: Create a tile of logos for loaded packages\n\nUpdated Packages\n🔍 Search on R-universe 🔍\n{mirai} 1.3.0: Minimalist Async Evaluation Framework for R - diffify\n{nanonext} 1.3.0: R binding for NNG (Nanomsg Next Gen) - diffify\n{secretbase} 1.0.3: Cryptographic Hash, Extendable-Output and Base64 Functions.\n{gtfsio} 1.2.0: Read and Write General Transit Feed Specification (GTFS) Files - diffify\n{tfrmtbuilder} 0.1.0: ‘shiny’ App Companion to the ‘tfrmt’ Package - diffify\n{crew} 0.10.0: A Distributed Worker Launcher Framework - diffify\n{kiwisR} 0.2.4: A Wrapper for Querying KISTERS ‘WISKI’ Databases via the ‘KiWIS’ API - diffify\n{crypto2} 2.0.3: Download Crypto Currency Data from ‘CoinMarketCap’ without ‘API’ - diffify\n{pagedown} 0.21: Paginate the HTML Output of R Markdown with CSS for Print - diffify\n{ieeeround} 0.2-2: Functions to Set and Get the IEEE Rounding Mode - diffify\n{random.cdisc.data} 0.3.16: Create Random ADaM Datasets - diffify\n{nixtlar} 0.6.1: A Software Development Kit for ‘Nixtla’’s ‘TimeGPT’ - diffify\n{officer} 0.6.7: Manipulation of Microsoft Word and PowerPoint Documents - diffify\n{chevron} 0.2.7: Standard TLGs for Clinical Trials Reporting - diffify\n{SqlRender} 1.19.0: Rendering Parameterized SQL and Translation to Dialects - diffify\n{webdav} 0.1.1: A Simple Interface for Interacting with ‘WebDAV’ Servers - diffify\n{eyelinkReader} 1.0.2: Import Gaze Data for EyeLink Eye Tracker - diffify\n{multiverse} 0.6.2: Create ‘multiverse analysis’ in R - diffify\n{exampletestr} 1.7.3: Help for Writing Unit Tests Based on Function Examples - diffify\n{xportr} 0.4.1: Utilities to Output CDISC SDTM/ADaM XPT Files - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nA Guide to Validating R (Shiny) Applications in Pharma\nTutorials\nEDA Reimagined in R: GWalkR + DuckDB for Lightning-Fast Visualizations\nIntroducing: the POLYGON FULL\n\nHow to Combine Two Data Frames in R with Different Columns Using Base R, dplyr, and data.table\nCreating post summary with AI from Hugging Face\nNested unit tests with testthat\nThe easiest way to capture code output for tests\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nStandardising R Projects with the ProjectTemplate package workshop\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\n\n\n\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W42.html",
      "pubDate": "Mon, 14 Oct 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W41.html",
      "title": "R Weekly 2024-W41 Generative Art, Word Templates, Expectations",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Colin Fay, with help from the R Weekly team members and contributors.\nHighlight\nGetting started with generative art\n3MW (Using Word Templates With R)\nExpectations, Verified! Dive into the World of Unit Tests with expect_*()\nInsights\nUsing property-based testing in R\nR in the Real World\nExamining exams using Rasch models and assessment of measurement invariance\nR in Organizations\nA Guide to R Package Validation in Pharma\nWhat is GxP Validation in Clinical Software Development?\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nUpdated Packages\n🔍 Search on R-universe 🔍\nsimaerep release 0.6.0\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nR Internationally\nA comunidade R fala português\nTutorials\nSet up your own universe on R-universe\nAI code completion in Positron\nMLOps from Zero to Hero : Build your ML model\nAutomated random variable distribution inference using Kullback-Leibler divergence and simulating best-fitting distribution\nExpectations, Verified! Dive into the World of Unit Tests with expect_*()\nA Safe Space for Learning How to Make Pull Requests\nEconomic Calendar\nGetting started with generative art\nHow to Split Data into Equal Sized Groups in R: A Comprehensive Guide for Beginners\nMastering Data Manipulation in R: Comprehensive Guide to Stacking Data Frame Columns\n3MW (Using Word Templates With R)\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nSpatial modelling with GAMs in R workshop\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community",
      "link": "https://rweekly.org//2024-W41.html",
      "pubDate": "Mon, 07 Oct 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W40.html",
      "title": "R Weekly 2024-W40 Data Career Insights, In-Place Modifications, rix",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Tony ElHabr, with help from the R Weekly team members and contributors.\nHighlight\nData Career Insights: Lessons from four senior leaders in the data space\nIn-Place Modifications\nReproducible data science with Nix, part 13 – {rix} is on CRAN!\nInsights\nCover and modify, some tips for R package development\nData Career Insights: Lessons from four senior leaders in the data space\nRStudio IDE and Posit Workbench 2024.09.0: What’s New\nReproducible data science with Nix, part 13 – {rix} is on CRAN!\nSome Options for Fast Matrix Decompositions in R\n\n{surveydown 0.3.0}\nSeal of Approval: collapse\nR in the Real World\nA Bayesian Plackett-Luce model in Stan applied to pinball championship data\n\nEstimating ecological network robustness with R: A functional approach\nExploding, Impacting: looking at bioRxiv preprint view dynamics with R\nResources\nDescriptive statistics by hand\nHandling large data with polars and tidypolars\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{dsld} 0.2.2: Data Science Looks at Discrimination\n{xmlwriter} 0.1.1: Fast and Elegant XML Generation\n{geocomplexity} 0.1.0: Mitigating Spatial Bias Through Geographical Complexity\n\n{dotwhisker} 0.8.3: Dot-and-Whisker Plots of Regression Results\n{hexDensity} 1.4.4: Fast Kernel Density Estimation with Hexagonal Grid\n{literanger} 0.1.1: Random Forests for Multiple Imputation Based on ‘ranger’\nUpdated Packages\n🔍 Search on R-universe 🔍\n{Lahman} 12.0-0: Sean ‘Lahman’ Baseball Database - diffify\n{broom} 1.0.7: Convert Statistical Objects into Tidy Tibbles - diffify\n{httr2} 1.0.5: Perform HTTP Requests and Process the Responses - diffify\n{feasts} 0.4.1: Feature Extraction and Statistics for Time Series - diffify\n{DescTools} 0.99.57: Tools for Descriptive Statistics - diffify\n{rio} 1.2.3: A Swiss-Army Knife for Data I/O - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nIn-Place Modifications\n100 Bushels of Corn\n3MW (Creating Word Docs With R)\nModeling loss aversion with extended-support beta regression\nShiny Assistant for Python - How to Build Shiny for Python Apps with GPT and GenerativeAI\nHow to Create Horizontal Boxplots in Base R and ggplot2\nHow to Remove Outliers from Multiple Columns in R: A Comprehensive Guide\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nOctober 17 - Analyzing Time Series at Scale with Cluster Analysis in R workshop\nOctober 3 - Probabilistic Network Inference and Analysis in R and Python workshop\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nHere is my #viz for the #TidyTuesday challenge—W40. This one is about the Chess Game Dataset (Lichess).\n.\n🔗: stevenponce.netlify.app/data_visuali...\n.\n#rstats | #r4ds | #dataviz | #ggplot2\n[image or embed]\n— Steven Ponce (@sponce1.bsky.social) September 25, 2024 at 5:03 AM\n\n\n\nI've not done #tidytuesday in a longggg time and this week's dataset on dialogues from Shakespeare plays was a nice way to get back into it. Nothing too complicated, just a bump chart tracking the amount of dialogue for major characters. Everything in R with ggplot #dataviz #rstats\n[image or embed]\n— Aman Bhargava  (@aman.bh) September 22, 2024 at 1:21 AM\n\n\nQuotes of the Week\nA quick reminder that if you are scoring/recoding variables using the same logic in #rstats, you can use across() to score those items all at once. pic.twitter.com/KnYbIHKlqZ\n— Crystal Lewis (@Cghlewis) September 27, 2024",
      "link": "https://rweekly.org//2024-W40.html",
      "pubDate": "Sun, 29 Sep 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W39.html",
      "title": "R Weekly 2024-W39 patchwork, gguidance, prime numbers",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Tony ElHabr,, with help from the R Weekly team members and contributors.\nHighlight\npatchwork 1.3.0\nPrime numbers as sums of three squares. by @ellis2013nz\n{gguidance}: Extended guide options for ‘ggplot2’\nInsights\nDeposits In The Wild\n\nEase renv::restore() by updating your repository to Posit Public Package Manager\nR in the Real World\n3MW (Dealing With Shitty Text Data)\nIntroducing Shiny Assistant - You Can Now Build Shiny Applications with GPT and GenerativeAI\nR in Organizations\nCreate a free Llama 3.1 405B-powered chatbot on an R package’s GitHub repo in <1 min\n\nFree Boba Tea and Technical R Topics Lure Young Learners to New Brunei R User Group\nR in Academia\nExtended-support beta regression for [0,1] responses\nResources\n5 Books added to Big Book of R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{readMDTable} 0.1.1: Read Markdown Tables into Tibbles\n{ggtangle} 0.0.2: Draw Network with Data\n{mvcor} 1.0: Correlation Coefficients for Multivariate Data\n{ggalign} 0.0.3: Align Multiple ‘ggplot’ Objects\n{gammi} 0.1: Generalized Additive Mixed Model Interface\nGitHub or Bitbucket\n{gguidance}: Extended guide options for ‘ggplot2’\n\nUpdated Packages\n🔍 Search on R-universe 🔍\n{osmapiR} 0.2.1: Interface to ‘OpenStreetMap API’ - diffify\n{rhino} 1.10.1: A Framework for Enterprise Shiny Applications - diffify\n{Rblpapi} 0.3.15: R Interface to ‘Bloomberg’ - diffify\n{V8} 5.0.1: Embedded JavaScript and WebAssembly Engine for R - diffify\n{pdftools} 3.4.1: Text Extraction, Rendering and Converting of PDF Documents - diffify\n{openssl} 2.2.2: Toolkit for Encryption, Signatures and Certificates Based on\nOpenSSL - diffify\n{magick} 2.8.5: Advanced Graphics and Image-Processing in R - diffify\n{jsonlite} 1.8.9: A Simple and Robust JSON Parser and Generator for R - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nGist & Cookbook\nExploring 2023 1-year ACS data (Kyle Walker)\nTutorials\npatchwork 1.3.0\n\nPrime numbers as sums of three squares. by @ellis2013nz\nImproving Shiny app interactivity and performance with ggiraph\nWrangling filenames into variables\nStepwise selection of variables in regression is Evil\nMastering Data Transformation in R with pivot_longer and pivot_wider\nUnveiling ‘RandomWalker’: Your Gateway to Tidyverse-Compatible Random Walks\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nOctober 17 - Analyzing Time Series at Scale with Cluster Analysis in R workshop\nOctober 3 - Probabilistic Network Inference and Analysis in R and Python workshop\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nFor biodiversity month, I made this #dataviz of animal observations added to the Atlas of Living Australia in 2024! 🌏\n\n🐦 Perching birds (songbirds, finches, magpies) are truly #1 🥇 & for good reason: They represent > half of all bird species globally!\n\ncode: github.com/AtlasOfLivin...\n\n#rstats 📊🧪\n[image or embed]\n— Dax Kellie (@daxkellie.bsky.social) September 18, 2024 at 12:29 AM\n\n\nQuotes of the Week\nR users learning about data wrangling in Python #rstats pic.twitter.com/PQ5k5iwV7i\n— Lukas Jung (@lukasjung_hd) September 20, 2024\n\n\n\nEvery damn time... #rstats\n[image or embed]\n— Mattan S. Ben-Shachar 🎗️🇮🇱🇺🇦 (@mattansb.bsky.social) September 20, 2024 at 2:39 AM",
      "link": "https://rweekly.org//2024-W39.html",
      "pubDate": "Mon, 23 Sep 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W38.html",
      "title": "R Weekly 2024-W38 surreal package, gender in Australian census, version-ing data",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Ryo Nakagawara, with help from the R Weekly team members and contributors.\nHighlight\n{surreal} 0.0.1: Create Datasets with Hidden Images in Residual Plots\nGender and sexuality in Australian surveys and census\nPlease Version Data\nInsights\nThank You, Joseph Rickert: A Legacy of Leadership and Innovation in the R Community\nEmpowering Data Science: How R is Transforming Research in Cameroon\nLabels For Technical Writing Projects\nR in the Real World\nPlease Version Data\nExpress to Impress: Leveraging IBCS Standards for Powerful Data Presentations\nGender and sexuality in Australian surveys and census\nR in Organizations\nTakeaways from the R/Pharma Summit at posit::conf(2024)\nResources\nIntroduction to Web Scraping and Data Management for Social Scientists\nWorkshop: Introduction to machine learning with {tidymodels} in R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{hydflood} 0.5.8: Flood Extents and Duration along the Rivers Elbe and Rhine\n{wdi2} 0.1.0: Download World Development Indicators from the World Bank\nIndicators API\n{tidycountries} 0.0.1: Access and Manipulate Comprehensive Country Level Data in Tidy Format\n{fdicdata} 0.1.1: Accessing FDIC Bank Data\n{RJalaliDate} 0.1.0: Handling Jalali Date (Persian / Solar Hijri)\n{corpmetrics} 1.0: Tools for Valuation, Financial Metrics and Modeling in Corporate Finance\n{ContourFunctions} 0.1.2: Create Contour Plots from Data or a Function\n{forestdata} 0.1.0: Download Forestry Data\n{ream} 1.0-1: Density, Distribution, and Sampling Functions for Evidence\nAccumulation Models\n{ggfigdone} 0.1.2: Manage & Modify ‘ggplot’ Figures using ‘ggfigdone’\n{CTRing} 0.1.0: Density Profiles of Wood from CT Scan Images\n{charcuterie} 0.0.4: Handle Strings as Vectors of Characters\n{tidytuesdayR} 1.1.2: Access the Weekly ‘TidyTuesday’ Project Dataset\n{surreal} 0.0.1: Create Datasets with Hidden Images in Residual Plots\n\nUpdated Packages\nRcppArmadillo 14.0.2-1 on CRAN: Updates\nRcppSpdlog 0.0.18 on CRAN: Updates\n{lsnstat} 1.0.1: ‘La Societe Nouvelle’ API Access - diffify\n{ichimoku} 1.5.5: Visualization and Tools for Ichimoku Kinko Hyo Strategies - diffify\n{eodhdR2} 0.5.1: Official R API for Fetching Data from ‘EODHD’ - diffify\n{tiler} 0.3.2: Create Geographic and Non-Geographic Map Tiles - diffify\n{paws.analytics} 0.7.0: ‘Amazon Web Services’ Analytics Services - diffify\n{memery} 0.6.0: Internet Memes for Data Analysts - diffify\n{legocolors} 0.4.0: Official Lego Color Palettes - diffify\n{epubr} 0.6.5: Read EPUB File Metadata and Text - diffify\n{AutoDeskR} 0.1.5: An Interface to the ‘AutoDesk’ ‘API’ Platform - diffify\n{UKFE} 0.3.6: UK Flood Estimation - diffify\n{rhino} 1.10.0: A Framework for Enterprise Shiny Applications - diffify\n{billboarder} 0.5.0: Create Interactive Chart with the JavaScript ‘Billboard’ Library - diffify\n{florabr} 1.3.0: Explore Flora e Funga do Brasil Database - diffify\n{litedown} 0.2: A Lightweight Version of R Markdown - diffify\n{labelr} 0.1.9: Label Data Frames, Variables, and Values - diffify\n{declared} 0.25: Functions for Declared Missing Values - diffify\n{sna} 2.8: Tools for Social Network Analysis - diffify\n{openxlsx2} 1.9: Read, Write and Edit ‘xlsx’ Files - diffify\n{trekfont} 0.9.6: Star Trek Fonts Collection - diffify\n{trekcolors} 0.2.0: Star Trek Color Palettes - diffify\n\n🔍 Search on R-universe 🔍\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nThe Positron IDE, Tidy NLP and MLOps — with Dr. Julia Silge \nTutorials\nIntroduction to Interpretable Machine Learning in R\nExploratory Data Analysis: Economic Performance of China\nHow to webscrape in R?\nHow do you iterate a vector?\nHow to Use lapply() Function with Multiple Arguments in R\nExact significance tests for 2 × 2 tables\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nProbabilistic Network Inference and Analysis in R and Python workshop, October 3rd\nDatasets\nCSV files of the works of William Shakespeare.\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week\nI joined Twitter in 2022 to connect with other R programmers. A few months later, ownership transferred and I watched a mass exodus. 😭\nBut I hear there's no R community here? Not true. \nA good place to start looking:\n— Frank Hull 🍥 (@frankiethull) September 12, 2024\n\n\n\nIf you can write an R function you can make an API and you are already a backend web-dev. #rstats https://t.co/OxiNmGBjm2\n— Josiah (@JosiahParry) September 12, 2024\n\n\n\nI can't remember the last time I renamed variables manually in #rstats. I always use my data dictionary for renaming! That way, if I ever need to update names in the future, I'm only updating once in my data dictionary, not in both my data dictionary and script. 🙌 pic.twitter.com/oP06OZAaU1\n— Crystal Lewis (@Cghlewis) September 5, 2024",
      "link": "https://rweekly.org//2024-W38.html",
      "pubDate": "Mon, 16 Sep 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W37.html",
      "title": "R Weekly 2024-W37, chart axes, custom roxygen2 tag, FAIR",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Batool Almarzouq, with help from the R Weekly team members and contributors.\nHighlight\nFive ways to improve your chart axes\nCreate and use a custom roxygen2 tag\nMaking your blog FAIR\nInsights\nPLANES: Plausibility Analysis of Epidemiological Signals with the rplanes package\n\nR-Ladies Bariloche in Argentina: Fostering a Different Approach to  Leadership\nGender and sexuality in Australian surveys and census by @ellis2013nz\nR in Academia\nAn IV study design to estimate an effect size when randomization is not ethical\n\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{rplanes} 0.1.0: Plausibility Analysis of Epidemiological Signals\n{mmints} 0.1.0: Workflows for Building Web Applications\n{hdar} 1.0.0: ‘REST’ API Client for Accessing Data on ‘WEkEO HDA V2’\n{ggvolcano} 0.1.3: Publication-Ready Volcano Plots\n{geoidep} 0.1.0: Download Geographic Data on Various Topics Provided and Managed\nby the Spatial Data Infrastructure of Peru\n{flowmapblue} 0.0.2: Flow Map Rendering\n{easybio} 1.0: Comprehensive Single-Cell Annotation and Transcriptomic Analysis\nToolkit\n{SuperCell} 1.0: Simplification of scRNA-Seq Data by Merging Together Similar\nCells\n{pandemics} 0.1.0: Monitoring a Developing Pandemic with Available Data\n{mlmc} 2.0.2: Multi-Level Monte Carlo\n{GeRnika} 1.0.0: Simulation, Visualization and Comparison of Tumor Evolution Data\n{fastpng} 0.1.5: Read and Write PNG Files with Configurable Decoder/Encoder\nOptions\n{g3viz} 1.2.0: Interactively Visualize Genetic Mutation Data using a\nLollipop-Diagram\n{rPDBapi} 2.1: A Comprehensive Interface for Accessing the Protein Data Bank\n{wget} 0.0.2: Setting Download Method to ‘wget’\n{AOboot} 0.1.0: Bootstrapping in Different One-Way and Two-Way ANOVA\n{pooledpeaks} 1.0.5: Genetic Analysis of Pooled Samples\n{ropenmeteo} 0.1: Wrappers for ‘Open-Meteo’ API\n{rice} 0.1.1: Radiocarbon Calibration Equations\n{QuICSeedR} 0.1.2: Analyze Data for Fluorophore-Assisted Seed Amplification Assays\n{pakret} 0.1.0: Cite ‘R’ Packages on the Fly in ‘R Markdown’ and ‘Quarto’\n{GeoThinneR} 1.0.0: Simple Spatial Thinning for Ecological and Spatial Analysis\nCoding Skills\n{wintime} 0.1.0: Win Time Methods for Time-to-Event Data in Clinical Trials\n{TWW} 0.0.1: Growth Models\nHazards Model\n{cbbinom} 0.1.0: Continuous Analog of a Beta-Binomial Distribution\nUpdated Packages\n🔍 Search on R-universe 🔍\n{corporaexplorer} 0.9.0: A ‘Shiny’ App for Exploration of Text Collections - diffify\n{blme} 1.0-6: Bayesian Linear Mixed-Effects Models - diffify\n{kit} 0.0.19: Data Manipulation Functions Implemented in C - diffify\n{pbdZMQ} 0.3-12: Programming with Big Data – Interface to ‘ZeroMQ’ - diffify\n{salso} 0.3.41: Search Algorithms and Loss Functions for Bayesian Clustering - diffify\n{treesitter.r} 1.1.0: ‘R’ Grammar for ‘Tree-Sitter’ - diffify\n{sf} 1.0-17: Simple Features for R - diffify\n{maxstablePCA} 0.1.1: Apply a PCA Like Procedure Suited for Multivariate Extreme Value\nDistributions - diffify\n{MacBehaviour} 1.2.7: Behavioural Studies of Large Language Models - diffify\n{geobr} 1.9.1: Download Official Spatial Data Sets of Brazil - diffify\n{adehabitatMA} 0.3.17: Tools to Deal with Raster Maps - diffify\n{adehabitatLT} 0.3.28: Analysis of Animal Movements - diffify\n{SHELF} 1.11.0: Tools to Support the Sheffield Elicitation Framework - diffify\n{pedFamilias} 0.2.4: Import and Export ‘Familias’ Files - diffify\n{emoa} 0.5-3: Evolutionary Multiobjective Optimization Algorithms - diffify\n{caviarpd} 0.3.13: Cluster Analysis via Random Partition Distributions - diffify\n{bigsparser} 0.7.3: Sparse Matrix Format with Data on Disk - diffify\n{AFR} 0.3.6: Toolkit for Regression Analysis of Kazakhstan Banking Sector\nData - diffify\n{vivainsights} 0.5.4: Analyze and Visualize Data from ‘Microsoft Viva Insights’ - diffify\n{spatialwarnings} 3.1.0: Spatial Early Warning Signals of Ecosystem Degradation - diffify\n{polle} 1.5: Policy Learning - diffify\n{outliertree} 1.10.0: Explainable Outlier Detection Through Decision Tree Conditioning - diffify\n{NNS} 10.9.2: Nonlinear Nonparametric Statistics - diffify\n{netropy} 0.2.0: Statistical Entropy Analysis of Network Data - diffify\n{NADA2} 1.1.8: Data Analysis for Censored Environmental Data - diffify\n{DrugUtilisation} 0.7.1: Summarise Patient-Level Drug Utilisation in Data Mapped to the\nOMOP Common Data Model - diffify\n{rPDBapi} 2.1: A Comprehensive Interface for Accessing the Protein Data Bank - diffify\n{rgplates} 0.5.0: R Interface for the GPlates Web Service and Desktop Application - diffify\n{rts2} 0.7.6: Real-Time Disease Surveillance - diffify\n{lfproQC} 0.2.0: Quality Control for Label-Free Proteomics Expression Data - diffify\n{genekitr} 1.2.8: Gene Analysis Toolkit - diffify\n{flowmapper} 0.1.2: Draw Flows (Migration, Goods, Money, Information) on ‘ggplot2’\nPlots - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTidyX episode 186 : Gapminder camcorder - be kind and rewind\nTutorials\nFive ways to improve your chart axes\n\nSide by Side Comparison - Gleam vs R\nUse Posit tools with data in DuckDB, Databricks, and Snowflake\nBoost your shiny app with sparkling data visualizations: a deep dive into Chart.js JavaScript library\nHow do you iterate a vector?\nDr Drang and the Electoral College\nBoost your shiny app with sparkling data visualizations: a deep dive into Chart.js JavaScript library\nCreate and use a custom roxygen2 tag\nHarness the Full Potential of Case-Insensitive Searches with grep() in R\nMastering the grep() Function in R: Using OR Logic\nMaking your blog FAIR\n\n[LAST CHANCE] Dealing With Excel’s Pivot Tables\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nartistry\nHappy #FathersDay! 🧍🏡\nWe plotted emu occurrence data to celebrate the animal worlds’ great dads & dad figures... & stumbled on some egg-ceptional looking patterns… 🪺🗺️ #Rtistry\nMale emus' both incubate & rear those little stripey babies we all know & love... all alone! 🐣 pic.twitter.com/vrde1CNyme\n— Atlas of Living Aust (@atlaslivingaust) August 31, 2024\n\n\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W37.html",
      "pubDate": "Tue, 10 Sep 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W36.html",
      "title": "R Weekly 2024-W36 Long input lines, Translating Quarto, Codebase lint-free forever",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Sam Parmar, with help from the R Weekly team members and contributors.\nHighlight\nLong input lines\nTranslating Quarto (and other markdown files) into Any Language\nGet your codebase lint-free forever with lintr\nInsights\nGet notified of failing CRAN checks\nReproducible data science with Nix, part 12 – Nix as a polyglot build automation tool for data science\n\nDoes my test really validate a bug fix? Check it with git cherry-pick\nSampling without replacement with unequal probabilities by @ellis2013nz\nRatios of indexed line charts by @ellis2013nz\nHow  You Should Keep Score in Pickup Basketball\nLong input lines\nExploring the Top 5 pharmaverse Packages\n\nComparing {eefAnalytics} and {lmeInfo}\nR in the Real World\nNews from R Submissions Working Group – Pilot 3 Successfully Reviewed by FDA\nPackage & tools I learned about at posit::conf(2024)\nOur Experience at posit::conf 2024\nR in Organizations\nGxP Validation in Software Development starts from the Definition of Done\nrOpenSci News Digest, August 2024\nResources\nCausal inference in R\nModels demystified : a practical guide from t-tests to deep learning, by Michael Clark & Seth Berry (with R and Python code)\nMastodon Accounts Posting About #RStats\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\n📦 Create markdown-based surveys with quarto and shiny 📦\nCRAN\n{ClustMC} 0.1.1: Cluster-Based Multiple Comparisons\n{golem} 0.5.1 is now available\n\n{minesweeper} 1.0.0: Play Minesweeper\n{imputeMissings} 0.0.4: Impute Missing Values in a Predictive Context\n{ggreveal} 0.1.3: Reveal a ‘ggplot’ Incrementally\n{flowmapper} 0.1.1: Draw Flows (Migration, Goods, Money, Information) on ‘ggplot2’ Plots\n{mirrorselect} 0.0.3: Test CRAN/Bioconductor Mirror Speed\n{capesData} 0.0.1: Data on Scholarships in CAPES International Mobility Programs\n{osum} 0.1.0: Provide Summary Information About R Objects\n{gemini.R} 0.5.2: Interface for ‘Google Gemini’ API\n‘Malaria Atlas Project’\nGitHub or Bitbucket\n{ask}\n{pkgndep}\n{rvoronoi}\n{gplate}\nidiolect: a new R package for Forensic Authorship Analysis\nbiorecap: an R package for summarizing bioRxiv preprints with a local LLM\n\nUpdated Packages\n🔍 Search on R-universe 🔍\npkgKitten 0.2.4 on CRAN: Updates\n{streetscape} 1.0.3: Collect And Investigate Street Views For Urban Science - diffify\n{salty} 0.1.1: Turn Clean Data into Messy Data - diffify\n{PRNG} 0.0.2.1.1: A Pseudo-Random Number Generator - diffify\n{rscorecard} 0.29.0: A Method to Download Department of Education College Scorecard Data - diffify\n{pkgKitten} 0.2.4: Create Simple Packages Which Do not Upset R Package Checks - diffify\n{tabxplor} 1.2.0: User-Friendly Tables with Color Helpers for Data Exploration - diffify\n{openxlsx} 4.2.7: Read, Write and Edit xlsx Files - diffify\n{chromote} 0.3.1: Headless Chrome Web Browser Interface - diffify\n{servr} 0.31: A Simple HTTP Server to Serve Static Files or Dynamic Documents - diffify\n{duckdbfs} 0.0.7: High Performance Remote File System, Database and ‘Geospatial’ Access Using ‘duckdb’ - diffify\n{robotstxt} 0.7.15: A ‘robots.txt’ Parser and ‘Webbot’/’Spider’/’Crawler’ Permissions Checker - diffify\n{tables} 0.9.31: Formula-Driven Table Generation - diffify\n{s3fs} 0.1.7: ‘Amazon Web Service S3’ File System - diffify\n{atable} 0.1.15: Create Tables for Reporting Clinical Trials - diffify\n{startupmsg} 0.9.7: Utilities for Start-Up Messages - diffify Functions - diffify\n{admiralvaccine} 0.3.0: Vaccine Extension Package for ADaM in ‘R’ Asset Library - diffify\n{contingencytables} 3.0.1: Statistical Analysis of Contingency Tables - diffify\n{sas7bdat} 0.8: sas7bdat Reverse Engineering Documentation - diffify\n{archivist} 2.3.8: Tools for Storing, Restoring and Searching for R Objects - diffify\n{ctrdata} 1.19.2: Retrieve and Analyze Clinical Trials in Public Registers - diffify\n{ggfun} 0.1.6: Miscellaneous Functions for ‘ggplot2’ - diffify\n{BiocManager} 1.30.25: Access the Bioconductor Project Package Repository - diffify\n{frictionless} 1.2.0: Read and Write Frictionless Data Packages - diffify\n{portalr} 0.4.2: Create Useful Summaries of the Portal Data - diffify\n{f1dataR} 1.6.0: Access Formula 1 Data - diffify\n{tetRys} 1.2: Game of ‘tetRys’ - diffify\n{pmev} 0.1.2: Calculates Earned Value for a Project Schedule - diffify\n{tidypmc} 2.0: Parse Full Text XML Documents from PubMed Central - diffify\n{labelr} 0.1.8: Label Data Frames, Variables, and Values - diffify\n{data.table} 1.16.0: Extension of data.frame - diffify\n{cpp11} 0.5.0: A C++11 Interface for R’s C Interface - diffify\n{worldbank} 0.3.0: Client for World Banks’s ‘Indicators’ and ‘Poverty and Inequality Platform (PIP)’ APIs - diffify\n{curl} 5.2.2: A Modern and Flexible Web Client for R - diffify\n{GWalkR} 0.1.5: Interactive Exploratory Data Analysis Tool - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nHow to automatically detect data changes for your Shiny Calendar app\nShannon Pileggi @ The Prostate Cancer Clinical Trials Consortium\nShiny Apps\nShiny Contest 2024 Submissions\nR Internationally\nR4SocialScience: Empowering Social Science Research with R in India\nTutorials\nHow can you use the *frame functions from the package tibble?\nTranslating Quarto (and other markdown files) into Any Language\nGet your codebase lint-free forever with lintr\nMastering grep() in R: A Fun Guide to Pattern Matching and Replacement\nHow to use the agrep() function in base R\nHow to Use grep() for Exact Matching in Base R: A Comprehensive Guide\nUnderstanding Comments in C: Why They Matter and How to Use Them Effectively\nMastering the sapply() Function in R: A Comprehensive Guide for Data Manipulation\nJoining data sets with R\nLoading Excel files with missing numbers into R\nLoading files with missing numbers\nMaster Data & File Formats With R\nIntroducing surveydown: an R package and platform for creating markdown-based surveys with quarto and shiny\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nUpcoming Tidy Finance Webinar from R Consortium on Optimizing Portfolios using the Markowitz Model - September 4th, 2024 at 12:00 pm ET\nAnnouncing the 2024 Shiny Contest\nGrants & Funding\nThe 2024 ISC Grant Program will begin Accepting Applications Soon!\nConnect\nJoin the Data Science Learning Community\nrtistry\nImage of Takarazuka, Japan created in #rstats using data from #OpenStreetMap. pic.twitter.com/GEcTSOdm8H\n— R City Views (@rcityviews) August 31, 2024\n\n\n\n\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W36.html",
      "pubDate": "Mon, 02 Sep 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W35.html",
      "title": "R Weekly 2024-W35 - Profiling, reactable, and Quarto with parameters",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Colin Fay, with help from the R Weekly team members and contributors.\nHighlight\nUnveiling Bottlenecks (Part 2): A Deep Dive into Profiling Tools\nCreating interactive tables with reactable\nAutomating Quarto reports with parameters\nInsights\nFive highlights from posit::conf(2024)\nA visual journey through world exhibitions\nIPv4 Components in APL\nUnveiling Bottlenecks (Part 2): A Deep Dive into Profiling Tools\nMy Experience With Long Term Maintenance Of An R Package\nR in the Real World\nBuilding Bridges in Haifa, Israel: How the New R User Group in Haifa is Establishing a Diverse R Community\nWingspan Data Analysis\nComparing Many Models: Crude Oil Futures Price\nSimplifying Clinical Data Dashboards with {teal} and {pharmaverseadam}\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\ndatardis v.0.0.5 : latest Doctor Who episodes added to the datasets.\nRcppMagicEnum 0.0.1 on CRAN: New Package!\nUpdated Packages\n🔍 Search on R-universe 🔍\n{BiocManager} 1.30.24\ndigest 0.6.37 on CRAN: Maintenance\n{datardis} package v.0.0.5\n{dockerfiler} 0.2.3\n{ParallelLogger} 3.3.0\n{tinysnapshot} 0.0.5\n{golem} \t0.5.0\n{arrow} 17.0.0.1\n{rapiclient} 0.1.6\n{rjson} 0.2.22\n{RcppParallel} 5.1.9\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nNumber of UK viewers of Doctor Who episodes using the {datardis} package.\nAutomating Quarto reports with parameters\nConformalized adaptive (online/streaming) learning using learningmachine in Python and R\nPerturbing a non-symmetrical probability distribution\nlapply vs. sapply in R: What’s the Difference?\ngrep() vs. grepl() in R\n3MW (Bring tables to Word & Powerpoint with {flextable})\nCreating interactive tables with reactable\nSQL of the Rings: One Language to Query Them All (with R)\nWhat are the different ways of summing a variable?\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nAdvanced Panel Data Analysis in R workshop\nScreen Reader Accessible Tools and Resources for Learning and Working with R\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nA throwback to some algorithmic botany#rstats #creativecoding #plottertwitter pic.twitter.com/7AoA6gkx3n\n— chris (@dickie_roper) August 21, 2024\n\n\n\nAltea (work in progress)#rstats #generativeart #ggplot2 #maths pic.twitter.com/nNwn98HSxe\n— Antonio Sánchez Chinchón (@aschinchon) August 25, 2024",
      "link": "https://rweekly.org//2024-W35.html",
      "pubDate": "Mon, 26 Aug 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W34.html",
      "title": "R Weekly 2024-W34 Git Merge, Community, Quarto Templates",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Eric Nantz, with help from the R Weekly team members and contributors.\nHighlight\nPlease let me merge before I start crying and other things I’ve said at the Git terminal\nA New R Community in Ahmedabad, India, focused on Clinical Research and Pharmaceutical Industries\nDesigning and deploying internal Quarto templates\nInsights\nReclaiming your weekend with data contracts\nContributing to the R Project\nCreating a sustainable open-source ecosystem: Lessons from an NSF Grant and the #rstats hashtag\nFrom idea to code to image: Creative data visualizations in R\n\nContext is King\nTidy DataFrames but not Tibbles\nR in the Real World\nPlease let me merge before I start crying and other things I’ve said at the Git terminal\n\nR in Academia\nBayesian (nonlinear) adaptive learning\nPost-hoc Adjustment for Zero-Thresholded Linear Models\nResources\nmirai and crew: next-generation async to supercharge Plumber, Shiny, and targets\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nCRAN submission will be offline from Aug 1, 2024 to Aug 16, 2024 (CRAN team vacation and maintenance work)\nUpdated Packages\n🔍 Search on R-universe 🔍\nRcppEigen 0.3.4.0.1 on CRAN: Minor Maintenance\n{VeccTMVN} 1.0.0: Multivariate Normal Probabilities using Vecchia Approximation - diffify\n{tm.plugin.mail} 0.3-0: Text Mining E-Mail Plug-in - diffify\n{overtureR} 0.2.1: Load ‘Overture’ Datasets as ‘dbplyr’ and ‘sf’-Ready Data Frames - diffify\n{metajam} 0.3.1: Easily Download Data and Metadata from ‘DataONE’ - diffify\n{icosa} 0.11.1: Global Triangular and Penta-Hexagonal Grids Based on Tessellated Icosahedra - diffify\n{cba} 0.2-25: Clustering for Business Analytics - diffify\n{bimets} 4.0.2: Time Series and Econometric Modeling - diffify\n{survobj} 3.1.1: Objects to Simulate Survival Times - diffify\n{qualtRics} 3.2.1: Download ‘Qualtrics’ Survey Data - diffify\n{solvebio} 2.15.0: The Official SolveBio API Client - diffify\n{regressinator} 0.2.0: Simulate and Diagnose (Generalized) Linear Models - diffify\n{nestedcv} 0.7.10: Nested Cross-Validation with ‘glmnet’ and ‘caret’ - diffify\n{lingtypology} 1.1.18: Linguistic Typology and Mapping - diffify\n{unittest} 1.7-0: TAP-Compliant Unit Testing - diffify\n{StepReg} 1.5.2: Stepwise Regression Analysis - diffify\n{serpstatr} 0.3.0: ‘Serpstat’ API Wrapper - diffify\n{fluidsynth} 1.0.1: Read and Play Digital Music (MIDI) - diffify\n{convevol} 2.2.1: Analysis of Convergent Evolution - diffify\n{fastDummies} 1.7.4: Fast Creation of Dummy (Binary) Columns and Rows from Categorical Variables - diffify\n{SISIR} 0.2.3: Select Intervals Suited for Functional Regression - diffify\n{MethEvolSIM} 0.1.5: Simulate DNA Methylation Dynamics on Different Genomic Structures along Genealogies - diffify\n{jqr} 1.3.4: Client for ‘jq’, a ‘JSON’ Processor - diffify\n{V8} 5.0.0: Embedded JavaScript and WebAssembly Engine for R - diffify\n{proteomicsCV} 0.3.0: Calculates the Percentage CV for Mass Spectrometry-Based Proteomics Data - diffify\n{gpindex} 0.6.2: Generalized Price and Quantity Indexes - diffify\n{ghapps} 1.1.0: Authenticate as a ‘GitHub’ App - diffify\n{ecoreg} 0.2.5: Ecological Regression using Aggregate and Individual Data - diffify\n{poweRbal} 0.0.1.1: Phylogenetic Tree Models and the Power of Tree Shape Statistics - diffify\n{klassR} 0.2.4: Classifications and Codelists for Statistics Norway - diffify\n{insight} 0.20.3: Easy Access to Model Information for Various Model Objects - diffify\n{av} 0.9.1: Working with Audio and Video in R - diffify\n{PriceIndices} 0.2.0: Calculating Bilateral and Multilateral Price Indexes - diffify\n{incubate} 1.3.0: Parametric Time-to-Event Analysis with Variable Incubation Phases - diffify\n{AATtools} 0.0.3: Reliability and Scoring Routines for the Approach-Avoidance Task - diffify\n{rapidsplithalf} 0.3: A Fast Split-Half Reliability Algorithm - diffify\n{gasfluxes} 0.7: Greenhouse Gas Flux Calculation from Chamber Measurements - diffify\n{RcppEigen} 0.3.4.0.1: ‘Rcpp’ Integration for the ‘Eigen’ Templated Linear Algebra Library - diffify\n{nlme} 3.1-166: Linear and Nonlinear Mixed Effects Models - diffify\n{topicmodels} 0.2-17: Topic Models - diffify\n{kernlab} 0.9-33: Kernel-Based Machine Learning Lab - diffify\n{tm} 0.7-14: Text Mining Package - diffify\n{tseries} 0.10-57: Time Series Analysis and Computational Finance - diffify\n{Rpoppler} 0.1-3: PDF Tools Based on Poppler - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nShiny Apps\nNORC Live Crime Tracker\nBest Practices for Building Blazing-Fast Shiny Apps\nR Internationally\nA New R Community in Ahmedabad, India, focused on Clinical Research and Pharmaceutical Industries\nTutorials\nUse R to prompt a local LLM with ollamar\n\nReport Design in R: Small tweaks that make a big difference\nDesigning and deploying internal Quarto templates\nYour Life in Weeks\nMastering grepl with Multiple Patterns in Base R\nMastering Matrix Concatenation in R: A Guide to rbind() and cbind()\n3MW (Creating interactive tables with {reactable})\n\nOpening an Excel Workbook with VBA and Calling it from R\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nGetting creative with ggplot2 workshop\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W34.html",
      "pubDate": "Mon, 19 Aug 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W33.html",
      "title": "R Weekly 2024-W33 Snakes & Ladders, Tables, Deutschland Tour",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Carroll, with help from the RWeekly team members and contributors.\nHighlight\nSnakes and ladders by @ellis2013nz\nEverything new that’s in {gt} 0.11.0\nDeutschland Tour 2024\nInsights\nAuto XGBoost, Auto LightGBM, Auto CatBoost, Auto GradientBoosting\nExplanatory Data Analysis: Black Monday Crash\nSnakes and ladders by @ellis2013nz\n\nMastering Character Counting in R: Base R, stringr, and stringi\nHow to Check if a String Contains Specific Characters in R: A Comprehensive Guide with Base R, string & stringi\nChecking If a Workbook is Open Using VBA and Executing from R\nConverting Text to Uppercase with toupper() in R\nSystematic Sampleing in R with Base R\nEverything new that’s in {gt} 0.11.0\n3MW (Creating tables with {gt})\nR tidymodels: A tidyverse Like Ecosystem for Efficient Machine Learning in R\nUnveiling Bottlenecks: A Guide to Profiling R and R Shiny Code\nBuilding a Bunch of Quarto Extensions for Presentations\nDeutschland Tour 2024\nTableau in R for $0 (Introducing GWalkR)\nShiny in Production 2024: Full speaker lineup\nCopenhagenR, the 2024 spring season\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\nCRAN submission will be offline from Aug 1, 2024 to Aug 16, 2024 (CRAN team vacation and maintenance work)\nUpdated Packages\n🔍 Search on R-universe 🔍\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nuseR! 2024 Keynote - Keep R Weird\nTutorials\nMultistart nonlinear least squares fitting with {gslnls}\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nRoche’s first end-to-end R journey to submission\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W33.html",
      "pubDate": "Mon, 12 Aug 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W32.html",
      "title": "R Weekly 2024-W32 Tidymodels, Positron",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jon Calder, with help from the R Weekly team members and contributors.\nHighlight\nConverting New York’s Forest Carbon Assessment to Tidymodels\nR package development in Positron\nInsights\nR Consortium Grants Committee Announces New Chair\nPharma RUG: The Rise of R in China’s Pharmaceutical Industry\nR in Organizations\nPositron IDE - A new IDE for data science\nR package development in Positron\n\nAll You Need to Know About Rhino 1.8 and 1.9 Updates: A Fireside Chat\nR in Academia\nEpiLPS for estimation of incubation times\nVersion 1.2.1 of NIMBLE released\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\n{maestro} 0.1.2: Orchestration of Data Pipelines\n{interfacer} 0.2.3: Define and Enforce Contracts for Dataframes as Function\nParameters\n{LifemapR} 1.1.4: Data Visualisation on ‘Lifemap’ Tree\n\n{moocore} 0.1.0: Core Mathematical Functions for Multi-Objective Optimization\n{neotoma2} 1.0.4: Working with the Neotoma Paleoecology Database\nUpdated Packages\n🔍 Search on R-universe 🔍\n{usethis} 3.0.0: Automate Package and Project Setup - diffify\n{bslib} 0.8.0: Custom ‘Bootstrap’ ‘Sass’ Themes for ‘shiny’ and ‘rmarkdown’ - diffify\n{shiny} 1.9.1: Web Application Framework for R - diffify\n{cubar} 1.0.0: Codon Usage Bias Analysis - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nMastering Logistic Regression with Categorical Predictors: Always Positive Odds Ratios\nHow to create a data only package with devtools\nTutorials\nConverting New York’s Forest Carbon Assessment to Tidymodels\n\nStratified Sampling in R: A Practical Guide with Base R and dplyr\nParallelize R code using user-defined functions (UDFs) in sparklyr\nCreating typewriter-styled images in R\nHow to Interpret Interactions, Polynomials, and Splines with {marginaleffects}\nBlueSky Statistics Enhancements\nSpatial analysis with geostan\n{charcuterie} - What if Strings Were Iterable in R?\nAutomate Your Blog Workflow with a Custom R Function: Creating QMD Files\nA subtle flaw in pull()\n3MW (Reporting charts with {ggplot2})\nHow to Write Tests with shiny::testServer Similar to shinytest2\nObject Oriented Programming in R (Part 4): Reference Classes & R6 Classes\n\n-->\n\nR Project Updates\nUpdates from R Core\nUpcoming Events in 3 Months\nEvents in 3 Months:\nR/Pharma APAC track\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nAugust 13~14: Registration for posit::conf(2024)’s virtual experience is now open\nDatasets\n{collegeScorecard} 0.1.0: US College Scorecard Data\n{forested} 0.1.0: Forest Attributes in Washington State\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week\n\n\n\n\nGreat news - the latest release of @posit_pbc's Positron IDE appears to support most #rstats interactive graphics, including interactive @Mapbox globes from {mapgl}!\nThanks to the Posit team!\nCheck out the new IDE here: https://t.co/cb86ldZ5pd pic.twitter.com/SwoThOGsv6\n— Kyle Walker (@kyle_e_walker) July 29, 2024",
      "link": "https://rweekly.org//2024-W32.html",
      "pubDate": "Mon, 05 Aug 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W31.html",
      "title": "R Weekly 2024-W31 Oz Weather, Shiny Contest",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jon Calder, with help from the R Weekly team members and contributors.\nHighlight\nLet’s Talk About the Weather\n2024 Shiny Contest\nInsights\nR-Ladies Rome: Empowering Women in Data Science Through Collaboration and Innovation\nEmpowering the R Community: Insights from Myles Mitchell of the Leeds Data Science Group\nR in the Real World\nAmerican Idol Episodes’ Viewership\n\nGlobal movement of Happiness ladder with Machine learning in R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\n{weatherOz} 1.0.0: An API Client for Australian Weather and Climate Data Resources\n{precommit} 0.4.3: Pre-Commit Hooks\n{poldis} 0.1.1: Analyse Political Texts\n{tenm} 0.5.1: Temporal Ecological Niche Models\n{aka} 0.1.0: Define Aliases for R Expressions\n{Rdune} 1.1.0: Creates Color Palettes Inspired by Dune\nUpdated Packages\n🔍 Search on R-universe 🔍\n{ggblanket} 10.0.0: Simplify ‘ggplot2’ Visualisation - diffify\n{vcr} 1.6.0: Record ‘HTTP’ Calls to Disk - diffify\n{gtsummary} 2.0.0: Presentation-Ready Data Summary and Analytic Result Tables - diffify\n{nullabor} 0.3.12: Tools for Graphical Inference - diffify\n{cffr} 1.1.0: Generate Citation File Format (‘cff’) Metadata for R Packages - diffify\n{tidyfinance} 0.3.0: Tidy Finance Helper Functions - diffify\n{simodels} 0.1.0: Flexible Framework for Developing Spatial Interaction Models - diffify\n{tinycodet} 0.5.3: Functions to Help in your Coding Etiquette - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nIndependence Days with {purrr} - TidyX Episode 185\nTutorials\nLet’s Talk About the Weather\n\nPopulation age changes in the Pacific\nBootstrap Confidence Intervals: Exports in Japan\nExporting {gtsummary} tables to Excel.\nCreating Summary Tables in R with tidyquant and dplyr\nLlama, Llama, Oh Give Me A Sign. What’s In The Latest IDSA Guideline?\nSet temporary folder for R in Rstudio server\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nCall for Speakers - R in Pharma Conf 2024 (extended)\n2024 Shiny Contest\n\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week\nGeorge Stagg just released a new #quarto extension that allows for an embedded full feature code editor inside of Quarto slide deck! It supports both #rstats via #webr and #python via #pyodide.\nAnnouncement: https://t.co/tjHFNl4B55\nExtension:https://t.co/Q0IFUxNzZc pic.twitter.com/BMBzvnhpiw\n— James Balamuta (@axiomsofxyz) July 23, 2024",
      "link": "https://rweekly.org//2024-W31.html",
      "pubDate": "Mon, 29 Jul 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W30.html",
      "title": "R Weekly 2024-W30 Tile sprites, GitHub Copilot, extract functions",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Ryo Nakagawara, with help from the R Weekly team members and contributors.\nHighlight\nTile-style sprite delight\nSome thoughts after a trial run of GitHub’s Copilot Workspace\nExtracting names of functions defined in a script with treesitter\nInsights\nSome thoughts after a trial run of GitHub’s Copilot Workspace\nR in the Real World\nTile-style sprite delight\n\nResources\nEuro 2024 data\nIntroduction to R with Tidyverse - A 2-day introduction to the wonders of R.\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{iC10} 2.0.2: A Copy Number and Expression-Based Classifier for Breast Tumours\n{tidydelta} 0.1.0: Estimation of Standard Errors using Delta Method\n{LMPdata} 0.1.0: Easy Import of the EU Labour Market Policy Data\n{charlesschwabapi} 1.0.2: Wrapper Functions Around ‘Charles Schwab Individual Trader API’\n{databraryr} 0.6.6: Interact with the ‘Databrary.org’ API\n{zippeR} 0.1.0: Working with United States ZIP Code and ZIP Code Tabulation Area\nData\n{modisfast} 0.9.1: Fast and Efficient Access to MODIS Earth Observation Data\n{vol2birdR} 1.0.3: Vertical Profiles of Biological Signals in Weather Radar Data\nGitHub or Bitbucket\n{maize} 0.0.0.9000: Extension library for support vector machines in {tidymodels}\nUpdated Packages\n🔍 Search on R-universe 🔍\n{gert} 2.1.0: Simple Git Client for R - diffify\n{tidytable} 0.11.1: Tidy Interface to ‘data.table’ - diffify\n{Rdune} 1.1.0: ‘Creates Color Palettes Inspired by Dune’ - diffify\n{malariaAtlas} 1.6.1: An R Interface to Open-Access Malaria Data, Hosted by the ‘Malaria Atlas Project’ - diffify\n{gam} 1.22-4: Generalized Additive Models - diffify\n{Rcpp} 1.0.13: Seamless R and C++ Integration - diffify\n{ipumsr} 0.8.1: An R Interface for Downloading, Reading, and Handling IPUMS Data - diffify\n{pagenum} 1.3: Put Page Numbers on Graphics - diffify\n{imf.data} 0.1.6: An Interface to IMF (International Monetary Fund) Data JSON API - diffify\n{officedown} 0.3.3: Enhanced ‘R Markdown’ Format for ‘Word’ and ‘PowerPoint’ - diffify\n{httr2} 1.0.2: Perform HTTP Requests and Process the Responses - diffify\n{Rapp} 0.2.0: Easily Build Command Line Applications - diffify\n{magick} 2.8.4: Advanced Graphics and Image-Processing in R - diffify\n{ppendemic} 0.1.8: A Glimpse at the Diversity of Peru’s Endemic Plants - diffify\n{palettes} 0.2.1: Methods for Colour Vectors and Colour Palettes - diffify\n{phonfieldwork} 0.0.15: Linguistic Phonetic Fieldwork Tools - diffify\n{nuts} 1.1.0: Convert European Regional Data - diffify\n{callback} 0.1.1: Computes Statistics from Discrimination Experimental Data - diffify\n{pivotea} 1.0.2: Create Pivot Table Easily - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nR-Ladies Rome (English) - Quarto Dashboards\n Interactive wolves density heatmap in R using {mapbox} and {mapgl}\nShiny Apps\n3MW (Using Helper Functions With Golem)\n{shiny.telemetry} 0.3.0: Track User Behavior in Your Shiny Applications\nTutorials\nSchedule generator with R\nHow to Make a Volcano Plot in R using ggplot2\nExtracting names of functions defined in a script with treesitter\nExtracting all links from my slidedeck\nRcpp 1.0.13 on CRAN: Some Updates\nSimplify Regression Modeling with tidyAML?s fast_regression()\nVBA: Saving and Closing a Workbook\nHow to Extract Substring Starting from the End of a String in R\nR Microbenchmark: How to Measure and Compare the Execution of R Expressions\nAssessing the number of mapped reads in several bam files\nTransform data for easier multi-column tables\n\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week\nTo be a good geospatial data scientist, you need good tools.\nMy tool of choice is R.\nHere are the packages I can't live without:#rstats pic.twitter.com/92PQ5KKinP\n— Yohan Iddawela (@yohaniddawela) July 16, 2024\n\n\n\ndplyr::anti_join(), always there to help me quickly figure out who is missing from a dataset.🌟 #rstats pic.twitter.com/9gEbc6lArw\n— Crystal Lewis (@Cghlewis) July 4, 2024",
      "link": "https://rweekly.org//2024-W30.html",
      "pubDate": "Mon, 22 Jul 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W29.html",
      "title": "R Weekly 2024-W29, webrcli & spidyr, compare slider widget",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Batool Almarzouq, with help from the R Weekly team members and contributors.\nHighlight\nwebrcli & spidyr: What’s new\nCreate a Compare slider widget\nInsights\nSome updates about the insurance datasets package (CASdataset)\nThe Power of Transitioning to a ‘-verse’ Approach in R Package Development\nR in Academia\nRare Degenerative Diseases & Statistics:Methods for Analyzing Composite Patient Outcomes\n\nR in Organizations\nKolkata R User Group: A Rich History with Statistics \nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{osmapiR} 0.1.0: Interface to ‘OpenStreetMap API’\n{holi} 0.1.0: Higher Order Likelihood Inference Web Applications\n{modisfast} 0.9.1: Fast and Efficient Access to MODIS Earth Observation Data\n{iPRISM} 0.1.1: Intelligent Predicting Response to Cancer Immunotherapy Through\nSystematic Modeling\n{WES} 1.0.0: Tools for Analyzing Wastewater and Environmental Sampling Data\n{sampcompR} 0.2.0: Comparing and Visualizing Differences Between Surveys\n{mergenstudio} 1.0: ‘Mergen’ Studio: An ‘RStudio’ Addin Wrapper for the ‘Mergen’\nPackage\n{rnaCrosslinkOO} 0.1.4: Analysis of RNA Crosslinking Data\n{PurpleAir} 1.0.0: Query the ‘PurpleAir’ Application Programming Interface\n{exams.forge} 1.0.10: Support for Compiling Examination Tasks using the ‘exams’\nPackage\n{checked} 0.1.0: Systematically Run R CMD Checks\n{amscorer} 0.1.0: Clinical Scores Calculator for Healthcare\n{decp} 0.1.0: Complete Change Point Analysis\n{dapper} 1.0.0: Data Augmentation for Private Posterior Estimation\n{syrup} 0.1.0: Measure Memory and CPU Usage for Parallel R Code\n{rank} 0.1.0: Customisable Ranking of Numerical and Categorical Data\n{pEPA} 1.0: Tests of Equal Predictive Accuracy for Panels of Forecasts\n{paramDemo} 1.0.1: Parametric and Non-Parametric Demographic Functions and\nApplications\n{FastUtils} 0.1.1: Fast, Readable Utility Functions\nUpdated Packages\n🔍 Search on R-universe 🔍\nwebrcli & spidyr: What’s new\n\nRhino 1.9.0 Update on CRAN: New Formatting Tools and Cleaner {bslib} Integration\n{rhino} 1.9.0: A Framework for Enterprise Shiny Applications - diffify\n{RRNA} 1.2: Secondary Structure Plotting for RNA - diffify\n{Epi} 2.52: Statistical Analysis in Epidemiology - diffify\n{sotkanet} 0.10.1: Sotkanet Open Data Access and Analysis - diffify\n{gm} 2.0.0: Create Music with Ease - diffify\n{rsgeo} 0.1.7: An Interface to Rust’s ‘geo’ Library - diffify\n{duckdb} 1.0.0-1: DBI Package for the DuckDB Database Management System - diffify\n{gt} 0.11.0: Easily Create Presentation-Ready Display Tables - diffify\n{FielDHub} 1.4.0: A Shiny App for Design of Experiments in Life Sciences - diffify\n{childfree} 0.0.2: Access and Harmonize Childfree Demographic Data - diffify\n{quickcode} 0.9: Quick and Essential ‘R’ Tricks for Better Scripts - diffify\n{WeibullR.learnr} 0.1.3: An Interactive Introduction to Life Data Analysis - diffify\n{jmvReadWrite} 0.4.7: Read and Write ‘jamovi’ Files (‘.omv’) - diffify\n{dockerfiler} 0.2.3: Easy Dockerfile Creation from R - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nHow to Interpret Statistical Results with marginaleffects for R\nWhy use Github Actions (as an R programmer) ?\nR Internationally\nR Avanzado:  Libro escrito por Hadley Wickham con el que comprenderá cómo funciona el lenguaje y aprenderá nuevas estrategias para resolver diversos problems.\n\nTutorials\nLeafier & leaner: Leafy dendrograms and a leaner R package\n\nSchedule generator with R\nRandom Intercept Model in R: Interpretation and Visualization\nThe Unique Function in R: How to Use it in 4 Ways\nExploring Random Walks with TidyDensity in R\nUsing the FileDateTime Function in VBA from R\nGenerating Random City Names Based on Syllable Formation Rules\nExtracting Strings Before a Space in R\nUnleashing the Power of TidyDensity: Simplifying Distribution Analysis in R\nR Microbenchmark: How to Measure and Compare the Execution of R Expressions\nR functions for checking and fixing vmrk files from BrainVision\nCreate a Compare slider widget\nAnnotated area charts with plotnine\n\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nCall for Speakers - R in Pharma Conf 2024\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nrtistry\nI've finally found the time to get back to some #Rtistry this week! 🎨#RStats #GenArtClub #GenerativeArt pic.twitter.com/J7ghpl4q0m\n— Nicola Rennie | @nrennie@fosstodon.org (@nrennie35) July 4, 2024\n\n\nQuotes of the Week\nData Scientists that use R: \nStop giving chatgpt your data. \nDo this instead... 🧵#rstats pic.twitter.com/5ZxC0Y9zoF\n— 🔥 Matt Dancho (Business Science) 🔥 (@mdancho84) July 11, 2024\n\n\n\nThe Academic Reality pic.twitter.com/CtJH7IGEO3\n— Happy Researchers (@hapyresearchers) June 22, 2024",
      "link": "https://rweekly.org//2024-W29.html",
      "pubDate": "Mon, 15 Jul 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W28.html",
      "title": "R Weekly 2024-W28 R-Ladies Seattle, Faster R code with Rust, Conditional LinkingTo",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Sam Parmar, with help from the R Weekly team members and contributors.\nHighlight\nDiving into R with Isabella Velasquez: Perspectives from R-Ladies Seattle\nFaster R code with Rust\nConditional LinkingTo in R: Innovations Supporting Shiny\nInsights\nConditional LinkingTo in R: Innovations Supporting Shiny\n\nIntroducing Positron: A New, Yet Familiar IDE for R and Python\n{nara} demos\nType safe(r) R code\nR in the Real World\nShiny in Production 2024: Workshops\nDiving into R with Isabella Velasquez: Perspectives from R-Ladies Seattle\n\nWinners of the 2024 Table Contest\n\nFaster R code with Rust\nReproducible reports and presentations with Quarto\nR in Organizations\nR Consortium’s Submission Working Group: Advancing R for Regulatory Success at PharmaSUG 2024\nAnnouncing New Software Peer Review Editors: Beatriz Milz and Margaret Siple\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{PRA} 0.2.0: Project Risk Analysis\n{worldbank} 0.1.0: Client for the ‘World Bank Indicators API’\n{simdata} 0.4.0: Generate Simulated Datasets\n{orbital} 0.1.0: Predict with ‘tidymodels’ Workflows in Databases\nGitHub or Bitbucket\nIntroducing {Rdune}\n{nara}\n{tilebased} - move a sprite around a map inside an R graphics window (concept)\nUpdated Packages\n🔍 Search on R-universe 🔍\n{mirai} 1.1.1: Minimalist Async Evaluation Framework for R\nShinyProxy 3.1.1: What’s New and How It Improves Scalability and Performance of Your Shiny Applications\n{gibasa} 1.1.1: An Alternative ‘Rcpp’ Wrapper of ‘MeCab’ - diffify\n{mgi.report.reader} 0.1.2: Read Mouse Genome Informatics Reports - diffify\n{amberr} 1.1.0: ‘Amber’ Electronic Data Capture Client - diffify\n{treasury} 0.2.0: Client for US Treasury XML Feed and Published Data - diffify\n{yaml} 2.3.9: Methods to Convert R Data to YAML and Back - diffify\n{camtrapdp} 0.3.1: Read and Manipulate Camera Trap Data Packages - diffify\n{arcgislayers} 0.3.0: An Interface to ArcGIS Data Services - diffify\n{timeless} 0.2.3: Fast General Purpose Date/Time Converter - diffify\n{cpp11armadillo} 0.2.8: An ‘Armadillo’ Interface - diffify\n{downloadthis} 0.4.0: Implement Download Buttons in ‘rmarkdown’ - diffify\n{r4ds.tutorials} 0.3.0: Tutorials for “R for Data Science” - diffify\n{future.mirai} 0.2.2: A ‘Future’ API for Parallel Processing using ‘mirai’ - diffify\n{tidyfinance} 0.2.1: Tidy Finance Helper Functions - diffify\n{arcgisgeocode} 0.2.0: A Robust Interface to ArcGIS ‘Geocoding Services’ - diffify\n{zoomerjoin} 0.1.5: Superlatively Fast Fuzzy Joins - diffify\n{FamEvent} 3.2: Family Age-at-Onset Data Simulation and Penetrance Estimation - diffify\n{ps} 1.7.7: List, Query, Manipulate System Processes - diffify\n{DrugExposureDiagnostics} 1.0.6: Diagnostics for OMOP Common Data Model Drug Records - diffify\n{b64} 0.1.1: Fast and Vectorized Base 64 Engine - diffify\n{attachment} 0.4.2: Deal with Dependencies - diffify\n{nanoparquet} 0.3.1: Read and Write ‘Parquet’ Files - diffify\n{mirai} 1.1.1: Minimalist Async Evaluation Framework for R - diffify\n{khroma} 1.13.0: Colour Schemes for Scientific Data Visualization - diffify\n{pharmaverseadam} 1.0.0: ADaM Test Data for the ‘Pharmaverse’ Family of Packages - diffify\n{ctrdata} 1.19.0: Retrieve and Analyze Clinical Trials in Public Registers - diffify\n{erify} 0.6.0: Check Arguments and Generate Readable Error Messages - diffify\n{PoPdesign} 1.1.0: Posterior Predictive (PoP) Design for Phase I Clinical Trials - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nPositron IDE doing Data Analysis with R (Public Beta)\nPositron IDE Connecting to a Database in R and Displaying in the Connections Panel (Public Beta)\nPositron IDE accessing Projects on macOS using an Alfred workflow for Project Manager Extension\nRIP RStudio 🪦 Positron has my 💕\nStop Making Spaghetti (Code) - Nicola Rennie\nR Consortium’s R-based Test Submission Package for FDA Evaluation - Joel Laxamana\nRix: Reproducible Environments with Nix - Bruno Rodrigues\nShiny Apps\nShiny app for R packages nearing their CRAN deadlines\n{quartoextexp} - Shiny gadget to Explore and Install Extensions from Quarto Extensions Listing\nTutorials\nGenerating binary data by specifying the relative risk, with simulations\nIntroducing latent2likert v1.2.1: Converting Latent Variables into Likert Scale Responses\nStructural and Predictive Macro Analyses using the R Package bsvars workshop\nHow to Extract String After a Specific Character in R\nUnlocking the Power of Administrative Data with healthyR.data\nImproving your GitHub Profile\n3MW (Using Shiny Modules With Golem)\nTime Series Forecasting in R: From Moving Averages to Seasonal ARIMA\nFundamentals of map design with mapgl\nBuilding a Website in R - R-Ladies Rome & R-Ladies NYC\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nCall for Speakers - R in Pharma Conf 2024\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nGrants & Funding\n‘Cutting edge’ UL biomedical software project gets support from Chan Zuckerberg Initiative\nDatasets\nTidyTuesday 2024 W27 Datasets\nConnect\nJoin the Data Science Learning Community\nrtistry\n\n\nQuotes of the Week\n\n\n\n\nWith the new {mapgl} #rstats package, you can layer videos and animations on your @Mapbox or @maplibre maps!\nThe example shown implements Mapbox's video source tutorial in R.\nTry it out with the code here! https://t.co/BZhCqEMNab pic.twitter.com/jSlkbG1RLi\n— Kyle Walker (@kyle_e_walker) July 5, 2024",
      "link": "https://rweekly.org//2024-W28.html",
      "pubDate": "Mon, 08 Jul 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W27.html",
      "title": "R Weekly 2024-W27 30 years of R, Saving vectors, R Addicts Paris",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Colin, with help from the R Weekly team members and contributors.\nHighlight\nA timeline of R’s first 30 years\nHow to load and save vector data in R\nR Addicts Paris: Promoting Diversity in R\nInsights\nA timeline of R’s first 30 years\nR vs Power BI\nBeyond R Shiny: PyShiny’s Clean Design For Dynamic Plot Management\nR in the Real World\nR Addicts Paris: Promoting Diversity in R\nThe Crucial Role of Release Control in R for Healthcare Organizations\nPolynomial Support Vector Machines: Why Warner Music Entering the South Asia Market?\nResources\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nUpdated Packages\n🔍 Search on R-universe 🔍\nx13binary 1.1.61 on CRAN: Maintenance\ndigest 0.6.36 on CRAN: Big endian, maintenance\nbonsai 0.3.0\nmirai - Quality of Life Updates: Ten Small Improvements\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nRecap: Exploring Clinical Submissions with admiral: An R-Based ADaM Solution with Ben Straub\nGist & Cookbook\nUpdates to the Big Book of R\nTutorials\nInteractive Map Filter in Shiny\nWhat packages belong together? Learning from R code samples\nForecasting with XGBoost embedded in Quasi-Randomized Neural Networks\nHow to load and save vector data in R\nChoosing the Right Parent for R Object Classes\nExploring Random Walks and Brownian Motions with healthyR.ts\nHow to Extract Strings Between Specific Characters in R\nAn Introduction to healthyR.ai\nWriting Excel Spreadsheets to Disk with R and Python\n3MW (Using the Golem Framework for R-Shiny)\nR Dygraphs: How to Visualize Time Series Data in R and R Shiny\nFew notes on getting R package data from the local library\nLittle useless-useful R functions – Dragon curve\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nProvide your experiences with CRAN and R package development (survey)\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nCelebrating a Decade of EARL: Join us in Brighton, UK for EARL 2024!\nConnect\nJoin the Data Science Learning Community",
      "link": "https://rweekly.org//2024-W27.html",
      "pubDate": "Mon, 01 Jul 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W26.html",
      "title": "R Weekly 2024-W26 MotherDuck, sculpting the moon, nanoparquet",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Eric Nantz, with help from the R Weekly team members and contributors.\nHighlight\nJoining the flock from R: working with data on MotherDuck\nSculpting the Moon in R: Subdivision Surfaces and Displacement Mapping\nnanoparquet 0.3.0\nInsights\nIgnoring the IID assumption isn’t a great idea\nCreating Email Threads\nDigits Dilemma\nConstructing HTML with functions\nR in the Real World\nThe evolution of squad compositions at UEFA European Championships\nR in Academia\nMind the Gap: Using R/exams to Ease the Transition into STEM Studies\nOrdinal State Transition Models as a Unifying Risk Prediction Framework\nResources\nrOpenSci News Digest, June 2024\nData Cleaning with R Master Class is Live\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{shinyLottie} 1.0.0: Seamlessly Integrate ‘Lottie’ Animations into ‘shiny’\nApplications\n{tinyplot} 0.1.0: Lightweight Extension of the Base R Graphics System\n\n{rush} 0.1.0: Rapid Parallel and Distributed Computing\n{beastt} 0.0.1: Bayesian Evaluation, Analysis, and Simulation Software Tools for Trials\n{clrng} 0.0.3: Parallel Random Number Generation on GPU\n{redistverse} 0.1.0: Easily Install and Load Redistricting Software\n{bonsaiforest} 0.1.0: Shrinkage Based Forest Plots\n{priorsense} 1.0.0: Prior Diagnostics and Sensitivity Analysis\nGitHub or Bitbucket\nbrackets - A simple library to display tournament brackets\n\nUpdated Packages\n🔍 Search on R-universe 🔍\nWhat’s new in {PrettyCols} 1.1.0?\nnanotime 0.3.9 on CRAN: Bugfix\n{alone} v0.4 is now available\nnanoparquet 0.3.0\n{cli} 3.6.3: Helpers for Developing Command Line Interfaces - diffify\n{imgrec} 0.1.4: An Interface for Image Recognition - diffify\n{gasanalyzer} 0.4.1: Import, Recompute and Analyze Data from Portable Gas Analyzers - diffify\n{vital} 1.1.0: Tidy Analysis Tools for Mortality, Fertility, Migration and\nPopulation Data - diffify\n{ami} 0.1.1: Checks for Various Computing Environments - diffify\n{vetr} 0.2.18: Trust, but Verify - diffify\n{SIAtools} 0.1.1: ‘ShinyItemAnalysis’ Modules Development Toolkit - diffify\n{streamConnect} 0.0-6: Connecting Stream Mining Components Using Sockets and Web\nServices - diffify\n{admiralonco} 1.1.0: Oncology Extension Package for ADaM in ‘R’ Asset Library - diffify\n{patientProfilesVis} 2.0.9: Visualization of Patient Profiles - diffify\n\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nNew York R Conference 2024 Videos\nShiny Apps\nFuture urban climates - What will cities feel like in 60 years?\nOverlay mosaic crochet design tool\nR Internationally\nBridging the Digital Divide: Umar Isah Adam on Expanding R Access for Kano, Nigeria Students\nTutorials\nVetiver: Model Deployment\nPractical Examples with healthyR.ts\nExtracting Data from Another Workbook Using VBA and Executing It from R\nHow to Add Leading Zeros to Numbers in R\n3MW (Sharing data across modules)\nRace Charts in R: How to Visualize and Compare Change Over Time with gganimate\nJoining the flock from R: working with data on MotherDuck\nSculpting the Moon in R: Subdivision Surfaces and Displacement Mapping\n\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nMeta-Analysis in R workshop, July 11th 18:00-20:00 CEST\nAcademic and Personal Website Creation: A Quarto Tutorial workshop\nConnect\nJoin the Data Science Learning Community\nrtistry\n\n\n\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W26.html",
      "pubDate": "Mon, 24 Jun 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W25.html",
      "title": "R Weekly 2024-W25 CRAN deadlines, R-universe, {handwriter} package",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Ryo Nakagawara, with help from the R Weekly team members and contributors.\nHighlight\nExpose CRAN deadlines and DOIs\nA fresh new look for R-universe!\n{handwriter} 3.1.1: Handwriting Analysis in R\nInsights\nKeith Karani Wachira: Leading the Dekut R Community in Kenya and Innovating with R?\nExpose CRAN deadlines and DOIs\n\nA fresh new look for R-universe!\nHack your way to a good Git history\nR in the Real World\nForecasting the UEFA Euro 2024 with a machine learning ensemble\nSimulations for 2024 Euro Cup and Copa America\n\nNew Packages\n📦 Go Live for More New Pkgs 📦\nCRAN\n{bidask} 2.0.4: Efficient Estimation of Bid-Ask Spreads from Open, High, Low,\nand Close Prices\n{RPregression} 0.1.0: A Simple Regression and Plotting Tool\n{PerMat} 0.1.0: Performance Metrics in Predictive Modeling\n{CITMIC} 0.1.0: Estimation of Cell Infiltration Based on Cell Crosstalk\n{parTimeROC} 0.1.0: Parametric Time-Dependent Receiver Operating Characteristic\n{ehymet} 0.1.0: Methodologies for Functional Data Based on the Epigraph and\nHypograph Indices\n{sched} 1.0.1: Request Scheduler\n{rioplot} 1.1.1: Turn a Regression Model Inside Out\n{M3} 0.4: Reading M3 Files\n{smile} 1.0.5: Spatial Misalignment: Interpolation, Linkage, and Estimation\n{repeated} 1.1.8: Non-Normal Repeated Measurements Models\n{datadriftR} 0.0.1: Concept Drift Detection Methods for Stream Data\n{cumulcalib} 0.0.1: Cumulative Calibration Assessment for Prediction Models\n{VertexWiseR} 1.0.0: Simplified Vertex-Wise Analyses of Whole-Brain and Hippocampal\nSurface\n{synthesizer} 0.2.0: Synthesize Data Based on Emperical Multivariate Distributions\nand Rank Order Matching\n{scCAN} 1.0.5: Single-Cell Clustering using Autoencoder and Network Fusion\n{samplrData} 1.0.0: Datasets from the SAMPLING Project\n{pci} 1.0.1: A Collection of Process Capability Index Functions\n{Rtapas} 1.2: Random Tanglegram Partitions\n{SurveyDefense} 0.1.0: Survey Defense Tool\n{settingsSync} 3.0.2: ‘Rstudio’ Addin to Sync Settings and Keymaps\n{hdcuremodels} 0.0.1: Penalized Mixture Cure Models for High-Dimensional Data\n{margins} 0.3.27: Marginal Effects for Model Objects\n{RMSDp} 0.1.1: Refined Modified Stahel-Donoho (MSD) Estimators for Outlier\nDetection (Parallel Version)\n{optiSel} 2.0.8: Optimum Contribution Selection and Population Genetics\n{prediction} 0.3.18: Tidy, Type-Safe ‘prediction()’ Methods\n{piecewiseSEM} 2.3.0.1: Piecewise Structural Equation Modeling\n{VAR.spec} 1.0: Allows Specifying a Bivariate VAR (Vector Autoregression) with\nDesired Spectral Characteristics\n{SoilSaltIndex} 0.1.0: Soil Salinity Indices Generation using Satellite Data\n{ppgm} 1.0.3: PaleoPhyloGeographic Modeling of Climate Niches and Species\nDistributions\n{numberize} 1.0.0: Convert Words to Numbers in Multiple Languages\n{multinma} 0.7.1: Bayesian Network Meta-Analysis of Individual and Aggregate Data\n{mcstatsim} 0.1.0: Monte Carlo Statistical Simulation Tools Using a Functional\nApproach\n{mauricer} 2.5.4: Work with ‘BEAST2’ Packages\n{colocPropTest} 0.9.1: Proportional Testing for Colocalisation Analysis\n{catregs} 0.2.0: Post-Estimation Functions for Generalized Linear Mixed Models\n{birdie} 0.6.1: Bayesian Instrumental Regression for Disparity Estimation\n{PAMscapes} 0.5.8: Tools for Summarising and Analysing Soundscape Data\n{qlcVisualize} 0.3: Visualization for Quantitative Language Comparison\n{multilevelcoda} 1.3.0: Estimate Bayesian Multilevel Models for Compositional Data\n{ecochange} 2.9.3.2: Integrating Ecosystem Remote Sensing Products to Derive EBV\nIndicators\n{qlcData} 0.3: Processing Data for Quantitative Language Comparison\n{ncdfCF} 0.1.1: Easy Access to NetCDF Files with CF Metadata Conventions\n{lakhesis} 0.0.1: Consensus Seriation for Binary Data\n{jstager} 0.0.2: Retrieve Information Published on J-STAGE\n{igraphwalshdata} 0.1.0: ‘igraph’ Datasets from Melanie Walsh\n{gwzinbr} 0.1.0: Geographically Weighted Zero Inflated Negative Binomial\nRegression\n{cassandRa} 0.2.0: Finds Missing Links and Metric Confidence Intervals in\nEcological Bipartite Networks\n{bcc} 1.5: Beta Control Charts\n{rsides} 0.1: SIDES-Based Subgroup Search Algorithms\n{PredictorSelect} 0.1.0: Out-of-Sample Predictability in Predictive Regressions with Many\nPredictor Candidates\n{ICompELM} 0.1.0: Independent Component Analysis Based Extreme Learning Machine\n{gmtFD} 0.1.0: General Multiple Tests for Univariate and Multivariate\nFunctional Data\n{arrowheadr} 1.0.1: Make Custom Arrowheads\n{geodata} 0.6-2: Download Geographic Data\n{blandr} 0.6.0: Bland-Altman Method Comparison\n{cryptotrackr} 1.3.3: An Interface to Crypto Data Sources\nGitHub or Bitbucket\nUtility Functions and Composite Goods in Economics\nUpdated Packages\n🔍 Search on R-universe 🔍\n{lightgbm} 4.3.0: Light Gradient Boosting Machine - diffify\n{alone} 0.4: Datasets from the Survival TV Series Alone - diffify\n{handwriter} 3.1.1: Handwriting Analysis in R - diffify\n{ggplate} 0.1.3: Create Layout Plots of Biological Culture Plates and Microplates - diffify\n{CAST} 1.0.2: ‘caret’ Applications for Spatial-Temporal Models - diffify\n{troopdata} 1.0.0: Tools for Analyzing Cross-National Military Deployment and\nBasing Data - diffify\n{torchvision} 0.6.0: Models, Datasets and Transformations for Images - diffify\n{modelsummary} 2.1.1: Summary Tables and Plots for Statistical Models and Data:\nBeautiful, Customizable, and Publication-Ready - diffify\n{marginaleffects} 0.21.0: Predictions, Comparisons, Slopes, Marginal Means, and Hypothesis\nTests - diffify\n{settingsSync} 3.0.2: ‘Rstudio’ Addin to Sync Settings and Keymaps - diffify\n{CohortConstructor} 0.2.1: Build and Manipulate Study Cohorts Using a Common Data Model - diffify\n{Apoderoides} 2.0.0: Prioritize and Delete Erroneous Taxa in a Large Phylogenetic\nTree - diffify\n{ggblanket} 9.1.1: Simplify ‘ggplot2’ Visualisation - diffify\n{duckdb} 1.0.0: DBI Package for the DuckDB Database Management System - diffify\n{MASS} 7.3-61: Support Functions and Datasets for Venables and Ripley’s MASS - diffify\n{fixest} 0.12.1: Fast Fixed-Effects Estimations - diffify\n{geomtextpath} 0.1.4: Curved Text in ‘ggplot2’ - diffify\n{geoarrow} 0.2.1: Extension Types for Spatial Data for Use with ‘Arrow’ - diffify\n{Epi} 2.51: Statistical Analysis in Epidemiology - diffify\n{cfr} 0.1.1: Estimate Disease Severity and Case Ascertainment - diffify\n{poputils} 0.3.1: Demographic Analysis and Data Manipulation - diffify\n{diffviewer} 0.1.2: HTML Widget to Show File Differences - diffify\n{vitae} 0.6.0: Curriculum Vitae for R Markdown - diffify\n{mlr} 2.19.2: Machine Learning in R - diffify\n{swagger} 5.17.14: Dynamically Generates Documentation from a ‘Swagger’ Compliant\nAPI - diffify\n{soilDB} 2.8.3: Soil Database Interface - diffify\n{nanostringr} 0.4.2: Performs Quality Control, Data Normalization, and Batch Effect\nCorrection for ‘NanoString nCounter’ Data - diffify\n{SchoolDataIT} 0.1.2: Retrieve, Harmonise and Map Open Data Regarding the Italian\nSchool System - diffify\n{mapSpain} 0.9.1: Administrative Boundaries of Spain - diffify\n{khisr} 1.0.4: An R Client to Retrieve Data from DHIS2 - diffify\n{ggfoundry} 0.2.0: Shape Foundry & Geom for ‘ggplot2’ - diffify\n{nimble} 1.2.0: MCMC, Particle Filtering, and Programmable Hierarchical Modeling - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nScraping the R-Weekly Highlights Podcast\nShiny Apps\n3MW (Shiny’s module-first approach)\nR Internationally\nR para la Ciencia de datos\nTutorials\nAutomatic transformation of standard errors?\nExtracting Numbers from Strings in R\nSupercharge your #rstats web searching in Google Chrome with Site Search Shortcuts\nIncorporating time-varying seasonality in forecast models\n{cryptoQuotes}: Open access to cryptocurrency market data in R (Update)\nTraditional Frequentist Inference Uses Unrealistic Priors\nAutomatic transformation of standard errors?\nDeal with extreme values\n\n-->\n\nR Project Updates\nUpdates from R Core:\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nMeta-Analysis in R workshop, July 11th 18:00-20:00 CEST\nJobs\n💼 Explore Jobs & Gigs Board on RStudio Community 💼",
      "link": "https://rweekly.org//2024-W25.html",
      "pubDate": "Mon, 17 Jun 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W24.html",
      "title": "R Weekly 2024-W24 R dialects, small git commits, fast geocoding",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Tony ElHabr, with help from the R Weekly team members and contributors.\nHighlight\nTwo Roads Diverged: Opinions on “dialects” in R\nWhy you need small, informative Git commits\nMaking a Ridiculously Fast™ API Client\nInsights\nTwo Roads Diverged: Opinions on “dialects” in R\nThe igraph R package crossed the 2.0 threshold!\nWhy you need small, informative Git commits\nMaking a Ridiculously Fast™ API Client\n3MW (RStudio productivity hacks)\nBoost Your Shiny App’s Code Quality with {box.linters} in {rhino} 1.8.0\nFrom scripts to package. Developing dendroNetwork and learning with rOpenSci\nR in the Real World\nPublic Pinball Machines per Capita: A new global indicator\n\nTeam Strength: A CanMNT Snapshot\nThe Sanctuary: Stats and data from {survivoR}\n\nCausal Inference: Technology Stocks Surge\n\nEstimating Shooting Performance Unlikeliness: Quantifying how unlikely a player’s season-long shooting performance is, factoring in their prior shot history\nR in Organizations\nFull-time Korea R User Group Founder Victor Lee Sees AI Future for R and Quarto Textbooks\nResources\nCleaning Medical Data in R\nNew Packages\n📦 Go Live for More New Pkgs 📦\n -->\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{baf} 0.0.1: Block Assignment Files\n{goodpractice} 1.0.5: Advice on R Package Building\n{ggarrow} 0.1.0: Arrows for ‘ggplot2’\n{geostan} 0.6.2: Bayesian Spatial Analysis\n{DNAmotif} 0.1.0: DNA Sequence Motifs\nBioconductor\n{shiny.gosling} 1.0.1: A Grammar-based Toolkit for Scalable and Interactive Genomics Data Visualization for R and Shiny\nGitHub or Bitbucket\n{litedown} 0.0.20: A Lightweight Version of R Markdown\nUpdated Packages\n🔍 Search on R-universe 🔍\n{mirai} 1.1.0: Minimalist Async Evaluation Framework for R - diffify\n{nanonext} 1.1.0: R binding for NNG (Nanomsg Next Gen) - diffify\n{santoku} 1.0.0: A versatile cutting tool\n{ulid} 0.4.0: Generate Universally Unique ‘Lexicographically’ ‘Sortable’ Identifiers - diffify\n{odbc} 1.5.0: Connect to ODBC Compatible Databases (using the DBI Interface) - diffify\n{openxlsx2} 1.7: Read, Write and Edit ‘xlsx’ Files - diffify\n{hardhat} 1.4.0: Construct Modeling Packages - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nSDS 790: Open-Source Libraries for Data Science at the New York R Conference\nShiny Apps\nA decade of parkrun\nTutorials\nGeocode from R using {arcgisgeocode}\nColoured text in {ggplot2}: {ggtext} vs {marquee}\n\nWhy you shouldn’t use boxplots\nConverting formatting in spreadsheets into usable data\nsimstudy: another way to generate data from a non-standard density\nSimple custom colour palettes with R ggplot graphs\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nJune 2024 Training Update\nUpcoming Events in 3 Months\nEvents in 3 Months:\nPolytomous Latent Class Analysis and Regression in R workshop - July 3\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nposit::conf(2024) - August 12 - 14\nCascadia R Conference 2024\nConnect\nJoin the Data Science Learning Community\nrtistry\n#TidyTuesday week 23: Cheese #Rstats #dataviz #ggplot\n[image or embed]\n— Deepali Kank (@deepali.bsky.social) Jun 5, 2024 at 1:12 AM\n\n\nQuotes of the Week\nthis is how it feels cleaning data with dplyr \n pic.twitter.com/dAWseNRZXb\n— Carlos Alberto Haro (@haro_ca_) June 6, 2024\n\n\n\nThings are coming together in this summer's project to bring @Mapbox GL JS v3 to #rstats...\nSeamless 3D terrain visualization of the globe, straight from your R console to your RStudio Viewer\nStill a ways to go, but excited about the direction it's going... pic.twitter.com/8nsjZPky5P\n— Kyle Walker (@kyle_e_walker) June 8, 2024\n\n\n\nThe plot thickens! SQL/SEQUEL was developed to manipulate a database called…. wait for it …. System R#rstats https://t.co/DZhqHTzbtY pic.twitter.com/KHbUBdep1R\n— Tom Carpenter, PhD (@tcarpenter216) June 6, 2024",
      "link": "https://rweekly.org//2024-W24.html",
      "pubDate": "Mon, 10 Jun 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W23.html",
      "title": "R Weekly 2024-W23 Compa-tibble, Tutorials with Quarto",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jon Calder, with help from the R Weekly team members and contributors.\nHighlight\nMake your functions compa-tibble\nCreating R tutorial worksheets (with and without solutions) using Quarto\nInsights\nMake your functions compa-tibble\nNon-API calls conundrum, CRAN, cpp11, minty, true length, vendoring, readODS\nR4HR in Buenos Aires: Leveraging R for Dynamic HR Solutions\nR in the Real World\nRace and Ethnicity in New York City\n\nR in Organizations\nOne More Step Forward: The R Consortium Submission Working Group’s Presentation to Swissmedic on Regulatory Submission using R and Shiny\nNew Packages\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{ggfoundry} 0.1.1: Hand-crafted fillable shapes for ggplot2.\n{marquee} 0.1.0: Markdown Parser and Renderer for R Graphics\n{sparsevctrs} 0.1.0: Sparse Vectors for Use in Data Frames\n{geoarrow} 0.2.0: Extension Types for Spatial Data for Use with ‘Arrow’\n{emphatic} 0.1.8: Exploratory Analysis of Tabular Data using Colour Highlighting\n\nGitHub\n{geotargets} 0.1.0: ‘Targets’ Extensions for Geospatial Formats\nUpdated Packages\n🔍 Search on R-universe 🔍\n{survivoR} 2.3.3: Data from all Seasons of Survivor (US) TV Series in Tidy Format - diffify\n{RcppArmadillo} 0.12.8.4.0: ‘Rcpp’ Integration for the ‘Armadillo’ Templated Linear Algebra\nLibrary - diffify\n{RMariaDB} 1.3.2: Database Interface and MariaDB Driver - diffify\n{bulkreadr} 1.1.1: The Ultimate Tool for Reading Data in Bulk - diffify\n{ggwordcloud} 0.6.2: A Word Cloud Geom for ‘ggplot2’ - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTidyX Episode 181 - I Likert Coffee\nShiny Apps\n3MW (Improve Your R-Shiny App With Modules)\nIntroducing LogAnalyzer: An Easy-to-Use Log Monitoring Tool for R/Shiny Applications\nHow to Develop Robust and Maintainable JavaScript Code Within a Shiny Application\nA simple way to speed up shinytest2 tests\nTutorials\nWhat is the difference between (un)packing and (un)nesting a tibble?\nUnveiling the Power of get_cms_meta_data() in healthyR.data\nIterative Square Root\nForecasting the Economy\nCalculating data for visualization on stacked 100% bar\nCreating R tutorial worksheets (with and without solutions) using Quarto\nCustomise your R startup message\nR One Billion Row Challenge: Is R Viable Option for Analyzing Huge Datasets?\nWhat are the use cases for using nested data over packed data?\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nShiny in Production 2024: Call for Abstracts\nUpcoming Events in 3 Months\nEvents in 3 Months:\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nCascadia R Conference 2024\nConnect\nJoin the Data Science Learning Community\nrtistry\n🚨New chart tutorial alert! 🙂\nLearn how to build a clean choropleth map with a histogram included as a legend.\nAll made with #rstats and ggplot2. 🔥\nFull tuto:https://t.co/RjP2UX5jky\nThanks @viniciusoike for the contribution, and @joseph_barbier for the tweaks! 🙏 pic.twitter.com/2VK5RCDvMi\n— Yan Holtz (@R_Graph_Gallery) May 30, 2024\n\n\nQuotes of the Week\nFYI, base #rstats rounds to the even number at .5, rather than always rounding up.\n1.5 -> 2\n2.5 -> 2\nIf you want to to always round up at .5, you can use janitor::round_half_up(). https://t.co/ANTMzO2Yzs pic.twitter.com/N3Y3D3wu9s\n— Crystal Lewis (@Cghlewis) May 29, 2024",
      "link": "https://rweekly.org//2024-W23.html",
      "pubDate": "Mon, 03 Jun 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W22.html",
      "title": "R Weekly 2024-W22 Functional OOP, Overture Maps, Refactoring Tests",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Jonathan Carroll, with help from the RWeekly team members and contributors.\nHighlight\nGeneralizing Support for Functional OOP in R\nGetting and visualizing Overture Maps buildings data in R\nWhat I edit when refactoring a test file\nInsights\nCrossvalidation in complex survey data\nPlotting weather data with ggplot()\nGeneralizing Support for Functional OOP in R\nA detailed introduction to Deep Quasi-Randomized ‘neural’ networks\nA security issue with R serialization\nrOpenSci News Digest, May 2024\nWhat I edit when refactoring a test file\nMetallica tour history with R and PowerBI\nTesting components with shinytest2\nGetting and visualizing Overture Maps buildings data in R\n\nHow to Remove Specific Elements from a Vector in R\nHow to Split a Vector into Chunks in R\nHow to Split a Number into Digits in R Using gsub() and Nstrsplit()\nHow to Drop or Select Rows with a Specific String in R\nUpdate to healthyR.data 1.1.0\n3MW (Dynamic UI with R-Shiny)\nGet a Free New Logo for Your R Package in Our Hex Design Contest\nR Users\nCollaborative Growth: The Botswana R User Group and Regional Partnerships\nResources\nAnnouncing gptstudio v0.4.0: Enhanced AI Integration in Your RStudio IDE\n\nNew Packages\n📦 Keep up to date wtih CRANberries 📦\nCRAN\n{PRNG} 0.0.1: A Pseudo-Random Number Generator\n{equatiomatic} 0.3.3: Transform Models into ‘LaTeX’ Equations\n{box.linters} 0.9.0: Linters for ‘box’ Modules\n{tryr} 0.1.1: Client/Server Error Handling for HTTP API Frameworks\n{stbl} 0.1.1: Stabilize Function Arguments\n{gpuR} 2.0.6: GPU Functions for R Objects\n{factorplot} 1.2.3: Presenting Pairwise Comparisons\n{minty} 0.0.1: Minimal Type Guesser\n{tabulapdf} 1.0.5-3: Extract Tables from PDF Documents\n{MPCR} 1.1.1: Multi- And Mixed-Precision Computations\n{ggdaynight} 0.1.3: Add Day/Night Patterns to ‘ggplot2’ Plots\nUpdated Packages\n🔍 Search on R-universe 🔍\nIntroducing Keras 3 for R\nsimstudy 0.8.0: customized distributions\nAnnouncing Exciting Updates to Shiny-React Ecosystem\n{gotop} 0.1.4: Scroll Back to Top Icon in Shiny and R Markdown - diffify\n{highr} 0.11: Syntax Highlighting for R Source Code - diffify\n{readODS} 2.3.0: Read and Write ODS Files - diffify\n{arrow} 16.1.0: Integration to ‘Apache’ ‘Arrow’ - diffify\n{ggblanket} 9.1.0: Simplify ‘ggplot2’ Visualisation - diffify\n{esquisse} 2.0.0: Explore and Visualize Your Data Interactively - diffify\n{googleVis} 0.7.3: R Interface to Google Charts - diffify\n{shinyChatR} 1.2.0: R Shiny Chat Module - diffify\n{vcfppR} 0.4.6: Rapid Manipulation of the Variant Call Format (VCF) - diffify\n{rsconnect} 1.3.0: Deploy Docs, Apps, and APIs to ‘Posit Connect’, ‘shinyapps.io’, and ‘RPubs’ - diffify\n{textshaping} 0.4.0: Bindings to the ‘HarfBuzz’ and ‘Fribidi’ Libraries for Text Shaping - diffify\n{archetypal} 1.3.1: Finds the Archetypal Analysis of a Data Frame - diffify\n{backports} 1.5.0: Reimplementations of Functions Introduced Since R-3.0.0 - diffify\n{rio} 1.1.0: A Swiss-Army Knife for Data I/O - diffify\n{timeplyr} 0.8.0: Fast Tidy Tools for Date and Date-Time Manipulation - diffify\n{googleAuthR} 2.0.2: Authenticate and Create Google APIs - diffify\n{torch} 0.13.0: Tensors and Neural Networks with ‘GPU’ Acceleration - diffify\n{reticulate} 1.37.0: Interface to ‘Python’ - diffify\n{rapiclient} 0.1.5: Dynamic OpenAPI/Swagger Client - diffify\n{gptstudio} 0.4.0: Use Large Language Models Directly in your Development Environment - diffify\n{duckplyr} 0.4.0: A ‘DuckDB’-Backed Version of ‘dplyr’ - diffify\n{deps} 0.3.0: Dependency Management with ‘roxygen’-Style Comments - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nTutorials\nAutomate Canvas LMS Tasks with vvcanvas\nMastering purrr: From Basic Maps to Functional Magic in R\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nUpcoming Events in 3 Months\nEvents in 3 Months:\nEffective Visual Communication with R workshop\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nQuotes of the Week",
      "link": "https://rweekly.org//2024-W22.html",
      "pubDate": "Mon, 27 May 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    },
    {
      "id": "https://rweekly.org//2024-W21.html",
      "title": "R Weekly 2024-W21, Automate code refactoring, Faster Code, Open-Source Project",
      "description": "Hello and welcome to this new issue!\n\r\n\t\t\t\t\nHow to have (my) content shared by R Weekly?\nThis week’s release was curated by Batool Almarzouq, with help from the R Weekly team members and contributors.\nHighlight\nAutomate code refactoring with {xmlparsedata} and {brio}\nFind Out How many Times Faster your Code is\nCommunication Tips for your Open-Source Project\nInsights\nGergely Daróczi’s Journey: Empowering R Users in Hungary\n\nEnhancing R: The Vision and Impact of Jan Vitek’s MaintainR Initiative\nThe Evolution of Melbourne’s Business Analytics and R Business User Group \nCommunication Tips for your Open-Source Project\nR in the Real World\nNew York City’s POC Population                                                                                                                                        \n\n\n\nNew Packages\n📦 Go Live for More New Pkgs 📦\nRApiSerialize 0.1.3 on CRAN: Skipping XDR                                                                                                                                           \nCRAN\n{ravetools} 0.1.5: Signal and Image Processing Toolbox for Analyzing Intracranial\nElectroencephalography Data\n\n{mgwrhw} 1.1.1.5: Displays GWR (Geographically Weighted Regression) and Mixed GWR\nOutput and Map\n{crosstalkr} 1.0.5: Analysis of Graph-Structured Data with a Focus on\nProtein-Protein Interaction Networks\n{crosslag} 0.1.0: Perform Linear or Nonlinear Cross Lag Analysis\n{bbnet} 1.0.1: Create Simple Predictive Models on Bayesian Belief Networks\n{CDGHMM} 0.1.0: Hidden Markov Models for Multivariate Panel Data\n{BioM2} 1.0.6: Biologically Explainable Machine Learning Framework\n{srcpkgs} 0.1: R Source Packages Manager\n{tricolore} 1.2.4: A Flexible Color Scale for Ternary Compositions\n\n{biologicalActivityIndices} 0.1.0: Biological Activity Indices\n{arcgisplaces} 0.1.0: Search for POIs using ArcGIS ‘Places Service’\n{rechaRge} 1.0.0: HydroBudget – Groundwater Recharge Model\n{rKolada} 0.2.3: Access Data from the ‘Kolada’ Database\n{qlcVisualize} 0.2.1: Visualization for Quantitative Language Comparison\n{ggspark} 0.0.2: ‘ggplot2’ Functions to Create Tufte Style Sparklines\nUpdated Packages\n🔍 Search on R-universe 🔍\n{radiant} 1.6.1: Business Analytics using R and Shiny - diffify\n{ggsci} 3.0.3: Scientific Journal and Sci-Fi Themed Color Palettes for\n‘ggplot2’ - diffify\n{deps} 0.2.0: Dependency Management with ‘roxygen’-Style Comments - diffify\n{cleanNLP} 3.1.0: A Tidy Data Model for Natural Language Processing - diffify\n{FIESTA} 3.6.3: Forest Inventory Estimation and Analysis - diffify\n{fuj} 0.2.1: Functions and Utilities for Jordan - diffify\n{shiny.react} 0.4.0: Tools for Using React in Shiny - diffify\n{rspm} 0.5.3: ‘RStudio’ Package Manager - diffify\n{ledger} 2.0.11: Utilities for Importing Data from Plain Text Accounting Files - diffify\n{spNetwork} 0.4.4: Spatial Analysis on Network - diffify\n{ggscidca} 0.2.3: Plotting Decision Curve Analysis with Coloured Bars - diffify\n{fedmatch} 2.0.6: Fast, Flexible, and User-Friendly Record Linkage Methods - diffify\n{openairmaps} 0.9.0: Create Maps of Air Pollution Data - diffify\n\n{prqlr} 0.8.1: R Bindings for the ‘prqlc’ Rust Library - diffify\n{modelsummary} 2.1.0: Summary Tables and Plots for Statistical Models and Data:\nBeautiful, Customizable, and Publication-Ready - diffify\n{glossr} 0.8.0: Use Interlinear Glosses in R Markdown - diffify\n{xaringanExtra} 0.8.0: Extras and Extensions for ‘xaringan’ Slides - diffify\n{ruminate} 0.2.3: A Pharmacometrics Data Transformation and Analysis Tool - diffify\n{SSBtools} 1.5.2: Statistics Norway’s Miscellaneous Tools - diffify\n{fscache} 1.0.3: File System Cache - diffify\n{drake} 7.13.10: A Pipeline Toolkit for Reproducible Computation at Scale - diffify\n{iraceplot} 1.3: Plots for Visualizing the Data Produced by the ‘irace’ Package - diffify\n{simstudy} 0.8.0: Simulation of Study Data - diffify\n{hmer} 1.5.9: History Matching and Emulation Package - diffify\n{seqgendiff} 1.2.4: RNA-Seq Generation/Modification for Simulation - diffify\n{latrend} 1.6.1: A Framework for Clustering Longitudinal Data - diffify\n{microeco} 1.7.0: Microbial Community Ecology Data Analysis - diffify\n{ggblanket} 9.0.0: Simplify ‘ggplot2’ Visualisation - diffify\n{misty} 0.6.3: Miscellaneous Functions ‘T. Yanagida’ - diffify\n{tidyEdSurvey} 0.1.3: Integration of ‘dplyr’ and ‘ggplot2’ with ‘EdSurvey’ - diffify\n{unix} 1.5.8: POSIX System Utilities - diffify\nct.org/package=opencpu): Producing and Reproducing Results - diffify\n{nsRFA} 0.7-17: Non-Supervised Regional Frequency Analysis - diffify\n{rgoogleads} 0.11.0: Loading Data from ‘Google Ads API’ - diffify\nVideos and Podcasts\nListen to the R-Weekly Highlights Podcast\nR Internationally\nBig Book of R now has ( books in Spanish!)\nTutorials\nAIC in the well-specified linear model: theory and simulation\nFind Out How many Times Faster your Code is\n\nAutomate code refactoring with {xmlparsedata} and {brio}\ngitlabr V2.1.0 – gitlab-ci with ‘pak’ and functions to deal with groups on GitLab\n\nA simple probabilistic algorithm for estimating the number of distinct elements in a data stream\nProbability of receiving a credit; using learningmachine\nHow to replace some non-available values in a vector with values coming from another vector?\nHow to filter values in a nested tibble without using filter() from dplyr?\nMastering gregexpr() in R: A Comprehensive Guide\nCounting Words in a String in R: A Comprehensive Guide\nHow to Select Columns Containing a Specific String in R\nChecking if Multiple Columns are Equal in R\nHow to Check if a Column Exists in a Data Frame in R\n3MW (Reactive expressions in R-Shiny)\n\n-->\n\nR Project Updates\nUpdates from R Core:\nCall for Participation\nRegister for R/Pharma at posit::conf(2024)\nUpcoming Events in 3 Months\nEvents in 3 Months:\nTackling Hurdles: Embracing Open Source Packages in Pharmaceutical Research - 21st May\nA list of R conferences and meetings\nThis week’s local R-User and applied stats events\nWeekly R Workshops for Ukraine\nConnect\nJoin the Data Science Learning Community\nartistry\n\n\n\nQuotes of the Week\n\n\n\n\nWhen you're about to start writing about creating art with sine and cosine waves for the #rtistry book, but your numerophobic self has to explain the math behind the sine and cosine waves first 🫠: pic.twitter.com/g7wy923bgh\n— Meghan Harris (@meghansharris) March 16, 2024",
      "link": "https://rweekly.org//2024-W21.html",
      "pubDate": "Tue, 21 May 2024 00:00:00 +0000",
      "source": "R Weekly",
      "sourceUrl": "https://rweekly.org",
      "category": "R语言"
    }
  ]
}